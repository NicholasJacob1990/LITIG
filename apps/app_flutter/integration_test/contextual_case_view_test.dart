import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:integration_test/integration_test.dart';
import 'package:meu_app/main.dart' as app;
import 'package:meu_app/src/features/auth/domain/entities/user.dart';
import 'package:meu_app/src/features/cases/domain/entities/allocation_type.dart';
import 'package:meu_app/src/features/cases/domain/entities/contextual_case_data.dart';

void main() {
  IntegrationTestWidgetsFlutterBinding.ensureInitialized();

  group('Sistema de Vis√£o Contextual de Casos - Testes de Integra√ß√£o', () {
    testWidgets('Cliente deve ver experi√™ncia original preservada', (WidgetTester tester) async {
      // Inicializar app
      app.main();
      await tester.pumpAndSettle();

      // Simular login como cliente
      await _loginAsClient(tester);
      
      // Navegar para casos
      await _navigateToCases(tester);
      
      // Verificar que cliente v√™ CaseCard normal (n√£o contextual)
      expect(find.byType(CaseCard), findsAtLeastNWidgets(1));
      expect(find.byType(ContextualCaseCard), findsNothing);
      
      // Entrar em um caso espec√≠fico
      await tester.tap(find.byType(CaseCard).first);
      await tester.pumpAndSettle();
      
      // Verificar se√ß√µes originais do cliente
      expect(find.text('Advogado Respons√°vel'), findsOneWidget);
      expect(find.text('Informa√ß√µes da Consulta'), findsOneWidget);
      expect(find.text('Pr√©-An√°lise'), findsOneWidget);
      expect(find.text('Pr√≥ximos Passos'), findsOneWidget);
      expect(find.text('Documentos'), findsOneWidget);
      expect(find.text('Status do Processo'), findsOneWidget);
      
      // N√£o deve haver se√ß√µes contextuais de advogados
      expect(find.text('Escala√ß√£o e Suporte'), findsNothing);
      expect(find.text('An√°lise Competitiva'), findsNothing);
      expect(find.text('Controle de Qualidade'), findsNothing);
    });

    testWidgets('Advogado Associado deve ver contexto de delega√ß√£o interna', (WidgetTester tester) async {
      // Inicializar app
      app.main();
      await tester.pumpAndSettle();

      // Simular login como advogado associado
      await _loginAsAssociatedLawyer(tester);
      
      // Navegar para casos
      await _navigateToCases(tester);
      
      // Verificar que advogado v√™ ContextualCaseCard
      expect(find.byType(ContextualCaseCard), findsAtLeastNWidgets(1));
      
      // Verificar card espec√≠fico para delega√ß√£o interna
      expect(find.text('üë®‚Äçüíº Delegado por'), findsWidgets);
      expect(find.text('Horas Or√ßadas'), findsWidgets);
      expect(find.text('Registrar Horas'), findsWidgets);
      
      // Entrar em um caso espec√≠fico
      await tester.tap(find.byType(ContextualCaseCard).first);
      await tester.pumpAndSettle();
      
      // Verificar se√ß√µes contextuais de advogado associado
      expect(find.text('Equipe Interna'), findsOneWidget);
      expect(find.text('Informa√ß√µes da Atribui√ß√£o'), findsOneWidget);
      expect(find.text('Breakdown de Tarefas'), findsOneWidget);
      expect(find.text('Documentos de Trabalho'), findsOneWidget);
      expect(find.text('Controle de Tempo'), findsOneWidget);
      expect(find.text('Escala√ß√£o e Suporte'), findsOneWidget);
      
      // N√£o deve haver se√ß√µes de outros perfis
      expect(find.text('An√°lise Competitiva'), findsNothing);
      expect(find.text('Controle de Qualidade'), findsNothing);
    });

    testWidgets('Advogado Contratante deve ver contexto de neg√≥cio', (WidgetTester tester) async {
      // Inicializar app
      app.main();
      await tester.pumpAndSettle();

      // Simular login como advogado contratante
      await _loginAsContractingLawyer(tester);
      
      // Navegar para casos
      await _navigateToCases(tester);
      
      // Verificar que advogado v√™ ContextualCaseCard
      expect(find.byType(ContextualCaseCard), findsAtLeastNWidgets(1));
      
      // Entrar em um caso espec√≠fico
      await tester.tap(find.byType(ContextualCaseCard).first);
      await tester.pumpAndSettle();
      
      // Verificar se√ß√µes contextuais de advogado contratante
      expect(find.text('Contato do Cliente'), findsOneWidget);
      expect(find.text('Oportunidade de Neg√≥cio'), findsOneWidget);
      expect(find.text('Complexidade do Caso'), findsOneWidget);
      expect(find.text('Explica√ß√£o do Match'), findsOneWidget);
      expect(find.text('Documentos Estrat√©gicos'), findsOneWidget);
      expect(find.text('An√°lise de Rentabilidade'), findsOneWidget);
      expect(find.text('An√°lise Competitiva'), findsOneWidget);
      
      // N√£o deve haver se√ß√µes de outros perfis
      expect(find.text('Escala√ß√£o e Suporte'), findsNothing);
      expect(find.text('Controle de Qualidade'), findsNothing);
    });

    testWidgets('Super Associado deve ver contexto de plataforma', (WidgetTester tester) async {
      // Inicializar app
      app.main();
      await tester.pumpAndSettle();

      // Simular login como super associado
      await _loginAsSuperAssociate(tester);
      
      // Navegar para casos
      await _navigateToCases(tester);
      
      // Verificar card espec√≠fico para plataforma
      expect(find.text('üéØ Match direto para voc√™'), findsWidgets);
      expect(find.text('Complexidade'), findsWidgets);
      expect(find.text('Aceitar Caso'), findsWidgets);
      
      // Entrar em um caso espec√≠fico
      await tester.tap(find.byType(ContextualCaseCard).first);
      await tester.pumpAndSettle();
      
      // Verificar se√ß√µes contextuais de super associado
      expect(find.text('Oportunidade na Plataforma'), findsOneWidget);
      expect(find.text('Explica√ß√£o do Match'), findsOneWidget);
      expect(find.text('Framework de Entrega'), findsOneWidget);
      expect(find.text('Documentos da Plataforma'), findsOneWidget);
      expect(find.text('Controle de Qualidade'), findsOneWidget);
      expect(find.text('Pr√≥ximas Oportunidades'), findsOneWidget);
      
      // N√£o deve haver se√ß√µes de outros perfis
      expect(find.text('Escala√ß√£o e Suporte'), findsNothing);
      expect(find.text('An√°lise Competitiva'), findsNothing);
    });

    testWidgets('Factory deve retornar fallback seguro para dados ausentes', (WidgetTester tester) async {
      // Inicializar app
      app.main();
      await tester.pumpAndSettle();

      // Simular login como advogado mas sem dados contextuais
      await _loginAsLawyerWithoutContextualData(tester);
      
      // Navegar para casos
      await _navigateToCases(tester);
      
      // Entrar em um caso espec√≠fico
      await tester.tap(find.byType(CaseCard).first);
      await tester.pumpAndSettle();
      
      // Deve usar fallback para experi√™ncia do cliente
      expect(find.text('Advogado Respons√°vel'), findsOneWidget);
      expect(find.text('Informa√ß√µes da Consulta'), findsOneWidget);
      expect(find.text('Pr√©-An√°lise'), findsOneWidget);
      expect(find.text('Pr√≥ximos Passos'), findsOneWidget);
      expect(find.text('Documentos'), findsOneWidget);
      expect(find.text('Status do Processo'), findsOneWidget);
    });

    testWidgets('A√ß√µes contextuais devem funcionar corretamente', (WidgetTester tester) async {
      // Inicializar app
      app.main();
      await tester.pumpAndSettle();

      // Simular login como advogado associado
      await _loginAsAssociatedLawyer(tester);
      
      // Navegar para casos
      await _navigateToCases(tester);
      
      // Testar a√ß√£o "Registrar Horas"
      await tester.tap(find.text('Registrar Horas'));
      await tester.pumpAndSettle();
      
      // Verificar feedback
      expect(find.text('Registrando horas...'), findsOneWidget);
      
      // Testar a√ß√£o "Atualizar Status"
      await tester.tap(find.text('Atualizar Status'));
      await tester.pumpAndSettle();
      
      // Verificar feedback
      expect(find.text('Status atualizado!'), findsOneWidget);
    });

    testWidgets('Loading states devem ser exibidos corretamente', (WidgetTester tester) async {
      // Inicializar app
      app.main();
      await tester.pumpAndSettle();

      // Simular login como advogado
      await _loginAsContractingLawyer(tester);
      
      // Navegar para casos
      await _navigateToCases(tester);
      
      // Entrar em um caso espec√≠fico
      await tester.tap(find.byType(ContextualCaseCard).first);
      await tester.pump(); // N√£o esperar settle para capturar loading
      
      // Verificar loading de dados contextuais
      expect(find.text('Carregando dados contextuais...'), findsOneWidget);
      expect(find.byType(CircularProgressIndicator), findsWidgets);
      
      // Esperar carregamento completar
      await tester.pumpAndSettle();
      
      // Loading deve ter desaparecido
      expect(find.text('Carregando dados contextuais...'), findsNothing);
    });

    testWidgets('Sistema deve manter consist√™ncia visual entre perfis', (WidgetTester tester) async {
      // Inicializar app
      app.main();
      await tester.pumpAndSettle();

      // Testar consist√™ncia para cliente
      await _loginAsClient(tester);
      await _navigateToCases(tester);
      await tester.tap(find.byType(CaseCard).first);
      await tester.pumpAndSettle();
      
      // Verificar elementos de design consistentes
      expect(find.byType(Card), findsWidgets);
      expect(find.byType(SizedBox), findsWidgets);
      
      // Voltar e testar com advogado associado
      await tester.pageBack();
      await tester.pumpAndSettle();
      await _logoutAndLoginAsAssociatedLawyer(tester);
      await _navigateToCases(tester);
      await tester.tap(find.byType(ContextualCaseCard).first);
      await tester.pumpAndSettle();
      
      // Verificar mesmos elementos de design
      expect(find.byType(Card), findsWidgets);
      expect(find.byType(SizedBox), findsWidgets);
      
      // Verificar que badges contextuais est√£o presentes
      expect(find.text('Escrit√≥rio'), findsWidgets);
      expect(find.text('Neg√≥cio'), findsNothing); // N√£o deve ter badge de neg√≥cio
    });
  });
}

// Fun√ß√µes auxiliares para simula√ß√£o de login e navega√ß√£o

Future<void> _loginAsClient(WidgetTester tester) async {
  // Simular login como cliente
  // TODO: Implementar simula√ß√£o de login baseada na estrutura atual de auth
}

Future<void> _loginAsAssociatedLawyer(WidgetTester tester) async {
  // Simular login como advogado associado
  // TODO: Implementar simula√ß√£o com role = 'lawyer_associated'
}

Future<void> _loginAsContractingLawyer(WidgetTester tester) async {
  // Simular login como advogado contratante
  // TODO: Implementar simula√ß√£o com role = 'lawyer_individual' ou 'lawyer_office'
}

Future<void> _loginAsSuperAssociate(WidgetTester tester) async {
  // Simular login como super associado
  // TODO: Implementar simula√ß√£o com role = 'lawyer_platform_associate'
}

Future<void> _loginAsLawyerWithoutContextualData(WidgetTester tester) async {
  // Simular login como advogado mas for√ßar erro/aus√™ncia de dados contextuais
  // TODO: Implementar simula√ß√£o de erro na API contextual
}

Future<void> _navigateToCases(WidgetTester tester) async {
  // Navegar para a tela de casos baseado no perfil do usu√°rio
  await tester.tap(find.text('Meus Casos'));
  await tester.pumpAndSettle();
}

Future<void> _logoutAndLoginAsAssociatedLawyer(WidgetTester tester) async {
  // Fazer logout e login como advogado associado
  // TODO: Implementar troca de usu√°rio em runtime
}

// Mocks e dados de teste

class MockUser extends User {
  MockUser({
    required String super.role,
    required super.id,
    required String super.fullName,
  }) : super(
    email: 'test@example.com',
    createdAt: DateTime.now(),
    permissions: _getPermissionsForRole(role),
  );

  static List<String> _getPermissionsForRole(String role) {
    switch (role) {
      case 'client':
        return ['view_cases', 'create_cases'];
      case 'lawyer_associated':
        return ['view_cases', 'manage_tasks', 'log_hours'];
      case 'lawyer_individual':
      case 'lawyer_office':
        return ['view_cases', 'manage_business', 'view_analytics'];
      case 'lawyer_platform_associate':
        return ['view_cases', 'manage_quality', 'view_opportunities'];
      default:
        return [];
    }
  }
}

class MockContextualCaseData extends ContextualCaseData {
  const MockContextualCaseData({
    required super.allocationType,
    super.delegatedByName,
    super.hoursBudgeted,
    super.hourlyRate,
  });
} 
import 'package:flutter_test/flutter_test.dart';
import 'package:integration_test/integration_test.dart';
import 'package:meu_app/main.dart' as app;
import 'package:meu_app/src/features/auth/domain/entities/user.dart';
import 'package:meu_app/src/features/cases/domain/entities/allocation_type.dart';
import 'package:meu_app/src/features/cases/domain/entities/contextual_case_data.dart';

void main() {
  IntegrationTestWidgetsFlutterBinding.ensureInitialized();

  group('Sistema de Vis√£o Contextual de Casos - Testes de Integra√ß√£o', () {
    testWidgets('Cliente deve ver experi√™ncia original preservada', (WidgetTester tester) async {
      // Inicializar app
      app.main();
      await tester.pumpAndSettle();

      // Simular login como cliente
      await _loginAsClient(tester);
      
      // Navegar para casos
      await _navigateToCases(tester);
      
      // Verificar que cliente v√™ CaseCard normal (n√£o contextual)
      expect(find.byType(CaseCard), findsAtLeastNWidgets(1));
      expect(find.byType(ContextualCaseCard), findsNothing);
      
      // Entrar em um caso espec√≠fico
      await tester.tap(find.byType(CaseCard).first);
      await tester.pumpAndSettle();
      
      // Verificar se√ß√µes originais do cliente
      expect(find.text('Advogado Respons√°vel'), findsOneWidget);
      expect(find.text('Informa√ß√µes da Consulta'), findsOneWidget);
      expect(find.text('Pr√©-An√°lise'), findsOneWidget);
      expect(find.text('Pr√≥ximos Passos'), findsOneWidget);
      expect(find.text('Documentos'), findsOneWidget);
      expect(find.text('Status do Processo'), findsOneWidget);
      
      // N√£o deve haver se√ß√µes contextuais de advogados
      expect(find.text('Escala√ß√£o e Suporte'), findsNothing);
      expect(find.text('An√°lise Competitiva'), findsNothing);
      expect(find.text('Controle de Qualidade'), findsNothing);
    });

    testWidgets('Advogado Associado deve ver contexto de delega√ß√£o interna', (WidgetTester tester) async {
      // Inicializar app
      app.main();
      await tester.pumpAndSettle();

      // Simular login como advogado associado
      await _loginAsAssociatedLawyer(tester);
      
      // Navegar para casos
      await _navigateToCases(tester);
      
      // Verificar que advogado v√™ ContextualCaseCard
      expect(find.byType(ContextualCaseCard), findsAtLeastNWidgets(1));
      
      // Verificar card espec√≠fico para delega√ß√£o interna
      expect(find.text('üë®‚Äçüíº Delegado por'), findsWidgets);
      expect(find.text('Horas Or√ßadas'), findsWidgets);
      expect(find.text('Registrar Horas'), findsWidgets);
      
      // Entrar em um caso espec√≠fico
      await tester.tap(find.byType(ContextualCaseCard).first);
      await tester.pumpAndSettle();
      
      // Verificar se√ß√µes contextuais de advogado associado
      expect(find.text('Equipe Interna'), findsOneWidget);
      expect(find.text('Informa√ß√µes da Atribui√ß√£o'), findsOneWidget);
      expect(find.text('Breakdown de Tarefas'), findsOneWidget);
      expect(find.text('Documentos de Trabalho'), findsOneWidget);
      expect(find.text('Controle de Tempo'), findsOneWidget);
      expect(find.text('Escala√ß√£o e Suporte'), findsOneWidget);
      
      // N√£o deve haver se√ß√µes de outros perfis
      expect(find.text('An√°lise Competitiva'), findsNothing);
      expect(find.text('Controle de Qualidade'), findsNothing);
    });

    testWidgets('Advogado Contratante deve ver contexto de neg√≥cio', (WidgetTester tester) async {
      // Inicializar app
      app.main();
      await tester.pumpAndSettle();

      // Simular login como advogado contratante
      await _loginAsContractingLawyer(tester);
      
      // Navegar para casos
      await _navigateToCases(tester);
      
      // Verificar que advogado v√™ ContextualCaseCard
      expect(find.byType(ContextualCaseCard), findsAtLeastNWidgets(1));
      
      // Entrar em um caso espec√≠fico
      await tester.tap(find.byType(ContextualCaseCard).first);
      await tester.pumpAndSettle();
      
      // Verificar se√ß√µes contextuais de advogado contratante
      expect(find.text('Contato do Cliente'), findsOneWidget);
      expect(find.text('Oportunidade de Neg√≥cio'), findsOneWidget);
      expect(find.text('Complexidade do Caso'), findsOneWidget);
      expect(find.text('Explica√ß√£o do Match'), findsOneWidget);
      expect(find.text('Documentos Estrat√©gicos'), findsOneWidget);
      expect(find.text('An√°lise de Rentabilidade'), findsOneWidget);
      expect(find.text('An√°lise Competitiva'), findsOneWidget);
      
      // N√£o deve haver se√ß√µes de outros perfis
      expect(find.text('Escala√ß√£o e Suporte'), findsNothing);
      expect(find.text('Controle de Qualidade'), findsNothing);
    });

    testWidgets('Super Associado deve ver contexto de plataforma', (WidgetTester tester) async {
      // Inicializar app
      app.main();
      await tester.pumpAndSettle();

      // Simular login como super associado
      await _loginAsSuperAssociate(tester);
      
      // Navegar para casos
      await _navigateToCases(tester);
      
      // Verificar card espec√≠fico para plataforma
      expect(find.text('üéØ Match direto para voc√™'), findsWidgets);
      expect(find.text('Complexidade'), findsWidgets);
      expect(find.text('Aceitar Caso'), findsWidgets);
      
      // Entrar em um caso espec√≠fico
      await tester.tap(find.byType(ContextualCaseCard).first);
      await tester.pumpAndSettle();
      
      // Verificar se√ß√µes contextuais de super associado
      expect(find.text('Oportunidade na Plataforma'), findsOneWidget);
      expect(find.text('Explica√ß√£o do Match'), findsOneWidget);
      expect(find.text('Framework de Entrega'), findsOneWidget);
      expect(find.text('Documentos da Plataforma'), findsOneWidget);
      expect(find.text('Controle de Qualidade'), findsOneWidget);
      expect(find.text('Pr√≥ximas Oportunidades'), findsOneWidget);
      
      // N√£o deve haver se√ß√µes de outros perfis
      expect(find.text('Escala√ß√£o e Suporte'), findsNothing);
      expect(find.text('An√°lise Competitiva'), findsNothing);
    });

    testWidgets('Factory deve retornar fallback seguro para dados ausentes', (WidgetTester tester) async {
      // Inicializar app
      app.main();
      await tester.pumpAndSettle();

      // Simular login como advogado mas sem dados contextuais
      await _loginAsLawyerWithoutContextualData(tester);
      
      // Navegar para casos
      await _navigateToCases(tester);
      
      // Entrar em um caso espec√≠fico
      await tester.tap(find.byType(CaseCard).first);
      await tester.pumpAndSettle();
      
      // Deve usar fallback para experi√™ncia do cliente
      expect(find.text('Advogado Respons√°vel'), findsOneWidget);
      expect(find.text('Informa√ß√µes da Consulta'), findsOneWidget);
      expect(find.text('Pr√©-An√°lise'), findsOneWidget);
      expect(find.text('Pr√≥ximos Passos'), findsOneWidget);
      expect(find.text('Documentos'), findsOneWidget);
      expect(find.text('Status do Processo'), findsOneWidget);
    });

    testWidgets('A√ß√µes contextuais devem funcionar corretamente', (WidgetTester tester) async {
      // Inicializar app
      app.main();
      await tester.pumpAndSettle();

      // Simular login como advogado associado
      await _loginAsAssociatedLawyer(tester);
      
      // Navegar para casos
      await _navigateToCases(tester);
      
      // Testar a√ß√£o "Registrar Horas"
      await tester.tap(find.text('Registrar Horas'));
      await tester.pumpAndSettle();
      
      // Verificar feedback
      expect(find.text('Registrando horas...'), findsOneWidget);
      
      // Testar a√ß√£o "Atualizar Status"
      await tester.tap(find.text('Atualizar Status'));
      await tester.pumpAndSettle();
      
      // Verificar feedback
      expect(find.text('Status atualizado!'), findsOneWidget);
    });

    testWidgets('Loading states devem ser exibidos corretamente', (WidgetTester tester) async {
      // Inicializar app
      app.main();
      await tester.pumpAndSettle();

      // Simular login como advogado
      await _loginAsContractingLawyer(tester);
      
      // Navegar para casos
      await _navigateToCases(tester);
      
      // Entrar em um caso espec√≠fico
      await tester.tap(find.byType(ContextualCaseCard).first);
      await tester.pump(); // N√£o esperar settle para capturar loading
      
      // Verificar loading de dados contextuais
      expect(find.text('Carregando dados contextuais...'), findsOneWidget);
      expect(find.byType(CircularProgressIndicator), findsWidgets);
      
      // Esperar carregamento completar
      await tester.pumpAndSettle();
      
      // Loading deve ter desaparecido
      expect(find.text('Carregando dados contextuais...'), findsNothing);
    });

    testWidgets('Sistema deve manter consist√™ncia visual entre perfis', (WidgetTester tester) async {
      // Inicializar app
      app.main();
      await tester.pumpAndSettle();

      // Testar consist√™ncia para cliente
      await _loginAsClient(tester);
      await _navigateToCases(tester);
      await tester.tap(find.byType(CaseCard).first);
      await tester.pumpAndSettle();
      
      // Verificar elementos de design consistentes
      expect(find.byType(Card), findsWidgets);
      expect(find.byType(SizedBox), findsWidgets);
      
      // Voltar e testar com advogado associado
      await tester.pageBack();
      await tester.pumpAndSettle();
      await _logoutAndLoginAsAssociatedLawyer(tester);
      await _navigateToCases(tester);
      await tester.tap(find.byType(ContextualCaseCard).first);
      await tester.pumpAndSettle();
      
      // Verificar mesmos elementos de design
      expect(find.byType(Card), findsWidgets);
      expect(find.byType(SizedBox), findsWidgets);
      
      // Verificar que badges contextuais est√£o presentes
      expect(find.text('Escrit√≥rio'), findsWidgets);
      expect(find.text('Neg√≥cio'), findsNothing); // N√£o deve ter badge de neg√≥cio
    });
  });
}

// Fun√ß√µes auxiliares para simula√ß√£o de login e navega√ß√£o

Future<void> _loginAsClient(WidgetTester tester) async {
  // Simular login como cliente
  // TODO: Implementar simula√ß√£o de login baseada na estrutura atual de auth
}

Future<void> _loginAsAssociatedLawyer(WidgetTester tester) async {
  // Simular login como advogado associado
  // TODO: Implementar simula√ß√£o com role = 'lawyer_associated'
}

Future<void> _loginAsContractingLawyer(WidgetTester tester) async {
  // Simular login como advogado contratante
  // TODO: Implementar simula√ß√£o com role = 'lawyer_individual' ou 'lawyer_office'
}

Future<void> _loginAsSuperAssociate(WidgetTester tester) async {
  // Simular login como super associado
  // TODO: Implementar simula√ß√£o com role = 'lawyer_platform_associate'
}

Future<void> _loginAsLawyerWithoutContextualData(WidgetTester tester) async {
  // Simular login como advogado mas for√ßar erro/aus√™ncia de dados contextuais
  // TODO: Implementar simula√ß√£o de erro na API contextual
}

Future<void> _navigateToCases(WidgetTester tester) async {
  // Navegar para a tela de casos baseado no perfil do usu√°rio
  await tester.tap(find.text('Meus Casos'));
  await tester.pumpAndSettle();
}

Future<void> _logoutAndLoginAsAssociatedLawyer(WidgetTester tester) async {
  // Fazer logout e login como advogado associado
  // TODO: Implementar troca de usu√°rio em runtime
}

// Mocks e dados de teste

class MockUser extends User {
  MockUser({
    required String super.role,
    required super.id,
    required String super.fullName,
  }) : super(
    email: 'test@example.com',
    createdAt: DateTime.now(),
    permissions: _getPermissionsForRole(role),
  );

  static List<String> _getPermissionsForRole(String role) {
    switch (role) {
      case 'client':
        return ['view_cases', 'create_cases'];
      case 'lawyer_associated':
        return ['view_cases', 'manage_tasks', 'log_hours'];
      case 'lawyer_individual':
      case 'lawyer_office':
        return ['view_cases', 'manage_business', 'view_analytics'];
      case 'lawyer_platform_associate':
        return ['view_cases', 'manage_quality', 'view_opportunities'];
      default:
        return [];
    }
  }
}

class MockContextualCaseData extends ContextualCaseData {
  const MockContextualCaseData({
    required super.allocationType,
    super.delegatedByName,
    super.hoursBudgeted,
    super.hourlyRate,
  });
} 