/*
EXEMPLO DE USO: Sistema Integrado de Notifica√ß√µes de Casos com Email

Este arquivo demonstra como usar o sistema completo de notifica√ß√µes
que inclui notifica√ß√µes no app + envio autom√°tico de emails.
*/

import 'package:meu_app/injection_container.dart';
import 'case_notification_service.dart';

class CaseNotificationExample {
  
  /// Exemplo: Notificar atribui√ß√£o de caso com email
  static Future<void> exemploNotificarCasoAtribuido() async {
    final caseNotificationService = getIt<CaseNotificationService>();
    
    // Enviar notifica√ß√£o completa (app + email)
    await caseNotificationService.notifyCaseAssigned(
      caseId: 'case_12345',
      caseTitle: 'A√ß√£o Trabalhista - Jo√£o Silva',
      lawyerId: 'lawyer_67890',
      clientName: 'Jo√£o Silva',
      userEmail: 'advogado@escritorio.com', // ‚ö° Email ser√° enviado automaticamente
      userName: 'Dr. Maria Fernanda',
    );
    
    /*
    üî• O QUE ACONTECE:
    1. ‚úÖ Notifica√ß√£o criada no app (banco local)
    2. ‚úÖ Email HTML enviado automaticamente via backend
    3. ‚úÖ Email cont√©m:
       - T√≠tulo: "üéØ Novo Caso Atribu√≠do"
       - Detalhes do caso e cliente
       - Link para visualizar o caso
       - Template HTML responsivo
    */
  }
  
  /// Exemplo: M√∫ltiplas notifica√ß√µes em sequ√™ncia
  static Future<void> exemploFluxoCompleto() async {
    final service = getIt<CaseNotificationService>();
    
    const caseId = 'case_workflow_001';
    const userEmail = 'advogado@litig.com';
    const userName = 'Dr. Jo√£o Santos';
    
    // 1. Caso atribu√≠do
    await service.notifyCaseAssigned(
      caseId: caseId,
      caseTitle: 'Revis√£o Contratual - Empresa XYZ',
      lawyerId: 'lawyer_001',
      clientName: 'Empresa XYZ Ltda',
      userEmail: userEmail,
      userName: userName,
    );
    
    // 2. Documento carregado (simula√ß√£o ap√≥s algum tempo)
    await Future.delayed(const Duration(seconds: 2));
    await service.notifyDocumentUploaded(
      caseId: caseId,
      caseTitle: 'Revis√£o Contratual - Empresa XYZ',
      userId: 'lawyer_001',
      documentName: 'contrato_revisado_v2.pdf',
      uploaderName: 'Cliente XYZ',
      userEmail: userEmail,
      userName: userName,
    );
    
    // 3. Documento aprovado
    await Future.delayed(const Duration(seconds: 2));
    await service.notifyDocumentApproved(
      caseId: caseId,
      caseTitle: 'Revis√£o Contratual - Empresa XYZ',
      userId: 'lawyer_001',
      documentName: 'contrato_revisado_v2.pdf',
      approverName: 'Dr. Jo√£o Santos',
      userEmail: userEmail,
      userName: userName,
    );
    
    // 4. Caso conclu√≠do
    await Future.delayed(const Duration(seconds: 2));
    await service.notifyCaseCompleted(
      caseId: caseId,
      caseTitle: 'Revis√£o Contratual - Empresa XYZ',
      userId: 'lawyer_001',
      completedBy: 'Dr. Jo√£o Santos',
      userEmail: userEmail,
      userName: userName,
    );
    
    /*
    üéØ RESULTADO:
    - 4 notifica√ß√µes no app
    - 4 emails HTML enviados automaticamente
    - Cada email com conte√∫do espec√≠fico e contextual
    - Logs detalhados de cada opera√ß√£o
    */
  }
  
  /// Exemplo: Notifica√ß√£o sem email (apenas app)
  static Future<void> exemploSemEmail() async {
    final service = getIt<CaseNotificationService>();
    
    // N√£o fornecer userEmail e userName = apenas notifica√ß√£o no app
    await service.notifyCaseAssigned(
      caseId: 'case_local_only',
      caseTitle: 'Caso Local',
      lawyerId: 'lawyer_test',
      clientName: 'Cliente Test',
      // userEmail: null, // ‚ùå Sem email
      // userName: null,  // ‚ùå Sem email
    );
    
    /*
    ‚ÑπÔ∏è RESULTADO:
    - ‚úÖ Notifica√ß√£o criada no app
    - ‚ùå Email n√£o enviado (dados n√£o fornecidos)
    */
  }
  
  /// Exemplo: Teste do sistema de emails
  static Future<void> testarSistemaEmail() async {
    final service = getIt<CaseNotificationService>();
    
    try {
      // Usar o remote data source diretamente para teste
      final remoteDataSource = getIt<CaseNotificationService>()._remoteDataSource;
      
      final sucesso = await remoteDataSource.testCaseNotification();
      
      if (sucesso) {
        print('‚úÖ Sistema de email funcionando!');
      } else {
        print('‚ùå Falha no sistema de email');
      }
      
    } catch (e) {
      print('üö® Erro no teste: $e');
    }
  }
}

/*
üìã CHECKLIST DE CONFIGURA√á√ÉO:

Backend:
‚úÖ EmailService configurado com SendGrid/SMTP
‚úÖ CaseNotificationEmailService criado
‚úÖ Rota /api/v1/case-notifications/send ativa
‚úÖ Templates HTML para cada tipo de notifica√ß√£o

Frontend:
‚úÖ CaseNotificationService integrado
‚úÖ CaseNotificationRemoteDataSource criado
‚úÖ Depend√™ncias registradas no injection_container
‚úÖ M√©todos atualizados para aceitar email/userName

Para Usar:
1. Configure SENDGRID_API_KEY no backend
2. Ajuste baseUrl no injection_container (localhost vs produ√ß√£o)
3. Chame os m√©todos com userEmail e userName preenchidos
4. Monitore logs para verificar envio de emails

Tipos de Email Suportados:
üéØ caseAssigned - Caso atribu√≠do
üîÑ caseStatusChanged - Status alterado
üìÑ documentUploaded - Documento enviado
‚úÖ documentApproved - Documento aprovado
‚ùå documentRejected - Documento rejeitado
üí¨ newCaseMessage - Nova mensagem
‚è∞ caseDeadlineApproaching - Prazo pr√≥ximo
üéâ caseCompleted - Caso conclu√≠do
‚öñÔ∏è hearingScheduled - Audi√™ncia marcada
‚ÜîÔ∏è caseTransferred - Caso transferido
*/