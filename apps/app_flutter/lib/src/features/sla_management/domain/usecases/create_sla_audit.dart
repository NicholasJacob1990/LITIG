import 'package:dartz/dartz.dart';
import '../../../../core/error/failures.dart';
import '../../../../core/usecases/usecase.dart';
import '../entities/sla_audit_entity.dart';
import '../entities/sla_enums.dart';
import '../repositories/sla_audit_repository.dart';

class CreateSlaAudit implements UseCase<SlaAuditEntity, CreateSlaAuditParams> {
  final SlaAuditRepository repository;

  CreateSlaAudit(this.repository);

  @override
  Future<Either<Failure, SlaAuditEntity>> call(CreateSlaAuditParams params) async {
    return await repository.createAuditEvent(
      auditEvent: SlaAuditEntity(
        id: '', // Will be generated by the repository
        firmId: params.firmId,
        eventType: params.eventType,
        eventCategory: params.eventCategory,
        action: params.action,
        description: params.description,
        timestamp: DateTime.now(),
        userId: params.userId,
        userRole: params.userRole,
        ipAddress: params.ipAddress,
        userAgent: params.userAgent,
        entityId: params.entityId,
        entityType: params.entityType,
        oldValues: params.oldValues,
        newValues: params.newValues,
      ),
    );
  }
}

class CreateSlaAuditParams {
  final String firmId;
  final AuditEventType eventType;
  final AuditEventCategory eventCategory;
  final String action;
  final String description;
  final String userId;
  final String userRole;
  final String ipAddress;
  final String userAgent;
  final String? entityId;
  final String? entityType;
  final Map<String, dynamic>? oldValues;
  final Map<String, dynamic>? newValues;

  CreateSlaAuditParams({
    required this.firmId,
    required this.eventType,
    required this.eventCategory,
    required this.action,
    required this.description,
    required this.userId,
    required this.userRole,
    required this.ipAddress,
    required this.userAgent,
    this.entityId,
    this.entityType,
    this.oldValues,
    this.newValues,
  });

  Map<String, dynamic> toMap() {
    return {
      'firmId': firmId,
      'eventType': eventType.toString(),
      'eventCategory': eventCategory.toString(),
      'action': action,
      'description': description,
      'userId': userId,
      'userRole': userRole,
      'ipAddress': ipAddress,
      'userAgent': userAgent,
      'entityId': entityId,
      'entityType': entityType,
      'oldValues': oldValues,
      'newValues': newValues,
    };
  }
}

class GetSlaAuditTrail implements UseCase<List<SlaAuditEntity>, GetSlaAuditTrailParams> {
  final SlaAuditRepository repository;

  GetSlaAuditTrail(this.repository);

  @override
  Future<Either<Failure, List<SlaAuditEntity>>> call(GetSlaAuditTrailParams params) async {
    return await repository.getEntityAuditTrail(
      entityType: params.entityType ?? 'sla_case',
      entityId: params.entityId ?? '',
      startDate: params.startDate,
      endDate: params.endDate,
    );
  }
}

class GetSlaAuditTrailParams {
  final String firmId;
  final String? entityId;
  final String? entityType;
  final List<AuditEventType>? eventTypes;
  final String? userId;
  final DateTime? startDate;
  final DateTime? endDate;
  final int limit;
  final int offset;

  GetSlaAuditTrailParams({
    required this.firmId,
    this.entityId,
    this.entityType,
    this.eventTypes,
    this.userId,
    this.startDate,
    this.endDate,
    this.limit = 100,
    this.offset = 0,
  });
}

class GenerateComplianceReport implements UseCase<Map<String, dynamic>, GenerateComplianceReportParams> {
  final SlaAuditRepository repository;

  GenerateComplianceReport(this.repository);

  @override
  Future<Either<Failure, Map<String, dynamic>>> call(GenerateComplianceReportParams params) async {
    return await repository.generateComplianceReport(
      firmId: params.firmId,
      startDate: params.startDate,
      endDate: params.endDate,
      reportType: params.reportType ?? 'standard',
    );
  }
}

class GenerateComplianceReportParams {
  final String firmId;
  final DateTime startDate;
  final DateTime endDate;
  final String? reportType; // 'standard', 'detailed', 'summary'

  GenerateComplianceReportParams({
    required this.firmId,
    required this.startDate,
    required this.endDate,
    this.reportType,
  });
}

class VerifyAuditIntegrity implements UseCase<Map<String, dynamic>, VerifyAuditIntegrityParams> {
  final SlaAuditRepository repository;

  VerifyAuditIntegrity(this.repository);

  @override
  Future<Either<Failure, Map<String, dynamic>>> call(VerifyAuditIntegrityParams params) async {
    return await repository.verifyLogIntegrity(
      firmId: params.firmId,
      startDate: params.startDate,
      endDate: params.endDate,
    );
  }
}

class VerifyAuditIntegrityParams {
  final String firmId;
  final DateTime? startDate;
  final DateTime? endDate;

  VerifyAuditIntegrityParams({
    required this.firmId,
    this.startDate,
    this.endDate,
  });
}

class ExportAuditLog implements UseCase<String, ExportAuditLogParams> {
  final SlaAuditRepository repository;

  ExportAuditLog(this.repository);

  @override
  Future<Either<Failure, String>> call(ExportAuditLogParams params) async {
    return await repository.exportAuditLogs(
      firmId: params.firmId,
      format: params.format,
      startDate: params.startDate ?? DateTime.now().subtract(const Duration(days: 30)),
      endDate: params.endDate ?? DateTime.now(),
      filters: {
        'includeMetadata': params.includeMetadata,
        'encryptFile': params.encryptFile,
      },
    );
  }
}

class ExportAuditLogParams {
  final String firmId;
  final String format; // 'json', 'csv', 'xml', 'pdf'
  final DateTime? startDate;
  final DateTime? endDate;
  final bool includeMetadata;
  final bool encryptFile;

  ExportAuditLogParams({
    required this.firmId,
    required this.format,
    this.startDate,
    this.endDate,
    this.includeMetadata = true,
    this.encryptFile = false,
  });
}
