// Mocks generated by Mockito 5.4.6 from annotations
// in meu_app/test/features/cluster_insights/presentation/bloc/trending_clusters_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:meu_app/src/features/cluster_insights/domain/entities/partnership_recommendation.dart'
    as _i4;
import 'package:meu_app/src/features/cluster_insights/domain/repositories/cluster_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ClusterRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockClusterRepository extends _i1.Mock implements _i2.ClusterRepository {
  MockClusterRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.PartnershipRecommendation>>
      getPartnershipRecommendations({
    required String? lawyerId,
    int? limit = 10,
    double? minCompatibility = 0.6,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #getPartnershipRecommendations,
              [],
              {
                #lawyerId: lawyerId,
                #limit: limit,
                #minCompatibility: minCompatibility,
              },
            ),
            returnValue: _i3.Future<List<_i4.PartnershipRecommendation>>.value(
                <_i4.PartnershipRecommendation>[]),
          ) as _i3.Future<List<_i4.PartnershipRecommendation>>);

  @override
  _i3.Future<void> providePartnershipFeedback({
    required String? lawyerId,
    required String? feedbackType,
    required double? feedbackScore,
    int? interactionTimeSeconds,
    String? feedbackNotes,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #providePartnershipFeedback,
          [],
          {
            #lawyerId: lawyerId,
            #feedbackType: feedbackType,
            #feedbackScore: feedbackScore,
            #interactionTimeSeconds: interactionTimeSeconds,
            #feedbackNotes: feedbackNotes,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<Map<String, dynamic>>> getTrendingClusters({
    String? clusterType = 'case',
    int? limit = 3,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTrendingClusters,
          [],
          {
            #clusterType: clusterType,
            #limit: limit,
          },
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<Map<String, dynamic>?> getClusterDetails(String? clusterId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getClusterDetails,
          [clusterId],
        ),
        returnValue: _i3.Future<Map<String, dynamic>?>.value(),
      ) as _i3.Future<Map<String, dynamic>?>);
}
