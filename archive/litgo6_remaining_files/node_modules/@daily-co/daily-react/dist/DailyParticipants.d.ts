import { DailyParticipant, DailyParticipantTracks, DailyWaitingParticipant } from '@daily-co/daily-js';
import React from 'react';
/**
 * Extends DailyParticipant with convenient additional properties.
 * The `tracks` object needs to omit custom track keys, otherwise
 * autocomplete for `tracks` in useParticipantProperty doesn't work.
 */
export interface ExtendedDailyParticipant extends Omit<DailyParticipant, 'tracks'> {
    last_active?: Date;
    tracks: DailyParticipantTracks;
}
/**
 * Stores the most recent peerId as reported from [active-speaker-change](https://docs.daily.co/reference/daily-js/events/meeting-events#active-speaker-change) event.
 */
export declare const activeIdState: import("jotai/esm/").PrimitiveAtom<string | null> & {
    init: string | null;
};
export declare const localIdState: import("jotai/esm/").PrimitiveAtom<string> & {
    init: string;
};
export declare const localJoinDateState: import("jotai/esm/").PrimitiveAtom<Date | null> & {
    init: Date | null;
};
export declare const participantIdsState: import("jotai/esm/").PrimitiveAtom<string[]> & {
    init: string[];
};
export declare const participantState: import("jotai/esm/vanilla/utils/atomFamily").AtomFamily<string, import("jotai/esm/").PrimitiveAtom<ExtendedDailyParticipant | null> & {
    init: ExtendedDailyParticipant | null;
}>;
export declare const waitingParticipantsState: import("jotai/esm/").PrimitiveAtom<string[]> & {
    init: string[];
};
export declare const waitingParticipantState: import("jotai/esm/vanilla/utils/atomFamily").AtomFamily<string, import("jotai/esm/").PrimitiveAtom<DailyWaitingParticipant> & {
    init: DailyWaitingParticipant;
}>;
export declare const allWaitingParticipantsSelector: (param: DailyWaitingParticipant | undefined) => import("jotai/esm/").WritableAtom<any[], any[], void>;
export declare const DailyParticipants: React.FC<React.PropsWithChildren<unknown>>;
