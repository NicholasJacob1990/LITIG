#!/bin/bash

# Setup para Sistema H√çBRIDO de Integra√ß√£o (Escavador + Jusbrasil)
# LITGO5 - Dados ricos com fallback transparente

set -e

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ SETUP H√çBRIDO - INTEGRA√á√ÉO ESCAVADOR + JUSBRASIL${NC}"
echo -e "${YELLOW}Fonte de dados prim√°ria: Escavador (dados ricos), Fallback: Jusbrasil (cobertura)${NC}"
echo ""

# 1. Instalar depend√™ncias
echo -e "${YELLOW}üîß (1/5) Instalando depend√™ncias Python...${NC}"
pip3 install -r requirements.txt
pip3 install escavador==0.9.2
echo -e "${GREEN}‚úÖ Depend√™ncias instaladas.${NC}\n"

# 2. Executar migra√ß√µes do banco
echo -e "${YELLOW}üóÉÔ∏è  (2/5) Executando migra√ß√µes do banco de dados...${NC}"
if [ -z "$DATABASE_URL" ]; then
    echo -e "${RED}‚ùå ERRO: DATABASE_URL n√£o configurada no .env${NC}"
    exit 1
fi
echo "Aplicando migra√ß√£o realista do Jusbrasil (fallback)..."
psql "$DATABASE_URL" -f supabase/migrations/20250707000001_add_realistic_jusbrasil_fields.sql
echo "Aplicando migra√ß√£o h√≠brida do Escavador (prim√°ria)..."
psql "$DATABASE_URL" -f supabase/migrations/20250708000000_add_hybrid_escavador_fields.sql
echo -e "${GREEN}‚úÖ Migra√ß√µes aplicadas com sucesso.${NC}\n"

# 3. Testar integra√ß√£o com Escavador
echo -e "${YELLOW}üß™ (3/5) Testando integra√ß√£o com a API do Escavador...${NC}"
if [ -z "$ESCAVADOR_API_KEY" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  AVISO: ESCAVADOR_API_KEY n√£o configurada. O teste usar√° dados simulados.${NC}"
fi
python3 -c "
import asyncio, sys, os
sys.path.append(os.getcwd())
async def test():
    try:
        from backend.services.escavador_integration import main
        await main()
        print('‚úÖ Teste da integra√ß√£o Escavador: SUCESSO')
    except Exception as e:
        print(f'‚ùå Teste da integra√ß√£o Escavador: FALHOU - {e}')
        return False
    return True
if not asyncio.run(test()): exit(1)
"
echo -e "${GREEN}‚úÖ Teste da integra√ß√£o com Escavador conclu√≠do.${NC}\n"

# 4. Testar integra√ß√£o H√≠brida
echo -e "${YELLOW}üîÑ (4/5) Testando integra√ß√£o H√çBRIDA...${NC}"
python3 -c "
import asyncio, sys, os
sys.path.append(os.getcwd())
async def test():
    try:
        from backend.services.hybrid_integration import main
        await main()
        print('‚úÖ Teste da integra√ß√£o h√≠brida: SUCESSO')
    except Exception as e:
        print(f'‚ùå Teste da integra√ß√£o h√≠brida: FALHOU - {e}')
        return False
    return True
if not asyncio.run(test()): exit(1)
"
echo -e "${GREEN}‚úÖ Teste da integra√ß√£o h√≠brida conclu√≠do.${NC}\n"

# 5. Health check final
echo -e "${YELLOW}üîç (5/5) Verificando sa√∫de geral do sistema...${NC}"
python3 -c "
import asyncio, sys, os
sys.path.append(os.getcwd())
from backend.api.main import health_check
async def run_health_check():
    class MockRedis:
        async def ping(self): pass
    
    # Simula a depend√™ncia do Redis
    async def get_redis_mock():
        return MockRedis()

    # Injeta a depend√™ncia mockada
    app.dependency_overrides[get_redis] = get_redis_mock

    health = await health_check(redis=await get_redis_mock())
    print(f'Status: {health.status}')
    for service, status in health.services.items():
        print(f'  - {service}: {status}')
    if health.status != 'healthy':
        raise Exception('Health check falhou')

try:
    from backend.api.main import app, get_redis
    asyncio.run(run_health_check())
    print('‚úÖ Health check da API: SUCESSO')
except Exception as e:
    print(f'‚ùå Health check da API: FALHOU - {e}')
    exit(1)
"
echo -e "${GREEN}‚úÖ Health check conclu√≠do.${NC}\n"


echo -e "${GREEN}üéâ SETUP H√çBRIDO CONCLU√çDO COM SUCESSO!${NC}"
echo ""
echo -e "${BLUE}üìã PR√ìXIMOS PASSOS:${NC}"
echo "1. Configure ESCAVADOR_API_KEY e JUSBRASIL_API_KEY no .env"
echo "2. Execute a API: uvicorn backend.api.main:app --reload"
echo "3. Acesse a documenta√ß√£o: http://localhost:8000/docs"
echo ""
echo -e "${YELLOW}‚ö†Ô∏è  LEMBRE-SE: A qualidade dos dados depende da disponibilidade das chaves de API.${NC}" 