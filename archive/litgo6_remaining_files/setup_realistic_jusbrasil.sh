#!/bin/bash

# Setup para Sistema REALISTA de Integra√ß√£o Jusbrasil
# LITGO5 - Dados fact√≠veis e transparentes

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ SETUP REALISTA - INTEGRA√á√ÉO JUSBRASIL${NC}"
echo -e "${YELLOW}Dados fact√≠veis com transpar√™ncia total sobre limita√ß√µes${NC}"
echo ""

# Verificar se est√° no diret√≥rio correto
if [ ! -f "package.json" ] || [ ! -d "backend" ]; then
    echo -e "${RED}‚ùå Execute este script no diret√≥rio raiz do projeto LITGO5${NC}"
    exit 1
fi

# Fun√ß√£o para mostrar menu
show_menu() {
    echo -e "${BLUE}Escolha uma op√ß√£o:${NC}"
    echo "1. üóÉÔ∏è  Executar migra√ß√µes do banco (REALISTA)"
    echo "2. üîß Instalar depend√™ncias Python"
    echo "3. üß™ Testar integra√ß√£o REALISTA"
    echo "4. üìä Executar sincroniza√ß√£o manual"
    echo "5. üîç Health check do sistema"
    echo "6. üìö Ver documenta√ß√£o das limita√ß√µes"
    echo "7. üèÉ Executar TUDO (setup completo)"
    echo "8. ‚ùå Sair"
    echo ""
}

# Fun√ß√£o para executar migra√ß√µes
run_migrations() {
    echo -e "${YELLOW}üóÉÔ∏è  Executando migra√ß√µes REALISTAS...${NC}"
    
    # Verificar se PostgreSQL est√° rodando
    if ! command -v psql &> /dev/null; then
        echo -e "${RED}‚ùå PostgreSQL n√£o encontrado. Instale o PostgreSQL primeiro.${NC}"
        return 1
    fi
    
    # Verificar vari√°vel de ambiente
    if [ -z "$DATABASE_URL" ]; then
        echo -e "${RED}‚ùå DATABASE_URL n√£o configurada${NC}"
        echo "Configure no .env: DATABASE_URL=postgresql://user:pass@localhost/dbname"
        return 1
    fi
    
    # Executar migra√ß√£o
    echo "Aplicando migra√ß√£o de campos REALISTAS..."
    psql "$DATABASE_URL" -f supabase/migrations/20250707000001_add_realistic_jusbrasil_fields.sql
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Migra√ß√µes aplicadas com sucesso${NC}"
    else
        echo -e "${RED}‚ùå Erro ao aplicar migra√ß√µes${NC}"
        return 1
    fi
}

# Fun√ß√£o para instalar depend√™ncias
install_dependencies() {
    echo -e "${YELLOW}üîß Instalando depend√™ncias Python...${NC}"
    
    # Verificar se Python est√° instalado
    if ! command -v python3 &> /dev/null; then
        echo -e "${RED}‚ùå Python 3 n√£o encontrado${NC}"
        return 1
    fi
    
    # Instalar depend√™ncias principais
    pip3 install -r requirements.txt
    
    # Depend√™ncias espec√≠ficas para integra√ß√£o realista
    pip3 install \
        fastapi==0.104.1 \
        uvicorn[standard]==0.24.0 \
        aioredis==5.0.1 \
        psycopg2-binary==2.9.9 \
        httpx==0.25.2 \
        tenacity==8.2.3 \
        sentence-transformers==2.2.2 \
        python-dotenv==1.0.0
    
    echo -e "${GREEN}‚úÖ Depend√™ncias instaladas${NC}"
}

# Fun√ß√£o para testar integra√ß√£o
test_integration() {
    echo -e "${YELLOW}üß™ Testando integra√ß√£o REALISTA...${NC}"
    
    # Testar cliente realista
    python3 -c "
import asyncio
import sys
import os

# Adicionar path do backend
sys.path.append(os.path.join(os.getcwd(), 'backend'))

async def test():
    try:
        from services.jusbrasil_integration_realistic import demo_realistic_integration
        await demo_realistic_integration()
        print('‚úÖ Teste da integra√ß√£o realista: SUCESSO')
    except Exception as e:
        print(f'‚ùå Teste da integra√ß√£o realista: FALHOU - {e}')
        return False
    return True

result = asyncio.run(test())
sys.exit(0 if result else 1)
"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Integra√ß√£o REALISTA funcionando${NC}"
    else
        echo -e "${RED}‚ùå Falha na integra√ß√£o REALISTA${NC}"
        return 1
    fi
}

# Fun√ß√£o para executar sincroniza√ß√£o manual
run_sync() {
    echo -e "${YELLOW}üìä Executando sincroniza√ß√£o manual REALISTA...${NC}"
    
    python3 -c "
import asyncio
import sys
import os

sys.path.append(os.path.join(os.getcwd(), 'backend'))

async def sync():
    try:
        from jobs.jusbrasil_sync_realistic import main
        await main()
        print('‚úÖ Sincroniza√ß√£o realista: CONCLU√çDA')
    except Exception as e:
        print(f'‚ùå Sincroniza√ß√£o realista: FALHOU - {e}')
        return False
    return True

result = asyncio.run(sync())
sys.exit(0 if result else 1)
"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Sincroniza√ß√£o REALISTA conclu√≠da${NC}"
    else
        echo -e "${RED}‚ùå Falha na sincroniza√ß√£o${NC}"
        return 1
    fi
}

# Fun√ß√£o para health check
health_check() {
    echo -e "${YELLOW}üîç Verificando sa√∫de do sistema...${NC}"
    
    # Verificar PostgreSQL
    echo "Testando PostgreSQL..."
    if psql "$DATABASE_URL" -c "SELECT 1;" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ PostgreSQL: OK${NC}"
    else
        echo -e "${RED}‚ùå PostgreSQL: FALHA${NC}"
    fi
    
    # Verificar Redis (opcional)
    echo "Testando Redis..."
    if command -v redis-cli &> /dev/null && redis-cli ping > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Redis: OK${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Redis: INDISPON√çVEL (opcional)${NC}"
    fi
    
    # Verificar depend√™ncias Python
    echo "Verificando depend√™ncias Python..."
    python3 -c "
try:
    import fastapi, aioredis, psycopg2, httpx, tenacity
    print('‚úÖ Depend√™ncias Python: OK')
except ImportError as e:
    print(f'‚ùå Depend√™ncias Python: FALTANDO - {e}')
    exit(1)
"
    
    # Verificar estrutura do banco
    echo "Verificando estrutura do banco..."
    psql "$DATABASE_URL" -c "
    SELECT 
        CASE 
            WHEN EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'lawyers' AND column_name = 'estimated_success_rate') 
            THEN '‚úÖ Campos REALISTAS: OK'
            ELSE '‚ùå Campos REALISTAS: FALTANDO'
        END as status;
    "
}

# Fun√ß√£o para mostrar documenta√ß√£o
show_documentation() {
    echo -e "${BLUE}üìö DOCUMENTA√á√ÉO - LIMITA√á√ïES DOS DADOS JUSBRASIL${NC}"
    echo ""
    echo -e "${YELLOW}üö´ LIMITA√á√ïES CONHECIDAS DA API JUSBRASIL:${NC}"
    echo "1. ‚ùå N√£o categoriza vit√≥rias/derrotas automaticamente"
    echo "2. ‚ùå Processos em segredo de justi√ßa n√£o s√£o retornados"
    echo "3. ‚ùå Processos trabalhistas do autor n√£o retornados (anti-discrimina√ß√£o)"
    echo "4. ‚ùå Apenas processos n√£o atualizados h√° +4 dias"
    echo "5. ‚ùå Foco em monitoramento empresarial, n√£o performance de advogados"
    echo ""
    echo -e "${GREEN}‚úÖ DADOS DISPON√çVEIS (REALISTAS):${NC}"
    echo "1. ‚úÖ Volume total de processos por advogado"
    echo "2. ‚úÖ Distribui√ß√£o por √°rea jur√≠dica"
    echo "3. ‚úÖ Distribui√ß√£o por tribunal"
    echo "4. ‚úÖ Informa√ß√µes b√°sicas dos processos"
    echo "5. ‚úÖ Valores de a√ß√£o (quando dispon√≠veis)"
    echo ""
    echo -e "${BLUE}üéØ ESTRAT√âGIA REALISTA IMPLEMENTADA:${NC}"
    echo "1. üìä Coleta apenas dados fact√≠veis"
    echo "2. üßÆ Usa heur√≠sticas para estimar performance"
    echo "3. üè∑Ô∏è  Calcula scores de especializa√ß√£o por √°rea"
    echo "4. üìà Determina n√≠vel de atividade do advogado"
    echo "5. ‚ö†Ô∏è  Transpar√™ncia total sobre limita√ß√µes"
    echo ""
    echo -e "${YELLOW}üí° USO RECOMENDADO:${NC}"
    echo "- ‚úÖ Matching por experi√™ncia e volume"
    echo "- ‚úÖ An√°lise de especializa√ß√£o por √°rea"
    echo "- ‚úÖ Avalia√ß√£o de atividade profissional"
    echo "- ‚ùå N√ÉO usar para an√°lise de performance real"
    echo "- ‚ùå N√ÉO assumir dados de vit√≥rias/derrotas"
    echo ""
    echo "Pressione ENTER para continuar..."
    read
}

# Fun√ß√£o para setup completo
setup_all() {
    echo -e "${BLUE}üèÉ EXECUTANDO SETUP COMPLETO REALISTA...${NC}"
    echo ""
    
    echo "1/5 - Instalando depend√™ncias..."
    install_dependencies
    echo ""
    
    echo "2/5 - Executando migra√ß√µes..."
    run_migrations
    echo ""
    
    echo "3/5 - Testando integra√ß√£o..."
    test_integration
    echo ""
    
    echo "4/5 - Executando health check..."
    health_check
    echo ""
    
    echo "5/5 - Executando sincroniza√ß√£o de teste..."
    run_sync
    echo ""
    
    echo -e "${GREEN}üéâ SETUP REALISTA CONCLU√çDO COM SUCESSO!${NC}"
    echo ""
    echo -e "${BLUE}üìã PR√ìXIMOS PASSOS:${NC}"
    echo "1. Configure JUSBRASIL_API_KEY no .env (se dispon√≠vel)"
    echo "2. Execute a API: python3 backend/api/main.py"
    echo "3. Acesse a documenta√ß√£o: http://localhost:8000/docs"
    echo "4. Execute testes: python3 test_api.py"
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  LEMBRE-SE:${NC}"
    echo "- Dados s√£o estimativas, n√£o performance real"
    echo "- Transpar√™ncia total sobre limita√ß√µes"
    echo "- Adequado para matching por experi√™ncia"
}

# Loop principal
while true; do
    show_menu
    read -p "Digite sua escolha (1-8): " choice
    echo ""
    
    case $choice in
        1)
            run_migrations
            ;;
        2)
            install_dependencies
            ;;
        3)
            test_integration
            ;;
        4)
            run_sync
            ;;
        5)
            health_check
            ;;
        6)
            show_documentation
            ;;
        7)
            setup_all
            ;;
        8)
            echo -e "${GREEN}üëã Obrigado por usar o LITGO5 REALISTA!${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Op√ß√£o inv√°lida. Tente novamente.${NC}"
            ;;
    esac
    echo ""
    echo "Pressione ENTER para continuar..."
    read
    clear
done 