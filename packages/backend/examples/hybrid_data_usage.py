#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Exemplo de Uso - Sistema de Dados H√≠bridos
==========================================

Este script demonstra como utilizar os endpoints de dados h√≠bridos
para obter informa√ß√µes consolidadas sobre advogados com transpar√™ncia
completa das fontes de dados.
"""

import asyncio
import json
from datetime import datetime
from typing import Dict, Any

import aiohttp
import requests


class HybridDataClient:
    """Cliente para interagir com os endpoints de dados h√≠bridos."""
    
    def __init__(self, base_url: str = "http://localhost:8080"):
        self.base_url = base_url
        self.session = None
    
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def get_lawyer_hybrid_data(self, lawyer_id: str, force_refresh: bool = False) -> Dict[str, Any]:
        """Obt√©m dados h√≠bridos de um advogado."""
        url = f"{self.base_url}/api/v1/hybrid/lawyers/{lawyer_id}"
        params = {"force_refresh": force_refresh}
        
        async with self.session.get(url, params=params) as response:
            if response.status == 200:
                return await response.json()
            else:
                raise Exception(f"Erro {response.status}: {await response.text()}")
    
    async def get_sync_status(self) -> Dict[str, Any]:
        """Obt√©m status de sincroniza√ß√£o."""
        url = f"{self.base_url}/api/v1/hybrid/sync/status"
        
        async with self.session.get(url) as response:
            if response.status == 200:
                return await response.json()
            else:
                raise Exception(f"Erro {response.status}: {await response.text()}")
    
    async def get_sync_report(self) -> Dict[str, Any]:
        """Obt√©m relat√≥rio de sincroniza√ß√£o."""
        url = f"{self.base_url}/api/v1/hybrid/sync/report"
        
        async with self.session.get(url) as response:
            if response.status == 200:
                return await response.json()
            else:
                raise Exception(f"Erro {response.status}: {await response.text()}")
    
    async def trigger_sync(self, lawyer_id: str = None, force_refresh: bool = False) -> Dict[str, Any]:
        """Dispara sincroniza√ß√£o."""
        url = f"{self.base_url}/api/v1/hybrid/sync/trigger"
        params = {}
        
        if lawyer_id:
            params["lawyer_id"] = lawyer_id
        if force_refresh:
            params["force_refresh"] = force_refresh
        
        async with self.session.post(url, params=params) as response:
            if response.status == 200:
                return await response.json()
            else:
                raise Exception(f"Erro {response.status}: {await response.text()}")
    
    async def get_data_sources(self) -> Dict[str, Any]:
        """Lista fontes de dados dispon√≠veis."""
        url = f"{self.base_url}/api/v1/hybrid/data-sources"
        
        async with self.session.get(url) as response:
            if response.status == 200:
                return await response.json()
            else:
                raise Exception(f"Erro {response.status}: {await response.text()}")
    
    async def get_quality_metrics(self, lawyer_id: str) -> Dict[str, Any]:
        """Obt√©m m√©tricas de qualidade de um advogado."""
        url = f"{self.base_url}/api/v1/hybrid/quality-metrics/{lawyer_id}"
        
        async with self.session.get(url) as response:
            if response.status == 200:
                return await response.json()
            else:
                raise Exception(f"Erro {response.status}: {await response.text()}")
    
    async def get_sync_logs(self, entity_type: str = None, status: str = None, limit: int = 10) -> Dict[str, Any]:
        """Obt√©m logs de sincroniza√ß√£o."""
        url = f"{self.base_url}/api/v1/hybrid/sync/logs"
        params = {"limit": limit}
        
        if entity_type:
            params["entity_type"] = entity_type
        if status:
            params["status"] = status
        
        async with self.session.get(url, params=params) as response:
            if response.status == 200:
                return await response.json()
            else:
                raise Exception(f"Erro {response.status}: {await response.text()}")


def print_section(title: str):
    """Imprime se√ß√£o formatada."""
    print(f"\n{'='*60}")
    print(f"üîç {title}")
    print('='*60)


def print_transparency_info(data: Dict[str, Any]):
    """Imprime informa√ß√µes de transpar√™ncia."""
    if "data_transparency" in data:
        print("\nüìä Transpar√™ncia de Dados:")
        for i, transparency in enumerate(data["data_transparency"], 1):
            print(f"  {i}. Fonte: {transparency['source']}")
            print(f"     ‚Ä¢ Confian√ßa: {transparency['confidence_score']:.2f}")
            print(f"     ‚Ä¢ Frescor: {transparency['data_freshness_hours']}h")
            print(f"     ‚Ä¢ Status: {transparency['validation_status']}")
            print(f"     ‚Ä¢ Atualizado: {transparency['last_updated']}")
            if transparency.get('source_url'):
                print(f"     ‚Ä¢ URL: {transparency['source_url']}")
            print()


def print_quality_metrics(data: Dict[str, Any]):
    """Imprime m√©tricas de qualidade."""
    if "data_quality" in data:
        quality = data["data_quality"]
        print("\nüìà M√©tricas de Qualidade:")
        print(f"  ‚Ä¢ Score geral: {quality.get('quality_score', 'N/A')}")
        print(f"  ‚Ä¢ Fontes utilizadas: {quality.get('sources', 'N/A')}")
        print(f"  ‚Ä¢ Frescor m√©dio: {quality.get('freshness', 'N/A')}")
        print(f"  ‚Ä¢ Fonte prim√°ria: {quality.get('primary_source', 'N/A')}")
        print(f"  ‚Ä¢ √öltima sincroniza√ß√£o: {quality.get('last_sync', 'N/A')}")


async def demo_hybrid_data_system():
    """Demonstra√ß√£o completa do sistema de dados h√≠bridos."""
    
    print("üöÄ Demonstra√ß√£o do Sistema de Dados H√≠bridos LITGO6")
    print("="*60)
    
    async with HybridDataClient() as client:
        
        # 1. Listar fontes de dados dispon√≠veis
        print_section("Fontes de Dados Dispon√≠veis")
        try:
            sources = await client.get_data_sources()
            print(f"Total de fontes: {sources['total_sources']}")
            print(f"Fontes ativas: {sources['active_sources']}")
            print("\nFontes configuradas:")
            for source in sources['sources']:
                print(f"  ‚Ä¢ {source['display_name']} ({source['name']})")
                print(f"    Peso: {source['confidence_weight']} | TTL: {source['cache_ttl_hours']}h")
                print(f"    Status: {source['status']} | Vers√£o: {source['api_version']}")
        except Exception as e:
            print(f"‚ùå Erro ao obter fontes: {e}")
        
        # 2. Status de sincroniza√ß√£o
        print_section("Status de Sincroniza√ß√£o")
        try:
            status = await client.get_sync_status()
            print(f"Total de advogados: {status['total_lawyers']}")
            print(f"Advogados sincronizados: {status['synced_lawyers']}")
            print(f"Recentemente sincronizados: {status['recently_synced']}")
            print(f"Cobertura de sincroniza√ß√£o: {status['sync_coverage']:.1f}%")
            print(f"Confian√ßa m√©dia: {status['avg_confidence']:.3f}")
            print(f"Erros: {status.get('error_count', 0)}")
        except Exception as e:
            print(f"‚ùå Erro ao obter status: {e}")
        
        # 3. Relat√≥rio detalhado
        print_section("Relat√≥rio de Sincroniza√ß√£o")
        try:
            report = await client.get_sync_report()
            for entity_report in report:
                print(f"\nüìã {entity_report['entity_type'].upper()}:")
                print(f"  ‚Ä¢ Total: {entity_report['total_entities']}")
                print(f"  ‚Ä¢ Sincronizados: {entity_report['synced_entities']}")
                print(f"  ‚Ä¢ Cobertura: {entity_report['sync_coverage']:.1f}%")
                print(f"  ‚Ä¢ Recentes: {entity_report['recently_synced']}")
                print(f"  ‚Ä¢ Qualidade m√©dia: {entity_report['avg_quality_score']:.3f}")
                print(f"  ‚Ä¢ Erros: {entity_report['error_count']}")
        except Exception as e:
            print(f"‚ùå Erro ao obter relat√≥rio: {e}")
        
        # 4. Exemplo com advogado espec√≠fico (usar ID fict√≠cio)
        print_section("Dados de Advogado Espec√≠fico")
        lawyer_id = "example-lawyer-id"  # Substituir por ID real
        try:
            lawyer_data = await client.get_lawyer_hybrid_data(lawyer_id)
            print(f"üë§ Advogado: {lawyer_data['name']}")
            print(f"üìã OAB: {lawyer_data['oab_number']}")
            print(f"üéØ Especializa√ß√µes: {', '.join(lawyer_data['specializations'])}")
            print(f"‚≠ê Reputa√ß√£o: {lawyer_data['reputation_score']:.2f}")
            print(f"üìä Casos ganhos: {lawyer_data['cases_won']}/{lawyer_data['cases_total']}")
            print(f"‚è±Ô∏è Dura√ß√£o m√©dia: {lawyer_data['avg_case_duration_days']:.1f} dias")
            
            # M√©tricas de sucesso
            if lawyer_data['success_metrics']:
                print(f"\nüìà M√©tricas de Sucesso:")
                for metric, value in lawyer_data['success_metrics'].items():
                    print(f"  ‚Ä¢ {metric}: {value:.3f}")
            
            # Transpar√™ncia
            print_transparency_info(lawyer_data)
            
            # Qualidade
            print_quality_metrics(lawyer_data)
            
        except Exception as e:
            print(f"‚ùå Erro ao obter dados do advogado: {e}")
        
        # 5. M√©tricas de qualidade detalhadas
        print_section("M√©tricas de Qualidade Detalhadas")
        try:
            quality_metrics = await client.get_quality_metrics(lawyer_id)
            print(f"üë§ Advogado: {quality_metrics['lawyer_id']}")
            print(f"üìä Fontes: {quality_metrics['total_sources']}")
            print(f"üïí √öltima atualiza√ß√£o: {quality_metrics['last_updated']}")
            
            print("\nüìã M√©tricas por fonte:")
            for source, metrics in quality_metrics['metrics_by_source'].items():
                print(f"  üîó {source.upper()}:")
                for metric_name, metric_data in metrics.items():
                    print(f"    ‚Ä¢ {metric_name}: {metric_data['value']:.3f}")
                    print(f"      Medido em: {metric_data['measured_at']}")
                
        except Exception as e:
            print(f"‚ùå Erro ao obter m√©tricas de qualidade: {e}")
        
        # 6. Logs de sincroniza√ß√£o
        print_section("Logs de Sincroniza√ß√£o")
        try:
            logs = await client.get_sync_logs(entity_type="lawyer", limit=5)
            print(f"üìã Logs retornados: {logs['total_returned']}")
            
            for log in logs['logs']:
                print(f"\nüîÑ Sincroniza√ß√£o:")
                print(f"  ‚Ä¢ ID: {log['id']}")
                print(f"  ‚Ä¢ Tipo: {log['sync_type']}")
                print(f"  ‚Ä¢ Status: {log['status']}")
                print(f"  ‚Ä¢ Fontes: {', '.join(log['sources_used'])}")
                print(f"  ‚Ä¢ Tempo: {log['execution_time_ms']}ms")
                print(f"  ‚Ä¢ Data: {log['created_at']}")
                
                if log['error_message']:
                    print(f"  ‚Ä¢ Erro: {log['error_message']}")
                
                if log['changes_detected']:
                    print(f"  ‚Ä¢ Mudan√ßas: {len(log['changes_detected'])} detectadas")
                
        except Exception as e:
            print(f"‚ùå Erro ao obter logs: {e}")
        
        # 7. Disparar sincroniza√ß√£o de exemplo
        print_section("Disparar Sincroniza√ß√£o")
        try:
            sync_result = await client.trigger_sync(lawyer_id=lawyer_id)
            print(f"‚úÖ Sincroniza√ß√£o disparada:")
            print(f"  ‚Ä¢ Mensagem: {sync_result['message']}")
            print(f"  ‚Ä¢ Task ID: {sync_result['task_id']}")
            print(f"  ‚Ä¢ Tipo: {sync_result['type']}")
            
        except Exception as e:
            print(f"‚ùå Erro ao disparar sincroniza√ß√£o: {e}")
    
    print("\nüéØ Demonstra√ß√£o conclu√≠da!")
    print("="*60)


def demo_sync_requests():
    """Demonstra√ß√£o usando requests s√≠ncronos."""
    
    print("\nüîÑ Demonstra√ß√£o com Requests S√≠ncronos")
    print("="*40)
    
    base_url = "http://localhost:8080"
    
    # Status de sincroniza√ß√£o
    try:
        response = requests.get(f"{base_url}/api/v1/hybrid/sync/status")
        if response.status_code == 200:
            status = response.json()
            print(f"üìä Status: {status['synced_lawyers']}/{status['total_lawyers']} sincronizados")
            print(f"üìà Cobertura: {status['sync_coverage']:.1f}%")
        else:
            print(f"‚ùå Erro: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {e}")
    
    # Disparar sincroniza√ß√£o completa
    try:
        response = requests.post(f"{base_url}/api/v1/hybrid/sync/trigger")
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Sincroniza√ß√£o disparada: {result['message']}")
        else:
            print(f"‚ùå Erro: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {e}")


if __name__ == "__main__":
    print("üöÄ Iniciando demonstra√ß√£o do Sistema de Dados H√≠bridos")
    
    # Demonstra√ß√£o ass√≠ncrona completa
    asyncio.run(demo_hybrid_data_system())
    
    # Demonstra√ß√£o s√≠ncrona simples
    demo_sync_requests()
    
    print("\n‚ú® Todas as demonstra√ß√µes conclu√≠das!") 