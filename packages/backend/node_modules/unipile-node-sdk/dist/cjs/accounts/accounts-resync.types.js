"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountResyncResponseValidator = exports.AccountResyncResponseSchema = exports.AccountResyncQueryValidator = exports.AccountResyncQuerySchema = exports.AccountResyncLinkedinProductSchema = void 0;
const typebox_1 = require("@sinclair/typebox");
const common_types_js_1 = require("../common/common.types.js");
const compiler_1 = require("@sinclair/typebox/compiler");
// --------------------------------------------------------------------------
// REQUEST
// --------------------------------------------------------------------------
exports.AccountResyncLinkedinProductSchema = (0, common_types_js_1.StringEnum)([
    "classic",
    "recruiter",
    "sales_navigator",
]);
/**
 *
 */
exports.AccountResyncQuerySchema = typebox_1.Type.Object({
    before: typebox_1.Type.Optional(typebox_1.Type.Number()),
    after: typebox_1.Type.Optional(typebox_1.Type.Number()),
    linkedin_product: typebox_1.Type.Optional(exports.AccountResyncLinkedinProductSchema),
});
exports.AccountResyncQueryValidator = compiler_1.TypeCompiler.Compile(exports.AccountResyncQuerySchema);
// --------------------------------------------------------------------------
// RESPONSE
// --------------------------------------------------------------------------
/**
 *
 */
exports.AccountResyncResponseSchema = typebox_1.Type.Object({
    object: typebox_1.Type.Literal("AccountResync"),
    status: (0, common_types_js_1.StringEnum)(["SYNC_STARTED", "SYNC_RUNNING", "SYNC_DONE", "SYNC_ERROR"], {
        description: "The status of the synchronization. You can setup a regular polling on the same route to get updates on its status. A new request after a SYNC_DONE or SYNC_ERROR response will start a fresh sync.",
    }),
});
exports.AccountResyncResponseValidator = compiler_1.TypeCompiler.Compile(exports.AccountResyncResponseSchema);
