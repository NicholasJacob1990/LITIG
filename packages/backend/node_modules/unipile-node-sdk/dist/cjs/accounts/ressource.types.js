"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AllAccountSupportedProviders = exports.MailingAccountSupportedProviders = exports.MessagingAccountSupportedProviders = exports.ViewAccountWithSourceStatusSchema = exports.ViewAccountSchema = exports.MessengerAccountWithSourceStatusSchema = exports.MessengerAccountSchema = exports.InstagramAccountWithSourceStatusSchema = exports.InstagramAccountSchema = exports.TelegramAccountWithSourceStatusSchema = exports.TelegramAccountSchema = exports.ExchangeAccountWithSourceStatusSchema = exports.ExchangeAccountSchema = exports.TwitterAccountWithSourceStatusSchema = exports.TwitterAccountSchema = exports.SlackAccountWithSourceStatusSchema = exports.SlackAccountSchema = exports.LinkedInAccountWithSourceStatusSchema = exports.LinkedInAccountSchema = exports.WhatsAppAccountWithSourceStatusSchema = exports.WhatsAppAccountSchema = exports.GoogleCalendarAccountWithSourceStatusSchema = exports.GoogleCalendarAccountSchema = exports.OutlookAccountWithSourceStatusSchema = exports.OutlookAccountSchema = exports.ICloudAccountWithSourceStatusSchema = exports.ICloudAccountSchema = exports.GoogleAccountWithSourceStatusSchema = exports.GoogleAccountSchema = exports.MailAccountWithSourceStatusSchema = exports.MailAccountSchema = exports.MobileAccountWithSourceStatusSchema = exports.MobileAccountSchema = exports.ViewAccountBaseSchema = exports.MailFullFetchPending = exports.MailFullFetchStarted = exports.AccountSupportedProviderSchema = exports.AccountSourceProviderSchema = exports.AvailableAccountProvider = exports.AccountSignatureSchema = exports.AccountSourceStatusSchema = exports.AccountSourceServiceStatusSchema = exports.ConnectionParamsSchema = exports.EncryptionFormatSchema = exports.ProxyParamsSchema = void 0;
const typebox_1 = require("@sinclair/typebox");
const common_types_js_1 = require("../common/common.types.js");
const date_types_js_1 = require("../common/date.types.js");
const i18n_fake_js_1 = require("../common/i18n.fake.js");
// --------------------------------------------------------------
//  CONNECTION PARAMS
// --------------------------------------------------------------
exports.ProxyParamsSchema = typebox_1.Type.Object({
    host: typebox_1.Type.String(),
    port: typebox_1.Type.Number(),
    username: typebox_1.Type.String(),
    password: typebox_1.Type.String(),
});
exports.EncryptionFormatSchema = typebox_1.Type.Union([
    typebox_1.Type.Literal('tls'),
    typebox_1.Type.Literal('ssl'),
    typebox_1.Type.Literal('starttls'),
    typebox_1.Type.Literal('default'),
]);
exports.ConnectionParamsSchema = {
    Sms: typebox_1.Type.Object({
        phone_number: typebox_1.Type.String(),
        sim_serial_number: typebox_1.Type.String(),
    }),
    MobileCalls: typebox_1.Type.Object({
        phone_number: typebox_1.Type.String(),
        sim_serial_number: typebox_1.Type.String(),
    }),
    Imap: typebox_1.Type.Object({
        imap_host: typebox_1.Type.String(),
        imap_port: typebox_1.Type.Number(),
        imap_user: typebox_1.Type.String(),
        imap_encryption: typebox_1.Type.Optional(exports.EncryptionFormatSchema),
        smtp_host: typebox_1.Type.String(),
        smtp_port: typebox_1.Type.Number(),
        smtp_user: typebox_1.Type.String(),
    }),
    FormLogin: typebox_1.Type.Object({
        username: typebox_1.Type.String(),
        proxy: typebox_1.Type.Optional(exports.ProxyParamsSchema),
    }),
    Microsoft: typebox_1.Type.Object({
        id: typebox_1.Type.String(),
        username: typebox_1.Type.String(),
    }),
    Google: typebox_1.Type.Object({
        id: typebox_1.Type.String(),
        username: typebox_1.Type.String(),
    }),
    WhatsApp: typebox_1.Type.Object({
        phone_number: typebox_1.Type.String(),
    }),
    LinkedIn: typebox_1.Type.Object({
        id: typebox_1.Type.String(),
        username: typebox_1.Type.String(),
        premiumContractId: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
        premiumFeatures: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.Union([typebox_1.Type.Literal('recruiter'), typebox_1.Type.Literal('sales_navigator'), typebox_1.Type.Literal('premium')]))),
    }),
    Slack: typebox_1.Type.Object({
        url: typebox_1.Type.String(),
        user: typebox_1.Type.String(),
        user_id: typebox_1.Type.String(),
        team: typebox_1.Type.String(),
        team_id: typebox_1.Type.String(),
    }),
    Twitter: typebox_1.Type.Object({
        id: typebox_1.Type.String(),
        username: typebox_1.Type.String(),
    }),
    Telegram: typebox_1.Type.Object({
        user_id: typebox_1.Type.String(),
        username: typebox_1.Type.String(),
    }),
    Instagram: typebox_1.Type.Object({
        id: typebox_1.Type.String(),
        username: typebox_1.Type.String(),
    }),
    Messenger: typebox_1.Type.Object({
        id: typebox_1.Type.String(),
        username: typebox_1.Type.String(),
    }),
};
// --------------------------------------------------------------
//  MISC
// --------------------------------------------------------------
/**
 * @note Doc i18n POC.
 */
exports.AccountSourceServiceStatusSchema = typebox_1.Type.Union([
    typebox_1.Type.Literal('OK', {
        title: 'OK',
        description: i18n_fake_js_1.i18n.t('api.AccountSourceServiceStatus.OK'),
    }),
    typebox_1.Type.Literal('STOPPED', {
        title: 'STOPPED',
        description: i18n_fake_js_1.i18n.t('api.AccountSourceServiceStatus.STOPPED'),
    }),
    typebox_1.Type.Literal('ERROR', {
        title: 'ERROR',
        description: i18n_fake_js_1.i18n.t('api.AccountSourceServiceStatus.ERROR'),
    }),
    typebox_1.Type.Literal('CREDENTIALS', {
        title: 'CREDENTIALS',
        description: i18n_fake_js_1.i18n.t('api.AccountSourceServiceStatus.CREDENTIALS'),
    }),
    typebox_1.Type.Literal('PERMISSIONS', {
        title: 'PERMISSIONS',
        description: i18n_fake_js_1.i18n.t('api.AccountSourceServiceStatus.PERMISSIONS'),
    }),
    typebox_1.Type.Literal('CONNECTING', {
        title: 'CONNECTING',
        description: i18n_fake_js_1.i18n.t('api.AccountSourceServiceStatus.CONNECTING'),
    }),
], { title: 'AccountSourceServiceStatus' });
/**
 *
 */
exports.AccountSourceStatusSchema = typebox_1.Type.Union([
    typebox_1.Type.Literal('IDLE', {
        title: 'IDLE',
        description: i18n_fake_js_1.i18n.t('api.AccountSourceStatus.IDLE'),
    }),
    typebox_1.Type.Literal('NOT_SETUP', {
        title: 'NOT_SETUP',
        description: i18n_fake_js_1.i18n.t('api.AccountSourceStatus.NOT_SETUP'),
    }),
    typebox_1.Type.Literal('PAUSED', {
        title: 'PAUSED',
        description: i18n_fake_js_1.i18n.t('api.AccountSourceStatus.PAUSED'),
    }),
], { title: 'AccountSourceStatus' });
exports.AccountSignatureSchema = typebox_1.Type.Object({
    title: typebox_1.Type.String(),
    content: typebox_1.Type.String(),
});
exports.AvailableAccountProvider = (0, common_types_js_1.StringEnum)([
    'LINKEDIN',
    'WHATSAPP',
    'INSTAGRAM',
    'MESSENGER',
    'IMAP',
    'TELEGRAM',
    'GOOGLE',
    'OUTLOOK',
    'TWITTER',
    'MAIL',
]);
/**
 *
 */
exports.AccountSourceProviderSchema = typebox_1.Type.Union([
    typebox_1.Type.Literal('GOOGLE'),
    typebox_1.Type.Literal('GOOGLE_CALENDAR'),
    typebox_1.Type.Literal('ICLOUD'),
    typebox_1.Type.Literal('LINKEDIN'),
    typebox_1.Type.Literal('MAIL'),
    typebox_1.Type.Literal('MOBILE'),
    typebox_1.Type.Literal('OUTLOOK'),
    typebox_1.Type.Literal('TWITTER'),
    typebox_1.Type.Literal('WHATSAPP'),
    typebox_1.Type.Literal('SLACK'),
    typebox_1.Type.Literal('TELEGRAM'),
]);
exports.AccountSupportedProviderSchema = typebox_1.Type.Union([
    typebox_1.Type.Literal('LINKEDIN'),
    typebox_1.Type.Literal('WHATSAPP'),
    typebox_1.Type.Literal('INSTAGRAM'),
    typebox_1.Type.Literal('MESSENGER'),
    typebox_1.Type.Literal('MAIL'),
    typebox_1.Type.Literal('GOOGLE'),
    typebox_1.Type.Literal('TELEGRAM'),
    typebox_1.Type.Literal('OUTLOOK'),
    typebox_1.Type.Literal('TWITTER'),
    typebox_1.Type.Literal('MAIL'),
    typebox_1.Type.Literal('GOOGLE'),
    typebox_1.Type.Literal('OUTLOOK'),
]);
exports.MailFullFetchStarted = typebox_1.Type.Object({
    status: typebox_1.Type.Union([typebox_1.Type.Literal('DONE'), typebox_1.Type.Literal('FETCHING')]),
    /**
     * @note We want a a [number, number] tuple, but we're targeting OAS 3.0
     *       which doesn't support the tuple notation yielded by Type.Tuple.
     */
    // progress: Type.Tuple([Type.Number(), Type.Number()]),
    progress: typebox_1.Type.Array(typebox_1.Type.Number(), {
        minItems: 2,
        maxItems: 2,
    }),
});
exports.MailFullFetchPending = typebox_1.Type.Object({
    status: typebox_1.Type.Literal('IDLE'),
});
// --------------------------------------------------------------
//  VIEW ACCOUNT BASE
// --------------------------------------------------------------
exports.ViewAccountBaseSchema = typebox_1.Type.Object({
    id: common_types_js_1.UniqueIdSchema,
    name: typebox_1.Type.String(),
    created_at: date_types_js_1.UTCDateTimeMsSchema,
    current_signature: typebox_1.Type.Optional(common_types_js_1.UniqueIdSchema),
    signatures: typebox_1.Type.Optional(typebox_1.Type.Array(exports.AccountSignatureSchema)),
    groups: typebox_1.Type.Array(common_types_js_1.UniqueIdSchema),
});
const SourceStatusSchema = typebox_1.Type.Object({
    sources: typebox_1.Type.Array(typebox_1.Type.Object({
        id: typebox_1.Type.String(),
        status: exports.AccountSourceServiceStatusSchema,
    })),
});
// --------------------------------------------------------------
//  ACCOUNTS DEFINITIONS
// --------------------------------------------------------------
/**
 *
 */
exports.MobileAccountSchema = typebox_1.Type.Composite([
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal('MOBILE'),
        connection_params: typebox_1.Type.Object({
            im: exports.ConnectionParamsSchema.Sms,
            call: exports.ConnectionParamsSchema.MobileCalls,
        }),
        last_fetched_at: typebox_1.Type.Optional(date_types_js_1.UTCDateTimeMsSchema),
        sources: typebox_1.Type.Object({
            CALLS: typebox_1.Type.Object({
                status: exports.AccountSourceStatusSchema,
            }),
        }),
    }),
    exports.ViewAccountBaseSchema,
]);
exports.MobileAccountWithSourceStatusSchema = typebox_1.Type.Composite([
    typebox_1.Type.Omit(exports.MobileAccountSchema, ['sources']),
    SourceStatusSchema,
]);
/**
 *
 */
exports.MailAccountSchema = typebox_1.Type.Composite([
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal('MAIL'),
        connection_params: typebox_1.Type.Object({
            mail: exports.ConnectionParamsSchema.Imap,
        }),
        sources: typebox_1.Type.Object({
            MAILS: typebox_1.Type.Object({
                status: exports.AccountSourceStatusSchema,
            }),
        }),
    }),
    exports.ViewAccountBaseSchema,
]);
exports.MailAccountWithSourceStatusSchema = typebox_1.Type.Composite([typebox_1.Type.Omit(exports.MailAccountSchema, ['sources']), SourceStatusSchema]);
/**
 *
 */
exports.GoogleAccountSchema = typebox_1.Type.Composite([
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal('GOOGLE_OAUTH'),
        connection_params: typebox_1.Type.Object({
            mail: exports.ConnectionParamsSchema.Google,
        }),
        sources: typebox_1.Type.Object({
            MAILS: typebox_1.Type.Object({
                status: exports.AccountSourceStatusSchema,
            }),
        }),
    }),
    exports.ViewAccountBaseSchema,
]);
exports.GoogleAccountWithSourceStatusSchema = typebox_1.Type.Composite([
    typebox_1.Type.Omit(exports.GoogleAccountSchema, ['sources']),
    SourceStatusSchema,
]);
/**
 *
 */
exports.ICloudAccountSchema = typebox_1.Type.Composite([
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal('ICLOUD'),
        connection_params: typebox_1.Type.Object({
            mail: exports.ConnectionParamsSchema.Imap,
        }),
        sources: typebox_1.Type.Object({
            MAILS: typebox_1.Type.Object({
                status: exports.AccountSourceStatusSchema,
            }),
        }),
    }),
    exports.ViewAccountBaseSchema,
]);
exports.ICloudAccountWithSourceStatusSchema = typebox_1.Type.Composite([
    typebox_1.Type.Omit(exports.ICloudAccountSchema, ['sources']),
    SourceStatusSchema,
]);
/**
 *
 */
exports.OutlookAccountSchema = typebox_1.Type.Composite([
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal('OUTLOOK'),
        connection_params: typebox_1.Type.Object({
            mail: exports.ConnectionParamsSchema.Microsoft,
        }),
        sources: typebox_1.Type.Object({
            MAILS: typebox_1.Type.Object({
                status: exports.AccountSourceStatusSchema,
            }),
        }),
    }),
    exports.ViewAccountBaseSchema,
]);
exports.OutlookAccountWithSourceStatusSchema = typebox_1.Type.Composite([
    typebox_1.Type.Omit(exports.OutlookAccountSchema, ['sources']),
    SourceStatusSchema,
]);
/**
 *
 */
exports.GoogleCalendarAccountSchema = typebox_1.Type.Composite([
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal('GOOGLE_CALENDAR'),
        connection_params: typebox_1.Type.Object({
            calendar: typebox_1.Type.String(),
        }),
        sync_token: typebox_1.Type.Optional(typebox_1.Type.String()),
        sources: typebox_1.Type.Object({
            CALENDAR: typebox_1.Type.Object({
                status: exports.AccountSourceStatusSchema,
                sync_token: typebox_1.Type.Optional(typebox_1.Type.String()),
            }),
        }),
    }),
    exports.ViewAccountBaseSchema,
]);
exports.GoogleCalendarAccountWithSourceStatusSchema = typebox_1.Type.Composite([
    typebox_1.Type.Omit(exports.GoogleCalendarAccountSchema, ['sources']),
    SourceStatusSchema,
]);
/**
 *
 */
exports.WhatsAppAccountSchema = typebox_1.Type.Composite([
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal('WHATSAPP'),
        connection_params: typebox_1.Type.Object({
            im: exports.ConnectionParamsSchema.WhatsApp,
        }),
        sources: typebox_1.Type.Object({
            MESSAGING: typebox_1.Type.Object({
                status: exports.AccountSourceStatusSchema,
            }),
        }),
    }),
    exports.ViewAccountBaseSchema,
]);
exports.WhatsAppAccountWithSourceStatusSchema = typebox_1.Type.Composite([
    typebox_1.Type.Omit(exports.WhatsAppAccountSchema, ['sources']),
    SourceStatusSchema,
]);
/**
 *
 */
exports.LinkedInAccountSchema = typebox_1.Type.Composite([
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal('LINKEDIN'),
        connection_params: typebox_1.Type.Object({
            im: exports.ConnectionParamsSchema.LinkedIn,
        }),
        sources: typebox_1.Type.Object({
            MESSAGING: typebox_1.Type.Object({
                status: exports.AccountSourceStatusSchema,
            }),
        }),
    }),
    exports.ViewAccountBaseSchema,
]);
exports.LinkedInAccountWithSourceStatusSchema = typebox_1.Type.Composite([
    typebox_1.Type.Omit(exports.LinkedInAccountSchema, ['sources']),
    SourceStatusSchema,
]);
/**
 *
 */
exports.SlackAccountSchema = typebox_1.Type.Composite([
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal('SLACK'),
        connection_params: typebox_1.Type.Object({
            im: exports.ConnectionParamsSchema.Slack,
        }),
        sources: typebox_1.Type.Object({
            MESSAGING: typebox_1.Type.Object({
                status: exports.AccountSourceStatusSchema,
            }),
        }),
    }),
    exports.ViewAccountBaseSchema,
]);
exports.SlackAccountWithSourceStatusSchema = typebox_1.Type.Composite([
    typebox_1.Type.Omit(exports.SlackAccountSchema, ['sources']),
    SourceStatusSchema,
]);
/**
 *
 */
exports.TwitterAccountSchema = typebox_1.Type.Composite([
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal('TWITTER'),
        connection_params: typebox_1.Type.Object({
            im: exports.ConnectionParamsSchema.Twitter,
        }),
        sources: typebox_1.Type.Object({
            MESSAGING: typebox_1.Type.Object({
                status: exports.AccountSourceStatusSchema,
            }),
        }),
    }),
    exports.ViewAccountBaseSchema,
]);
exports.TwitterAccountWithSourceStatusSchema = typebox_1.Type.Composite([
    typebox_1.Type.Omit(exports.TwitterAccountSchema, ['sources']),
    SourceStatusSchema,
]);
/**
 *
 */
exports.ExchangeAccountSchema = typebox_1.Type.Composite([
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal('EXCHANGE'),
        connection_params: typebox_1.Type.Object({
            mail: exports.ConnectionParamsSchema.Imap,
        }),
        sources: typebox_1.Type.Object({
            MAILS: typebox_1.Type.Object({
                status: exports.AccountSourceStatusSchema,
            }),
        }),
    }),
    exports.ViewAccountBaseSchema,
]);
exports.ExchangeAccountWithSourceStatusSchema = typebox_1.Type.Composite([
    typebox_1.Type.Omit(exports.ExchangeAccountSchema, ['sources']),
    SourceStatusSchema,
]);
exports.TelegramAccountSchema = typebox_1.Type.Composite([
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal('TELEGRAM'),
        connection_params: typebox_1.Type.Object({
            im: exports.ConnectionParamsSchema.Telegram,
        }),
        sources: typebox_1.Type.Object({
            MESSAGING: typebox_1.Type.Object({
                status: exports.AccountSourceStatusSchema,
            }),
        }),
    }),
    exports.ViewAccountBaseSchema,
]);
exports.TelegramAccountWithSourceStatusSchema = typebox_1.Type.Composite([
    typebox_1.Type.Omit(exports.TelegramAccountSchema, ['sources']),
    SourceStatusSchema,
]);
exports.InstagramAccountSchema = typebox_1.Type.Composite([
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal('INSTAGRAM'),
        connection_params: typebox_1.Type.Object({
            im: exports.ConnectionParamsSchema.Instagram,
        }),
        sources: typebox_1.Type.Object({
            MESSAGING: typebox_1.Type.Object({
                status: exports.AccountSourceStatusSchema,
            }),
        }),
    }),
    exports.ViewAccountBaseSchema,
]);
exports.InstagramAccountWithSourceStatusSchema = typebox_1.Type.Composite([
    typebox_1.Type.Omit(exports.InstagramAccountSchema, ['sources']),
    SourceStatusSchema,
]);
exports.MessengerAccountSchema = typebox_1.Type.Composite([
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal('MESSENGER'),
        connection_params: typebox_1.Type.Object({
            im: exports.ConnectionParamsSchema.Messenger,
        }),
        sources: typebox_1.Type.Object({
            MESSAGING: typebox_1.Type.Object({
                status: exports.AccountSourceStatusSchema,
            }),
        }),
    }),
    exports.ViewAccountBaseSchema,
]);
exports.MessengerAccountWithSourceStatusSchema = typebox_1.Type.Composite([
    typebox_1.Type.Omit(exports.MessengerAccountSchema, ['sources']),
    SourceStatusSchema,
]);
/**
 *
 */
exports.ViewAccountSchema = typebox_1.Type.Union([
    exports.MobileAccountSchema,
    exports.MailAccountSchema,
    exports.GoogleAccountSchema,
    exports.ICloudAccountSchema,
    exports.OutlookAccountSchema,
    exports.GoogleCalendarAccountSchema,
    exports.WhatsAppAccountSchema,
    exports.LinkedInAccountSchema,
    exports.SlackAccountSchema,
    exports.TwitterAccountSchema,
    exports.ExchangeAccountSchema,
    exports.TelegramAccountSchema,
    exports.InstagramAccountSchema,
    exports.MessengerAccountSchema,
]);
exports.ViewAccountWithSourceStatusSchema = typebox_1.Type.Union([
    exports.ExchangeAccountWithSourceStatusSchema,
    exports.TwitterAccountWithSourceStatusSchema,
    exports.SlackAccountWithSourceStatusSchema,
    exports.LinkedInAccountWithSourceStatusSchema,
    exports.WhatsAppAccountWithSourceStatusSchema,
    exports.GoogleCalendarAccountWithSourceStatusSchema,
    exports.OutlookAccountWithSourceStatusSchema,
    exports.ICloudAccountWithSourceStatusSchema,
    exports.GoogleAccountWithSourceStatusSchema,
    exports.MailAccountWithSourceStatusSchema,
    exports.MobileAccountWithSourceStatusSchema,
    exports.TelegramAccountWithSourceStatusSchema,
    exports.InstagramAccountWithSourceStatusSchema,
    exports.MessengerAccountWithSourceStatusSchema,
]);
exports.MessagingAccountSupportedProviders = [
    'LINKEDIN',
    'WHATSAPP',
    'INSTAGRAM',
    'MESSENGER',
    'TELEGRAM',
    'TWITTER',
];
exports.MailingAccountSupportedProviders = ['GOOGLE', 'MAIL', 'OUTLOOK'];
exports.AllAccountSupportedProviders = [
    ...exports.MailingAccountSupportedProviders,
    ...exports.MessagingAccountSupportedProviders,
];
