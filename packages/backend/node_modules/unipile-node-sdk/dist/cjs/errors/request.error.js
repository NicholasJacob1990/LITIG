"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidInputTypeError = exports.ValidatorMissingError = exports.InvalidResponseTypeError = exports.UnsuccessfulRequestError = void 0;
const unipile_error_js_1 = require("./unipile.error.js");
class UnsuccessfulRequestError extends unipile_error_js_1.UnipileError {
    constructor(body) {
        super({ message: '', body });
    }
}
exports.UnsuccessfulRequestError = UnsuccessfulRequestError;
class InvalidResponseTypeError extends unipile_error_js_1.UnipileError {
    constructor(errorIterator, invalid_response, errorSampleLength = 1000) {
        const body = Array.from(errorIterator);
        const firstError = JSON.stringify(body[0], null, 2);
        super({
            message: `Invalid response type : the response type didn't match the one expected by the SDK.

Make sure the SDK is up to date. If the SDK is up to date and you still get the error, please contact our support.

To ignore this issue and try work with the current response 'as is' :
  - You may use the .invalid_response property of this error 
  - Or disable the optional validation altogether.

The full error list is available on the .body property of this error.
Here is the first error :

${firstError.substring(0, errorSampleLength)}${firstError.length > errorSampleLength ? '\n... (continued in .body)' : ''}`,
            body,
        });
        this.invalid_response = invalid_response;
    }
}
exports.InvalidResponseTypeError = InvalidResponseTypeError;
class ValidatorMissingError extends unipile_error_js_1.UnipileError {
    constructor() {
        super({
            message: 'Missing validator when performing validation. Please provide a validator or disable validation.',
        });
    }
}
exports.ValidatorMissingError = ValidatorMissingError;
class InvalidInputTypeError extends unipile_error_js_1.UnipileError {
    constructor(errorIterator, errorSampleLength = 1000) {
        const body = Array.from(errorIterator);
        const firstError = JSON.stringify(body[0], null, 2);
        super({
            message: `Invalid input type : the input type didn't match the one expected by the SDK.
      
The full error list is available on the .body property of this error.
Here is the first error :

${firstError.substring(0, errorSampleLength)}${firstError.length > errorSampleLength ? '\n... (continued in .body)' : ''}`,
            body,
        });
    }
}
exports.InvalidInputTypeError = InvalidInputTypeError;
