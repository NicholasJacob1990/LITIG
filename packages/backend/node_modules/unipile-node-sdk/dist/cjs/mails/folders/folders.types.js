"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FolderApiResponseValidator = exports.FolderListApiResponseValidator = exports.FolderApiResponseSchema = exports.FolderQueryValidator = exports.FolderQuerySchema = exports.FolderListQueryValidator = exports.FolderListQuerySchema = exports.FolderListApiResponseSchema = exports.FolderSchema = exports.FolderSyncErrorSchema = exports.FolderSyncingSchema = exports.FolderSyncedSchema = exports.FolderUnsyncedSchema = exports.FolderRoleSchema = void 0;
const typebox_1 = require("@sinclair/typebox");
const compiler_1 = require("@sinclair/typebox/compiler");
const common_types_js_1 = require("../../common/common.types.js");
const date_types_js_1 = require("../../common/date.types.js");
const query_parameters_type_js_1 = require("../../common/query-parameters.type.js");
/**
 *
 */
exports.FolderRoleSchema = typebox_1.Type.Union([
    typebox_1.Type.Literal("inbox"),
    typebox_1.Type.Literal("sent"),
    typebox_1.Type.Literal("archive"),
    typebox_1.Type.Literal("drafts"),
    typebox_1.Type.Literal("trash"),
    typebox_1.Type.Literal("spam"),
    typebox_1.Type.Literal("all"),
    typebox_1.Type.Literal("important"),
    typebox_1.Type.Literal("starred"),
    typebox_1.Type.Literal("unknown"),
]);
/**
 *
 */
const FolderBaseSchema = typebox_1.Type.Object({
    id: common_types_js_1.UniqueIdSchema,
    name: typebox_1.Type.String(),
    account_id: common_types_js_1.UniqueIdSchema,
    role: exports.FolderRoleSchema,
    nb_mails: typebox_1.Type.Optional(typebox_1.Type.Number()),
    provider_id: typebox_1.Type.String(),
});
/**
 *
 */
exports.FolderUnsyncedSchema = typebox_1.Type.Composite([
    typebox_1.Type.Object({
        status: typebox_1.Type.Union([typebox_1.Type.Literal("UNSYNC"), typebox_1.Type.Literal("NEVER")]),
    }),
    FolderBaseSchema,
]);
/**
 *
 */
exports.FolderSyncedSchema = typebox_1.Type.Composite([
    typebox_1.Type.Object({
        status: typebox_1.Type.Literal("SYNC"),
        last_synced: date_types_js_1.UTCDateTimeMsSchema,
    }),
    FolderBaseSchema,
]);
/**
 *
 */
exports.FolderSyncingSchema = typebox_1.Type.Composite([
    typebox_1.Type.Object({
        status: typebox_1.Type.Literal("FETCHING"),
        offset: typebox_1.Type.Number(),
    }),
    FolderBaseSchema,
]);
/**
 *
 */
exports.FolderSyncErrorSchema = typebox_1.Type.Composite([
    typebox_1.Type.Object({
        status: typebox_1.Type.Literal("ERROR"),
        offset: typebox_1.Type.Number(),
        error: typebox_1.Type.String(),
        attempts: typebox_1.Type.Number(),
    }),
    FolderBaseSchema,
]);
/**
 *
 */
exports.FolderSchema = typebox_1.Type.Union([
    exports.FolderUnsyncedSchema,
    exports.FolderSyncedSchema,
    exports.FolderSyncingSchema,
    exports.FolderSyncErrorSchema,
]);
//------------------------------------------------------------------------------
/**
 *
 */
exports.FolderListApiResponseSchema = typebox_1.Type.Object({
    object: typebox_1.Type.Literal("FolderList"),
    items: typebox_1.Type.Array(typebox_1.Type.Intersect([
        typebox_1.Type.Object({ object: typebox_1.Type.Literal("Folder") }),
        FolderBaseSchema,
    ])),
}, { description: "@todo List of Folders." });
//------------------------------------------------------------------------------
/**
 *
 */
exports.FolderListQuerySchema = typebox_1.Type.Object({
    account_id: typebox_1.Type.Optional(typebox_1.Type.String()),
});
// /**
//  *
//  */
// export const getFolderListQueryOpenApiSchema = makeOpenApiSchemaGetter(
//   FolderListQuerySchema
// );
/**
 *
 */
exports.FolderListQueryValidator = compiler_1.TypeCompiler.Compile(exports.FolderListQuerySchema);
/**
 *
 */
const FolderOptionsQuerySchema = typebox_1.Type.Object({
    account_id: typebox_1.Type.Optional(query_parameters_type_js_1.AccountIdParamSchema),
});
/**
 *
 */
exports.FolderQuerySchema = FolderOptionsQuerySchema;
/**
 *
 */
exports.FolderQueryValidator = compiler_1.TypeCompiler.Compile(exports.FolderQuerySchema);
//------------------------------------------------------------------------------
// /**
//  *
//  */
// export const FolderSyncApiResponseSchema = Type.Composite([
//   Type.Object({
//     object: Type.Literal("Folder"),
//   }),
//   FolderSyncedSchema || FolderSyncErrorSchema,
// ]);
/**
 *
 */
exports.FolderApiResponseSchema = typebox_1.Type.Intersect([
    typebox_1.Type.Object({
        object: typebox_1.Type.Literal("Folder"),
    }),
    FolderBaseSchema,
]);
/**  */
exports.FolderListApiResponseValidator = compiler_1.TypeCompiler.Compile(exports.FolderListApiResponseSchema);
/**  */
exports.FolderApiResponseValidator = compiler_1.TypeCompiler.Compile(exports.FolderApiResponseSchema);
