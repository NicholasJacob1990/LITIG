"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatStartedApiResponseValidator = exports.ChatStartedApiResponseSchema = exports.ChatStartBodyValidator = exports.ChatStartBodySchema = exports.ChatStartLinkedinRecruiterExtrasSchema = exports.ChatStartLinkedinClassicExtrasSchema = exports.ChatStartLinkedinSalesExtrasSchema = void 0;
const typebox_1 = require("@sinclair/typebox");
const compiler_1 = require("@sinclair/typebox/compiler");
const query_parameters_type_js_1 = require("../../common/query-parameters.type.js");
// --------------------------------------------------------------------------
// REQUEST
// --------------------------------------------------------------------------
/**
 *
 */
exports.ChatStartLinkedinSalesExtrasSchema = typebox_1.Type.Object({
    api: typebox_1.Type.Literal("sales_navigator", {
        description: "The Linkedin API that should be used to start chatting (relative features must be subscribed).",
    }),
}, { description: "Sales Navigator Linkedin fields" });
/**
 *
 */
exports.ChatStartLinkedinClassicExtrasSchema = typebox_1.Type.Object({
    api: typebox_1.Type.Optional(typebox_1.Type.Literal("classic", {
        description: "The Linkedin API that should be used to start chatting (relative feature must be subscribed). Default is classic.",
    })),
    inmail: typebox_1.Type.Optional(typebox_1.Type.Boolean({
        description: "If set to true, start the new conversation with an inMail.",
    })),
}, { description: "Standard Linkedin fields" });
/**
 *
 */
exports.ChatStartLinkedinRecruiterExtrasSchema = typebox_1.Type.Object({
    api: typebox_1.Type.Literal("recruiter", {
        description: "The Linkedin API that should be used to start chatting (relative feature must be subscribed).",
    }),
    signature: typebox_1.Type.Optional(typebox_1.Type.String({
        description: "The signature of the sender",
    })),
    hiring_project_id: typebox_1.Type.Optional(typebox_1.Type.String({
        description: "The ID of the project the chat should be started in",
    })),
    email_address: typebox_1.Type.Optional(typebox_1.Type.String({
        description: "The email address of the recipient in case the chat should be started with email instead of inMail",
    })),
}, { description: "Recruiter Linkedin fields" });
/**
 *
 */
exports.ChatStartBodySchema = typebox_1.Type.Object({
    account_id: query_parameters_type_js_1.AccountIdParamSchema,
    text: typebox_1.Type.Optional(typebox_1.Type.String({
        description: "The message that will start the new conversation.",
    })),
    attachments: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.String({ format: "binary" }))),
    voice_message: typebox_1.Type.Optional(typebox_1.Type.String({
        format: "binary",
        description: "For Linkedin messaging only.",
    })),
    attendees_ids: typebox_1.Type.Array(typebox_1.Type.String(), {
        description: "One or more attendee providerâ€™id.",
        minItems: 1,
    }),
    subject: typebox_1.Type.Optional(typebox_1.Type.String({
        description: "An optional field to set the subject of the conversation.",
    })),
    linkedin: typebox_1.Type.Optional(typebox_1.Type.Union([
        exports.ChatStartLinkedinClassicExtrasSchema,
        exports.ChatStartLinkedinRecruiterExtrasSchema,
        exports.ChatStartLinkedinSalesExtrasSchema,
    ], {
        description: "Extra fields for Linkedin products",
    })),
});
// /**
//  *
//  */
// export const getChatStartBodyOpenApiSchema =
//   makeOpenApiSchemaGetter(ChatStartBodySchema);
/**
 *
 */
exports.ChatStartBodyValidator = compiler_1.TypeCompiler.Compile(exports.ChatStartBodySchema);
// --------------------------------------------------------------------------
// RESPONSE
// --------------------------------------------------------------------------
exports.ChatStartedApiResponseSchema = typebox_1.Type.Object({
    object: typebox_1.Type.Literal("ChatStarted"),
    chat_id: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()], {
        description: "The Unipile ID of the newly started chat.",
    }),
    message_id: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()], {
        description: "The Unipile ID of the message the chat started with.",
    }),
});
// /**
//  *
//  */
// export const getChatStartedResponseOpenApiSchema = makeOpenApiSchemaGetter(
//   ChatStartedApiResponseSchema
// );
/**  */
exports.ChatStartedApiResponseValidator = compiler_1.TypeCompiler.Compile(exports.ChatStartedApiResponseSchema);
