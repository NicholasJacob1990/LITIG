"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatSchema = exports.ChatFolderSchema = exports.ChatFeaturesSchema = exports.ChatTypeSchema = void 0;
const typebox_1 = require("@sinclair/typebox");
const common_types_js_1 = require("../../common/common.types.js");
const messaging_types_js_1 = require("../messaging.types.js");
exports.ChatTypeSchema = typebox_1.Type.Enum({ SINGLE: 0, GROUP: 1, CHANNEL: 2 });
exports.ChatFeaturesSchema = typebox_1.Type.Union([
    typebox_1.Type.Literal("reactions"),
    typebox_1.Type.Literal("reply"),
]);
exports.ChatFolderSchema = typebox_1.Type.Union([
    typebox_1.Type.Literal("INBOX"),
    typebox_1.Type.Literal("INBOX_LINKEDIN_CLASSIC"),
    typebox_1.Type.Literal("INBOX_LINKEDIN_RECRUITER"),
    typebox_1.Type.Literal("INBOX_LINKEDIN_SALES_NAVIGATOR"),
    typebox_1.Type.Literal("INBOX_LINKEDIN_ORGANIZATION"),
]);
/**
 * @todo Review that ChatSchema matches Chat definition from libs/core/src/Messaging/domain/Chat.ts
 *       It doesn't seem to handle the discriminated union around account_type
 *       in the same way.
 */
exports.ChatSchema = typebox_1.Type.Object({
    id: common_types_js_1.UniqueIdSchema,
    account_id: common_types_js_1.UniqueIdSchema,
    account_type: messaging_types_js_1.MessagingAccountTypeSchema,
    provider_id: typebox_1.Type.String(),
    attendee_provider_id: typebox_1.Type.Optional(typebox_1.Type.String()),
    name: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
    type: exports.ChatTypeSchema,
    timestamp: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
    unread_count: typebox_1.Type.Number(),
    archived: typebox_1.Type.Union([typebox_1.Type.Literal(0), typebox_1.Type.Literal(1)]),
    muted_until: typebox_1.Type.Union([typebox_1.Type.Literal(-1), typebox_1.Type.String(), typebox_1.Type.Null()]),
    read_only: typebox_1.Type.Union([typebox_1.Type.Literal(0), typebox_1.Type.Literal(1), typebox_1.Type.Literal(2)]),
    disabledFeatures: typebox_1.Type.Optional(typebox_1.Type.Array(exports.ChatFeaturesSchema)),
    subject: typebox_1.Type.Optional(typebox_1.Type.String()),
    organization_id: typebox_1.Type.Optional(typebox_1.Type.String({
        description: "Linkedin specific ID for organization mailboxes.",
    })),
    mailbox_id: typebox_1.Type.Optional(typebox_1.Type.String({
        description: "Linkedin specific ID for organization mailboxes.",
    })),
    content_type: typebox_1.Type.Optional(typebox_1.Type.Union([
        typebox_1.Type.Literal("inmail"),
        typebox_1.Type.Literal("sponsored"),
        typebox_1.Type.Literal("linkedin_offer"),
    ])),
    //   lastMessage: Type.Union([MessageSchema, Type.Null()]), // This doesn't appear on Chat, only on ChatandMessage.
    folder: typebox_1.Type.Optional(typebox_1.Type.Array(exports.ChatFolderSchema)),
});
