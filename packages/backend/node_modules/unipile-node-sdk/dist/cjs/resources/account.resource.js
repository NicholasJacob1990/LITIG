"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountResource = void 0;
const qrcode_1 = __importDefault(require("qrcode"));
const index_js_1 = require("../index.js");
const accounts_list_schema_js_1 = require("../accounts/accounts-list.schema.js");
const account_types_js_1 = require("../accounts/account.types.js");
const accounts_create_types_js_1 = require("../accounts/accounts-create.types.js");
const accounts_reconnect_types_js_1 = require("../accounts/accounts-reconnect.types.js");
const accounts_delete_types_js_1 = require("../accounts/accounts-delete.types.js");
const hosted_auth_link_types_js_1 = require("../hosted/hosted-auth-link.types.js");
const common_types_js_1 = require("../common/common.types.js");
const accounts_resync_types_js_1 = require("../accounts/accounts-resync.types.js");
class AccountResource {
    constructor(client) {
        this.client = client;
    }
    getAll(input = {}, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { limit, cursor } = input;
            const parameters = Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params);
            // console.log('getAll', options, parameters);
            if (limit)
                parameters.limit = String(limit);
            if (cursor)
                parameters.cursor = cursor;
            return yield this.client.request.send({
                path: ['accounts'],
                method: 'GET',
                options,
                parameters,
                validator: accounts_list_schema_js_1.AccountListResponseValidator,
            });
        });
    }
    getOne(account_id, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.request.send(Object.assign(Object.assign({ path: ['accounts', account_id], method: 'GET', options }, ((options === null || options === void 0 ? void 0 : options.extra_params) && { parameters: options.extra_params })), { validator: account_types_js_1.AccountApiResponseValidator }));
        });
    }
    connect(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.request.send({
                path: ['accounts'],
                method: 'POST',
                body: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), input),
                headers: {
                    'Content-Type': 'application/json',
                },
                options,
                validator: accounts_create_types_js_1.AccountConnectApiResponseValidator,
            });
        });
    }
    reconnect(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.request.send({
                path: ['accounts', input.account_id],
                method: 'POST',
                body: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), input),
                headers: {
                    'Content-Type': 'application/json',
                },
                options,
                validator: accounts_reconnect_types_js_1.AccountReconnectApiResponseValidator,
            });
        });
    }
    connectWhatsapp(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.client.request.send({
                path: ['accounts'],
                method: 'POST',
                body: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), { provider: 'WHATSAPP' }),
                headers: {
                    'Content-Type': 'application/json',
                },
                options,
                validator: index_js_1.postQrCodeBasedAccountValidator,
            });
            return {
                qrCodeString: yield qrcode_1.default.toString(response.checkpoint.qrcode),
                code: response.checkpoint.qrcode,
                account_id: response.account_id,
            };
        });
    }
    reconnectWhatsapp(account_id, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!common_types_js_1.UniqueIdValidator.Check(account_id)) {
                throw new index_js_1.InvalidInputTypeError(common_types_js_1.UniqueIdValidator.Errors(account_id));
            }
            const response = yield this.client.request.send({
                path: ['accounts', account_id],
                method: 'POST',
                body: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), { provider: 'WHATSAPP' }),
                headers: {
                    'Content-Type': 'application/json',
                },
                options,
                validator: index_js_1.postQrCodeBasedAccountValidator,
            });
            return {
                qrCodeString: yield qrcode_1.default.toString(response.checkpoint.qrcode),
                code: response.checkpoint.qrcode,
                account_id: response.account_id,
            };
        });
    }
    connectTelegram(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.client.request.send({
                path: ['accounts'],
                method: 'POST',
                body: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), { provider: 'TELEGRAM' }),
                headers: {
                    'Content-Type': 'application/json',
                },
                options,
                validator: index_js_1.postQrCodeBasedAccountValidator,
            });
            return {
                qrCodeString: yield qrcode_1.default.toString(response.checkpoint.qrcode),
                code: response.checkpoint.qrcode,
                account_id: response.account_id,
            };
        });
    }
    reconnectTelegram(account_id, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!common_types_js_1.UniqueIdValidator.Check(account_id)) {
                throw new index_js_1.InvalidInputTypeError(common_types_js_1.UniqueIdValidator.Errors(account_id));
            }
            const response = yield this.client.request.send({
                path: ['accounts', account_id],
                method: 'POST',
                body: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), { provider: 'TELEGRAM' }),
                headers: {
                    'Content-Type': 'application/json',
                },
                options,
                validator: index_js_1.postQrCodeBasedAccountValidator,
            });
            return {
                qrCodeString: yield qrcode_1.default.toString(response.checkpoint.qrcode),
                code: response.checkpoint.qrcode,
                account_id: response.account_id,
            };
        });
    }
    connectLinkedin(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.request.send({
                path: ['accounts'],
                method: 'POST',
                body: Object.assign(Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), input), { provider: 'LINKEDIN' }),
                headers: {
                    'Content-Type': 'application/json',
                },
                options,
                validator: accounts_create_types_js_1.AccountConnectApiResponseValidator,
            });
        });
    }
    connectLinkedinWithCookie(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.request.send({
                path: ['accounts'],
                method: 'POST',
                body: Object.assign(Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), input), { provider: 'LINKEDIN' }),
                headers: {
                    'Content-Type': 'application/json',
                },
                options,
                validator: accounts_create_types_js_1.AccountConnectApiResponseValidator,
            });
        });
    }
    reconnectLinkedin(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.request.send({
                path: ['accounts', input.account_id],
                method: 'POST',
                body: Object.assign(Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), input), { provider: 'LINKEDIN' }),
                headers: {
                    'Content-Type': 'application/json',
                },
                options,
                validator: accounts_reconnect_types_js_1.AccountReconnectApiResponseValidator,
            });
        });
    }
    reconnectLinkedinWithCookie(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.request.send({
                path: ['accounts', input.account_id],
                method: 'POST',
                body: Object.assign(Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), input), { provider: 'LINKEDIN' }),
                headers: {
                    'Content-Type': 'application/json',
                },
                options,
                validator: accounts_reconnect_types_js_1.AccountReconnectApiResponseValidator,
            });
        });
    }
    connectInstagram(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.request.send({
                path: ['accounts'],
                method: 'POST',
                body: Object.assign(Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), input), { provider: 'INSTAGRAM' }),
                headers: {
                    'Content-Type': 'application/json',
                },
                options,
                validator: accounts_create_types_js_1.AccountConnectApiResponseValidator,
            });
        });
    }
    reconnectInstagram(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.request.send({
                path: ['accounts', input.account_id],
                method: 'POST',
                body: Object.assign(Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), input), { provider: 'INSTAGRAM' }),
                headers: {
                    'Content-Type': 'application/json',
                },
                options,
                validator: accounts_reconnect_types_js_1.AccountReconnectApiResponseValidator,
            });
        });
    }
    connectTwitter(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.request.send({
                path: ['accounts'],
                method: 'POST',
                body: Object.assign(Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), input), { provider: 'TWITTER' }),
                headers: {
                    'Content-Type': 'application/json',
                },
                options,
                validator: accounts_create_types_js_1.AccountConnectApiResponseValidator,
            });
        });
    }
    reconnectTwitter(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.request.send({
                path: ['accounts', input.account_id],
                method: 'POST',
                body: Object.assign(Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), input), { provider: 'TWITTER' }),
                headers: {
                    'Content-Type': 'application/json',
                },
                options,
                validator: accounts_reconnect_types_js_1.AccountReconnectApiResponseValidator,
            });
        });
    }
    connectMessenger(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.request.send({
                path: ['accounts'],
                method: 'POST',
                body: Object.assign(Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), input), { provider: 'MESSENGER' }),
                headers: {
                    'Content-Type': 'application/json',
                },
                options,
                validator: accounts_create_types_js_1.AccountConnectApiResponseValidator,
            });
        });
    }
    reconnectMessenger(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.request.send({
                path: ['accounts', input.account_id],
                method: 'POST',
                body: Object.assign(Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), input), { provider: 'MESSENGER' }),
                headers: {
                    'Content-Type': 'application/json',
                },
                options,
                validator: accounts_reconnect_types_js_1.AccountReconnectApiResponseValidator,
            });
        });
    }
    delete(account_id, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.request.send(Object.assign(Object.assign({ path: ['accounts', account_id], method: 'DELETE', options }, ((options === null || options === void 0 ? void 0 : options.extra_params) && { parameters: options.extra_params })), { validator: accounts_delete_types_js_1.AccountDeletedApiResponseValidator }));
        });
    }
    solveCodeCheckpoint(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.request.send({
                path: ['accounts', 'checkpoint'],
                method: 'POST',
                body: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), input),
                headers: {
                    'Content-Type': 'application/json',
                },
                options,
                validator: accounts_reconnect_types_js_1.AccountSolveCheckpointApiResponseValidator,
            });
        });
    }
    createHostedAuthLink(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.request.send({
                path: ['hosted', 'accounts', 'link'],
                method: 'POST',
                body: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), input),
                headers: {
                    'Content-Type': 'application/json',
                },
                options,
                validator: hosted_auth_link_types_js_1.HostedAuthLinkResponseValidator,
            });
        });
    }
    resyncLinkedinAccount(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { before, after, linkedin_product, account_id } = input;
            if (!common_types_js_1.UniqueIdValidator.Check(account_id)) {
                throw new index_js_1.InvalidInputTypeError(common_types_js_1.UniqueIdValidator.Errors(account_id));
            }
            const parameters = Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params);
            if (linkedin_product) {
                parameters.linkedin_product = linkedin_product;
            }
            if (before) {
                parameters.before = before + '';
            }
            if (after) {
                parameters.after = after + '';
            }
            return yield this.client.request.send({
                path: ['accounts', account_id, 'sync'],
                method: 'GET',
                parameters,
                options,
                validator: accounts_resync_types_js_1.AccountResyncResponseValidator,
            });
        });
    }
}
exports.AccountResource = AccountResource;
