"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailResource = void 0;
const index_js_1 = require("../index.js");
const folders_types_js_1 = require("../mails/folders/folders.types.js");
const mail_delete_types_js_1 = require("../mails/mail.delete.types.js");
const mail_send_types_js_1 = require("../mails/mail.send.types.js");
const mail_types_js_1 = require("../mails/mail.types.js");
const mail_update_types_js_1 = require("../mails/mail.update.types.js");
const mails_list_types_js_1 = require("../mails/mails-list.types.js");
class EmailResource {
    constructor(client) {
        this.client = client;
        this.getOne = this._getOne.bind(this);
        this.getOne.byId = this._getOne.bind(this);
        this.getOne.byProviderId = this._getOneByProviderId.bind(this);
        this.delete = this._delete.bind(this);
        this.delete.byId = this._delete.bind(this);
        this.delete.byProviderId = this._deleteByProviderId.bind(this);
        this.update = this._update.bind(this);
        this.update.byId = this._update.bind(this);
        this.update.byProviderId = this._updateByProviderId.bind(this);
        this.getOneFolder = this._getOneFolder.bind(this);
        this.getOneFolder.byId = this._getOneFolder.bind(this);
        this.getOneFolder.byProviderId = this._getOneFolderByProviderId.bind(this);
        this.getEmailAttachment = this._getEmailAttachment.bind(this);
        this.getEmailAttachment.byId = this._getEmailAttachment.bind(this);
        this.getEmailAttachment.byProviderId = this._getEmailAttachmentByProviderId.bind(this);
    }
    getAll(input = {}, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { account_id, role, folder, from, to, any_email, before, after, limit, cursor } = input;
            const parameters = Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params);
            if (account_id)
                parameters.account_id = account_id;
            if (role)
                parameters.role = role;
            if (folder)
                parameters.folder = folder;
            if (from)
                parameters.from = from;
            if (to)
                parameters.to = to;
            if (any_email)
                parameters.any_email = any_email;
            if (before)
                parameters.before = before;
            if (after)
                parameters.after = after;
            if (limit)
                parameters.limit = String(limit);
            if (cursor)
                parameters.cursor = cursor;
            return yield this.client.request.send({
                path: ['emails'],
                method: 'GET',
                options,
                parameters,
                validator: mails_list_types_js_1.MailListApiResponseValidator,
            });
        });
    }
    _getOne(email_id, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.request.send(Object.assign(Object.assign({ path: ['emails', email_id], method: 'GET', options }, ((options === null || options === void 0 ? void 0 : options.extra_params) && { parameters: options.extra_params })), { validator: mail_types_js_1.MailApiResponseValidator }));
        });
    }
    _getOneByProviderId(email_provider_id, account_id, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.request.send({
                path: ['emails', email_provider_id],
                method: 'GET',
                options,
                parameters: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), { account_id }),
                validator: mail_types_js_1.MailApiResponseValidator,
            });
        });
    }
    _delete(email_id, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.request.send(Object.assign(Object.assign({ path: ['emails', email_id], method: 'DELETE', options }, ((options === null || options === void 0 ? void 0 : options.extra_params) && { parameters: options.extra_params })), { validator: mail_delete_types_js_1.MailDeletedApiResponseValidator }));
        });
    }
    _deleteByProviderId(email_provider_id, account_id, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.request.send({
                path: ['emails', email_provider_id],
                method: 'DELETE',
                options,
                parameters: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), { account_id }),
                validator: mail_delete_types_js_1.MailDeletedApiResponseValidator,
            });
        });
    }
    _update(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { email_id, folders, unread } = input;
            const body = {};
            if (folders)
                body.folders = folders;
            if (unread !== undefined)
                body.unread = unread;
            return yield this.client.request.send({
                path: ['emails', email_id],
                method: 'PUT',
                body: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), body),
                options,
                validator: mail_update_types_js_1.MailUpdatedApiResponseValidator,
            });
        });
    }
    _updateByProviderId(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { email_provider_id, account_id, folders, unread } = input;
            const body = {};
            if (folders)
                body.folders = folders;
            if (unread !== undefined)
                body.unread = unread;
            return yield this.client.request.send({
                path: ['emails', email_provider_id],
                method: 'PUT',
                body: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), body),
                options,
                parameters: { account_id },
                validator: mail_update_types_js_1.MailUpdatedApiResponseValidator,
            });
        });
    }
    getAllFolders(input = {}, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { account_id } = input;
            const parameters = Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params);
            if (account_id)
                parameters.account_id = account_id;
            return yield this.client.request.send({
                path: ['folders'],
                method: 'GET',
                options,
                parameters,
                validator: folders_types_js_1.FolderListApiResponseValidator,
            });
        });
    }
    _getOneFolder(folder_id, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.request.send(Object.assign(Object.assign({ path: ['folders', folder_id], method: 'GET', options }, ((options === null || options === void 0 ? void 0 : options.extra_params) && { parameters: options.extra_params })), { validator: folders_types_js_1.FolderApiResponseValidator }));
        });
    }
    _getOneFolderByProviderId(folder_provider_id, account_id, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.request.send({
                path: ['folders', folder_provider_id],
                method: 'GET',
                options,
                parameters: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), { account_id }),
                validator: folders_types_js_1.FolderApiResponseValidator,
            });
        });
    }
    send(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { account_id, to, cc, bcc, subject, draft_id, body, attachments, from, custom_headers, tracking_options, reply_to } = input;
            const formDataBody = new FormData();
            formDataBody.append('body', body);
            formDataBody.append('account_id', account_id);
            if (draft_id)
                formDataBody.append('draft_id', draft_id);
            if (subject)
                formDataBody.append('subject', subject);
            if (attachments !== undefined) {
                for (const [filename, buffer] of attachments) {
                    formDataBody.append('attachments', new Blob([buffer]), filename);
                }
            }
            formDataBody.append('to', JSON.stringify(to));
            if (cc !== undefined) {
                formDataBody.append('cc', JSON.stringify(cc));
            }
            if (bcc !== undefined) {
                formDataBody.append('bcc', JSON.stringify(bcc));
            }
            if (from !== undefined) {
                formDataBody.append('from', JSON.stringify(from));
            }
            if (custom_headers !== undefined) {
                formDataBody.append('custom_headers', JSON.stringify(custom_headers));
            }
            if (tracking_options !== undefined) {
                formDataBody.append('tracking_options', JSON.stringify(tracking_options));
            }
            if (reply_to !== undefined) {
                formDataBody.append('reply_to', reply_to);
            }
            if (options === null || options === void 0 ? void 0 : options.extra_params) {
                Object.entries(options.extra_params).forEach(([k, v]) => {
                    if (!formDataBody.has(k)) {
                        formDataBody.append(k, v);
                    }
                });
            }
            return yield this.client.request.send({
                path: ['emails'],
                method: 'POST',
                body: formDataBody,
                headers: {},
                options,
                validator: mail_send_types_js_1.MailSentApiResponseValidator,
            });
        });
    }
    _getEmailAttachment(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { email_id, attachment_id } = input;
            return yield this.client.request.send(Object.assign(Object.assign({ path: ['emails', email_id, 'attachments', attachment_id], method: 'GET', options }, ((options === null || options === void 0 ? void 0 : options.extra_params) && { parameters: options.extra_params })), { validator: index_js_1.untypedYetValidator }));
        });
    }
    _getEmailAttachmentByProviderId(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { email_provider_id, attachment_id, account_id } = input;
            return yield this.client.request.send({
                path: ['emails', email_provider_id, 'attachments', attachment_id],
                method: 'GET',
                options,
                parameters: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), { account_id }),
                validator: index_js_1.untypedYetValidator,
            });
        });
    }
}
exports.EmailResource = EmailResource;
