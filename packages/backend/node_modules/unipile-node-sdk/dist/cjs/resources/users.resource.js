"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsersResource = void 0;
const company_js_1 = require("../linkedin/company.js");
const comment_list_types_js_1 = require("../posts/comment-list.types.js");
const comment_send_types_js_1 = require("../posts/comment-send.types.js");
const post_create_types_js_1 = require("../posts/post-create.types.js");
const account_owner_profile_js_1 = require("../users/account-owner-profile.js");
const post_types_js_1 = require("../users/post.types.js");
const reaction_add_types_js_1 = require("../users/reaction-add.types.js");
const user_invitation_cancel_types_js_1 = require("../users/user-invitation-cancel.types.js");
const user_invitation_sent_list_types_js_1 = require("../users/user-invitation-sent-list.types.js");
const user_invite_types_js_1 = require("../users/user-invite.types.js");
const user_post_list_types_js_1 = require("../users/user-post-list.types.js");
const user_profile_types_js_1 = require("../users/user-profile.types.js");
const user_relations_list_types_js_1 = require("../users/user-relations-list.types.js");
class UsersResource {
    constructor(client) {
        this.client = client;
    }
    getProfile(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { identifier, account_id, linkedin_api, linkedin_sections } = input;
            const parameters = Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params);
            parameters.account_id = account_id;
            if (linkedin_api)
                parameters.linkedin_api = linkedin_api;
            if (linkedin_sections)
                parameters.linkedin_sections = typeof linkedin_sections === 'string' ? linkedin_sections : linkedin_sections.join(',');
            return yield this.client.request.send({
                path: ['users', identifier],
                method: 'GET',
                options,
                parameters,
                validator: user_profile_types_js_1.UserProfileApiResponseValidator,
            });
        });
    }
    getOwnProfile(account_id, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.request.send({
                path: ['users', 'me'],
                method: 'GET',
                options,
                parameters: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), { account_id }),
                validator: account_owner_profile_js_1.AccountOwnerProfileApiResponseValidator,
            });
        });
    }
    getAllRelations(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { account_id, limit, cursor } = input;
            const parameters = Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params);
            parameters.account_id = account_id;
            if (limit !== undefined && limit > 0)
                parameters.limit = String(limit);
            if (cursor)
                parameters.cursor = cursor;
            return yield this.client.request.send({
                path: ['users', 'relations'],
                method: 'GET',
                options,
                parameters,
                validator: user_relations_list_types_js_1.UserRelationsListApiResponseValidator,
            });
        });
    }
    sendInvitation(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.request.send({
                path: ['users', 'invite'],
                method: 'POST',
                body: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), input),
                headers: {
                    'Content-Type': 'application/json',
                },
                options,
                validator: user_invite_types_js_1.UserInviteApiResponseValidator,
            });
        });
    }
    getAllPosts(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { identifier, account_id, limit, is_company, cursor } = input;
            const parameters = Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params);
            parameters.account_id = account_id;
            if (is_company !== undefined)
                parameters.is_company = is_company ? 'true' : 'false';
            if (limit)
                parameters.limit = String(limit);
            if (cursor)
                parameters.cursor = cursor;
            return yield this.client.request.send({
                path: ['users', identifier, 'posts'],
                method: 'GET',
                parameters,
                options,
                validator: user_post_list_types_js_1.UserPostListApiResponseValidator,
            });
        });
    }
    getPost(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { account_id, post_id } = input;
            return yield this.client.request.send({
                path: ['posts', post_id],
                method: 'GET',
                parameters: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), { account_id }),
                options,
                validator: post_types_js_1.UserPostApiResponseValidator,
            });
        });
    }
    getAllPostComments(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { account_id, post_id, limit, cursor } = input;
            const parameters = Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params);
            parameters.account_id = account_id;
            if (limit !== undefined && limit > 0)
                parameters.limit = String(limit);
            if (cursor)
                parameters.cursor = cursor;
            return yield this.client.request.send({
                path: ['posts', post_id, 'comments'],
                method: 'GET',
                parameters,
                options,
                validator: comment_list_types_js_1.PostCommentListApiResponseValidator,
            });
        });
    }
    createPost(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { account_id, text, attachments } = input;
            const body = new FormData();
            body.append('text', text);
            if (account_id)
                body.append('account_id', account_id);
            if (attachments !== undefined) {
                for (const [filename, buffer] of attachments) {
                    body.append('attachments', new Blob([buffer]), filename);
                }
            }
            if (options === null || options === void 0 ? void 0 : options.extra_params) {
                Object.entries(options.extra_params).forEach(([k, v]) => {
                    if (!body.has(k)) {
                        body.append(k, v);
                    }
                });
            }
            return yield this.client.request.send({
                path: ['posts'],
                method: 'POST',
                body,
                headers: {},
                options,
                validator: post_create_types_js_1.CreatePostResponseValidator,
            });
        });
    }
    sendPostComment(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { account_id, post_id, text } = input;
            return yield this.client.request.send({
                path: ['posts', post_id, 'comments'],
                method: 'POST',
                body: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), { account_id,
                    text }),
                headers: {
                    'Content-Type': 'application/json',
                },
                options,
                validator: comment_send_types_js_1.CommentPostResponseValidator,
            });
        });
    }
    sendPostReaction(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.request.send({
                path: ['posts', 'reaction'],
                method: 'POST',
                body: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), input),
                headers: {
                    'Content-Type': 'application/json',
                },
                options,
                validator: reaction_add_types_js_1.AddPostReactionResponseValidator,
            });
        });
    }
    getAllInvitationsSent(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { account_id, limit, cursor } = input;
            const parameters = Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params);
            parameters.account_id = account_id;
            if (limit !== undefined && limit > 0)
                parameters.limit = String(limit);
            if (cursor)
                parameters.cursor = cursor;
            return yield this.client.request.send({
                path: ['users', 'invite', 'sent'],
                method: 'GET',
                parameters,
                options,
                validator: user_invitation_sent_list_types_js_1.UserInvitationSentListApiResponseValidator,
            });
        });
    }
    cancelInvitationSent(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { account_id, invitation_id } = input;
            return yield this.client.request.send({
                path: ['users', 'invite', 'sent', invitation_id],
                method: 'DELETE',
                parameters: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), { account_id }),
                options,
                validator: user_invitation_cancel_types_js_1.CancelUserInvitationApiResponseValidator,
            });
        });
    }
    getCompanyProfile(input, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { account_id, identifier } = input;
            return yield this.client.request.send({
                path: ['linkedin', 'company', identifier],
                method: 'GET',
                parameters: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.extra_params), { account_id }),
                options,
                validator: company_js_1.LinkedinCompanyProfileApiResponseValidator,
            });
        });
    }
}
exports.UsersResource = UsersResource;
