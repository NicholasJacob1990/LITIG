"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvitationSchema = exports.PostSchema = exports.LinkedinPostSchema = exports.LinkedinAccountOwnerProfileSchema = exports.LinkedinUserRelationSchema = exports.ImapUserProfileSchema = exports.OutlookUserProfileSchema = exports.GmailUserProfileSchema = exports.GmailAliasSchema = exports.TwitterUserProfileSchema = exports.TelegramUserProfileSchema = exports.InstagramUserProfileSchema = exports.WhatsappUserProfileSchema = exports.LinkedinUserProfileSchema = void 0;
const typebox_1 = require("@sinclair/typebox");
const common_types_js_1 = require("../common/common.types.js");
const ressource_types_js_1 = require("../messaging/messages/ressource.types.js");
/**
 *
 */
exports.LinkedinUserProfileSchema = typebox_1.Type.Object({
    provider: typebox_1.Type.Literal("LINKEDIN"),
    provider_id: typebox_1.Type.String(),
    public_identifier: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
    first_name: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
    last_name: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
    headline: typebox_1.Type.String(),
    summary: typebox_1.Type.Optional(typebox_1.Type.String()),
    contact_info: typebox_1.Type.Optional(typebox_1.Type.Object({
        emails: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.String())),
        phones: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.String())),
        adresses: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.String())),
        socials: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.Object({ type: typebox_1.Type.String(), name: typebox_1.Type.String() }))),
    })),
    birthdate: typebox_1.Type.Optional(typebox_1.Type.Object({
        month: typebox_1.Type.Number(),
        day: typebox_1.Type.Number(),
    })),
    primary_locale: typebox_1.Type.Optional(typebox_1.Type.Object({
        country: typebox_1.Type.String(),
        language: typebox_1.Type.String(),
    })),
    location: typebox_1.Type.Optional(typebox_1.Type.String()),
    websites: typebox_1.Type.Array(typebox_1.Type.String()),
    profile_picture_url: typebox_1.Type.Optional(typebox_1.Type.String()),
    background_picture_url: typebox_1.Type.Optional(typebox_1.Type.String()),
    hashtags: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.String())),
    can_send_inmail: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
    is_open_profile: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
    is_premium: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
    is_influencer: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
    is_creator: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
    is_hiring: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
    is_open_to_work: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
    is_saved_lead: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
    is_crm_imported: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
    is_relationship: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
    is_self: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
    invitation: typebox_1.Type.Optional(typebox_1.Type.Object({
        type: typebox_1.Type.Union([typebox_1.Type.Literal("SENT"), typebox_1.Type.Literal("RECEIVED")]),
        status: typebox_1.Type.Union([
            typebox_1.Type.Literal("PENDING"),
            typebox_1.Type.Literal("IGNORED"),
            typebox_1.Type.Literal("WITHDRAWN"),
        ]),
    })),
    work_experience: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.Object({
        position: typebox_1.Type.String(),
        company_id: typebox_1.Type.Optional(typebox_1.Type.String()),
        company: typebox_1.Type.String(),
        location: typebox_1.Type.Optional(typebox_1.Type.String()),
        description: typebox_1.Type.Optional(typebox_1.Type.String()),
        current: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
        status: typebox_1.Type.Optional(typebox_1.Type.String()),
        start: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
        end: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
    }))),
    volunteering_experience: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.Object({
        company: typebox_1.Type.String(),
        description: typebox_1.Type.String(),
        role: typebox_1.Type.String(),
        cause: typebox_1.Type.String(),
        start: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
        end: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
    }))),
    education: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.Object({
        degree: typebox_1.Type.Optional(typebox_1.Type.String()),
        school: typebox_1.Type.String(),
        field_of_study: typebox_1.Type.Optional(typebox_1.Type.String()),
        start: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
        end: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
    }))),
    skills: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.Object({
        name: typebox_1.Type.String(),
        endorsement_count: typebox_1.Type.Number(),
    }))),
    languages: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.Object({
        name: typebox_1.Type.String(),
        proficiency: typebox_1.Type.Optional(typebox_1.Type.String()),
    }))),
    certifications: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.Object({
        name: typebox_1.Type.String(),
        organization: typebox_1.Type.String(),
        url: typebox_1.Type.Optional(typebox_1.Type.String()),
    }))),
    follower_count: typebox_1.Type.Optional(typebox_1.Type.Number()),
    connections_count: typebox_1.Type.Optional(typebox_1.Type.Number()),
    shared_connections_count: typebox_1.Type.Optional(typebox_1.Type.Number()),
    network_distance: typebox_1.Type.Optional(typebox_1.Type.Union([
        typebox_1.Type.Literal("FIRST_DEGREE"),
        typebox_1.Type.Literal("SECOND_DEGREE"),
        typebox_1.Type.Literal("THIRD_DEGREE"),
        typebox_1.Type.Literal("OUT_OF_NETWORK"),
    ])),
    public_profile_url: typebox_1.Type.Optional(typebox_1.Type.String()),
});
/**
 *
 */
exports.WhatsappUserProfileSchema = typebox_1.Type.Object({
    provider: typebox_1.Type.Literal("WHATSAPP"),
    id: typebox_1.Type.String(),
});
/**
 *
 */
exports.InstagramUserProfileSchema = typebox_1.Type.Object({
    provider: typebox_1.Type.Literal("INSTAGRAM"),
    pk: typebox_1.Type.Number(),
    username: typebox_1.Type.String(),
    full_name: typebox_1.Type.String(),
    profile_pic_url: typebox_1.Type.String(),
    biography: typebox_1.Type.String(),
    follower_count: typebox_1.Type.Number(),
    following_count: typebox_1.Type.Number(),
    is_verified: typebox_1.Type.Boolean(),
    is_business: typebox_1.Type.Boolean(),
    is_private: typebox_1.Type.Boolean(),
});
/**
 *
 */
exports.TelegramUserProfileSchema = typebox_1.Type.Object({
    provider: typebox_1.Type.Literal("TELEGRAM"),
    provider_id: typebox_1.Type.String(),
    self: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.Boolean(), typebox_1.Type.Null()])),
    contact: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.Boolean(), typebox_1.Type.Null()])),
    mutual_contact: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.Boolean(), typebox_1.Type.Null()])),
    deleted: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.Boolean(), typebox_1.Type.Null()])),
    bot: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.Boolean(), typebox_1.Type.Null()])),
    verified: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.Boolean(), typebox_1.Type.Null()])),
    restricted: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.Boolean(), typebox_1.Type.Null()])),
    fake: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.Boolean(), typebox_1.Type.Null()])),
    premium: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.Boolean(), typebox_1.Type.Null()])),
    close_friend: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.Boolean(), typebox_1.Type.Null()])),
    first_name: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()])),
    last_name: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()])),
    username: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()])),
    phone: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()])),
    profile_picture_url: typebox_1.Type.String(),
    status: typebox_1.Type.Optional(typebox_1.Type.Union([
        typebox_1.Type.Object({
            name: typebox_1.Type.String(),
            expires: typebox_1.Type.Optional(typebox_1.Type.Number()),
            was_online: typebox_1.Type.Optional(typebox_1.Type.Number()),
        }),
        typebox_1.Type.Null(),
    ])),
    restriction_reason: typebox_1.Type.Optional(typebox_1.Type.Union([
        typebox_1.Type.Array(typebox_1.Type.Object({
            platform: typebox_1.Type.String(),
            reason: typebox_1.Type.String(),
            text: typebox_1.Type.String(),
        })),
        typebox_1.Type.Null(),
    ])),
    lang_code: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()])),
});
exports.TwitterUserProfileSchema = typebox_1.Type.Object({
    provider: typebox_1.Type.Literal("TWITTER"),
    id: typebox_1.Type.String(),
    name: typebox_1.Type.String(),
    screen_name: typebox_1.Type.String(),
    location: typebox_1.Type.String(),
    description: typebox_1.Type.Union([typebox_1.Type.Null(), typebox_1.Type.String()]),
    url: typebox_1.Type.Union([typebox_1.Type.Null(), typebox_1.Type.String()]),
    entities: typebox_1.Type.Object({
        description: typebox_1.Type.Object({
            urls: typebox_1.Type.Array(typebox_1.Type.Any()),
        }),
    }),
    protected: typebox_1.Type.Boolean(),
    verified: typebox_1.Type.Boolean(),
    followers_count: typebox_1.Type.Number(),
    friends_count: typebox_1.Type.Number(),
    listed_count: typebox_1.Type.Number(),
    favourites_count: typebox_1.Type.Number(),
    statuses_count: typebox_1.Type.Number(),
    created_at: typebox_1.Type.String(),
    profile_banner_url: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()])),
    profile_image_url_https: typebox_1.Type.String(),
    default_profile: typebox_1.Type.Boolean(),
    default_profile_image: typebox_1.Type.Boolean(),
    withheld_in_countries: typebox_1.Type.Array(typebox_1.Type.String()),
    //Deprecated by twitter should retun null
    followed_by: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.Null(), typebox_1.Type.Boolean()])),
    following: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.Null(), typebox_1.Type.Boolean()])),
    follow_request_sent: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.Null(), typebox_1.Type.Boolean()])),
    has_extended_profile: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.Null(), typebox_1.Type.Boolean()])),
    notifications: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.Null(), typebox_1.Type.Boolean()])),
    // Not found in twitter documentation but exist in response
    advertiser_account_type: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.Null(), typebox_1.Type.String()])),
    business_profile_state: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.Null(), typebox_1.Type.String()])),
    require_some_consent: typebox_1.Type.Optional(typebox_1.Type.Union([typebox_1.Type.Null(), typebox_1.Type.Boolean()])),
});
exports.GmailAliasSchema = typebox_1.Type.Object({
    email: typebox_1.Type.String(),
    display_name: typebox_1.Type.Optional(typebox_1.Type.String()),
    reply_to: typebox_1.Type.Optional(typebox_1.Type.String()),
    signature: typebox_1.Type.Optional(typebox_1.Type.String()),
    is_primary: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
    is_default: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
    verification_status: typebox_1.Type.Optional(typebox_1.Type.String()),
});
exports.GmailUserProfileSchema = typebox_1.Type.Object({
    provider: typebox_1.Type.Literal("GMAIL"),
    email: typebox_1.Type.String(),
    messages_total: typebox_1.Type.Optional(typebox_1.Type.Number()),
    threads_total: typebox_1.Type.Optional(typebox_1.Type.Number()),
    aliases: typebox_1.Type.Array(exports.GmailAliasSchema),
});
exports.OutlookUserProfileSchema = typebox_1.Type.Object({
    provider: typebox_1.Type.Literal("OUTLOOK"),
    id: typebox_1.Type.String(),
    email: typebox_1.Type.String(),
    display_name: typebox_1.Type.String(),
    given_name: typebox_1.Type.String(),
    surname: typebox_1.Type.String(),
    user_principal_name: typebox_1.Type.String(),
    job_title: typebox_1.Type.String(),
    mobile_phone: typebox_1.Type.String(),
    preferred_language: typebox_1.Type.String(),
});
exports.ImapUserProfileSchema = typebox_1.Type.Object({
    provider: typebox_1.Type.Literal("IMAP"),
    connection_params: typebox_1.Type.Object({
        imap: typebox_1.Type.Object({
            username: typebox_1.Type.String(),
            port: typebox_1.Type.Number(),
            host: typebox_1.Type.String(),
        }),
        smtp: typebox_1.Type.Object({
            username: typebox_1.Type.String(),
            port: typebox_1.Type.Number(),
            host: typebox_1.Type.String(),
        }),
    }),
});
/**
 *
 */
exports.LinkedinUserRelationSchema = typebox_1.Type.Object({
    first_name: typebox_1.Type.String(),
    last_name: typebox_1.Type.String(),
    headline: typebox_1.Type.String(),
    public_identifier: typebox_1.Type.String(),
    public_profile_url: typebox_1.Type.String(),
    created_at: typebox_1.Type.Number(),
    member_id: typebox_1.Type.String(),
    member_urn: typebox_1.Type.String(),
    connection_urn: typebox_1.Type.String(),
    profile_picture_url: typebox_1.Type.Optional(typebox_1.Type.String()),
});
/**
 *
 */
exports.LinkedinAccountOwnerProfileSchema = typebox_1.Type.Object({
    provider: typebox_1.Type.Literal("LINKEDIN"),
    provider_id: typebox_1.Type.String(),
    entity_urn: typebox_1.Type.String(),
    object_urn: typebox_1.Type.String(),
    first_name: typebox_1.Type.String(),
    last_name: typebox_1.Type.String(),
    profile_picture_url: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
    public_profile_url: typebox_1.Type.Optional(typebox_1.Type.String()),
    public_identifier: typebox_1.Type.Optional(typebox_1.Type.String()),
    headline: typebox_1.Type.Optional(typebox_1.Type.String()),
    location: typebox_1.Type.Optional(typebox_1.Type.String()),
    email: typebox_1.Type.String(),
    premium: typebox_1.Type.Boolean(),
    open_profile: typebox_1.Type.Boolean(),
    occupation: typebox_1.Type.Optional(typebox_1.Type.String()),
    recruiter: typebox_1.Type.Union([
        typebox_1.Type.Object({
            owner_seat_id: typebox_1.Type.String(),
            contract_id: typebox_1.Type.String(),
        }),
        typebox_1.Type.Object({
            error: typebox_1.Type.Union([
                typebox_1.Type.Literal("MULTIPLE_SESSIONS"),
                typebox_1.Type.Literal("DISCONNECTED"),
            ]),
        }),
        typebox_1.Type.Null(),
    ]),
    sales_navigator: typebox_1.Type.Union([
        typebox_1.Type.Object({
            owner_seat_id: typebox_1.Type.String(),
            contract_id: typebox_1.Type.String(),
        }),
        typebox_1.Type.Object({ error: typebox_1.Type.Literal("DISCONNECTED") }),
        typebox_1.Type.Null(),
    ]),
});
const LinkedinPostAuthorSchema = typebox_1.Type.Object({
    public_identifier: typebox_1.Type.String(),
    name: typebox_1.Type.String(),
    is_company: typebox_1.Type.Boolean(),
});
exports.LinkedinPostSchema = typebox_1.Type.Object({
    provider: typebox_1.Type.Literal("LINKEDIN"),
    id: common_types_js_1.UniqueIdSchema,
    social_id: common_types_js_1.UniqueIdSchema,
    share_url: typebox_1.Type.String(),
    title: typebox_1.Type.Optional(typebox_1.Type.String()),
    text: typebox_1.Type.String(),
    date: typebox_1.Type.String(),
    parsed_datetime: typebox_1.Type.String(),
    reaction_counter: typebox_1.Type.Number(),
    comment_counter: typebox_1.Type.Number(),
    repost_counter: typebox_1.Type.Number(),
    impressions_counter: typebox_1.Type.Number(),
    author: LinkedinPostAuthorSchema,
    permissions: typebox_1.Type.Object({
        can_react: typebox_1.Type.Boolean(),
        can_share: typebox_1.Type.Boolean(),
        can_post_comments: typebox_1.Type.Boolean(),
    }),
    is_repost: typebox_1.Type.Boolean(),
    repost_id: typebox_1.Type.Optional(typebox_1.Type.String({ description: "The republication ID." })),
    reposted_by: typebox_1.Type.Optional(LinkedinPostAuthorSchema),
    repost_content: typebox_1.Type.Optional(typebox_1.Type.Object({
        id: common_types_js_1.UniqueIdSchema,
        date: typebox_1.Type.String(),
        parsed_datetime: typebox_1.Type.String(),
        author: LinkedinPostAuthorSchema,
        text: typebox_1.Type.String(),
    }, { description: "The post shared in the current publication." })),
    attachments: typebox_1.Type.Array(ressource_types_js_1.MessageAttachmentSchema),
    poll: typebox_1.Type.Optional(typebox_1.Type.Object({
        id: common_types_js_1.UniqueIdSchema,
        total_votes_count: typebox_1.Type.Number(),
        question: typebox_1.Type.String(),
        is_open: typebox_1.Type.Boolean(),
        options: typebox_1.Type.Array(typebox_1.Type.Object({
            id: common_types_js_1.UniqueIdSchema,
            text: typebox_1.Type.String(),
            win: typebox_1.Type.Boolean(),
            votes_count: typebox_1.Type.Number(),
        })),
    })),
});
exports.PostSchema = typebox_1.Type.Union([exports.LinkedinPostSchema]);
exports.InvitationSchema = typebox_1.Type.Object({
    id: common_types_js_1.UniqueIdSchema,
    invited_user: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
    invited_user_id: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
    invited_user_public_id: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
    invited_user_description: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
    date: typebox_1.Type.String(),
    parsed_datetime: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
    invitation_text: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
    inviter: typebox_1.Type.Optional(typebox_1.Type.Object({
        inviter_name: typebox_1.Type.String(),
        inviter_id: typebox_1.Type.String(),
        inviter_public_identifier: typebox_1.Type.String(),
        inviter_description: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
    })),
    specifics: typebox_1.Type.Optional(typebox_1.Type.Union([
        typebox_1.Type.Object({
            provider: typebox_1.Type.Literal("LINKEDIN"),
            shared_secret: typebox_1.Type.String(),
        }),
    ])),
});
