"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListCursorQuerySchema = exports.LargeListLimitQuerySchema = exports.ShortListLimitQuerySchema = exports.ListLimitQuerySchema = exports.AfterParamSchema = exports.BeforeParamSchema = exports.CalendarEventIdParamSchema = exports.CalendarIdParamSchema = exports.ChatAttendeeIdParamSchema = exports.ChatIdParamSchema = exports.SenderIdParamSchema = exports.AccountIdOrIdsParamSchema = exports.AccountIdParamSchema = exports.LargeListLimitParamSchema = exports.ListLimitParamSchema = exports.ShortLimitParamSchema = exports.CursorParamSchema = void 0;
const typebox_1 = require("@sinclair/typebox");
const i18n_fake_js_1 = require("./i18n.fake.js");
const query_utils_js_1 = require("./query-utils.js");
const LIST_LIMIT_MIN = 1;
const LIST_LIMIT_MAX = 250;
const LARGE_LIST_LIMIT_MAX = 1000;
const SHORT_LIMIT_MAX = 100;
const LIST_LIMIT_DEFAULT = 100;
const SHORT_LIST_LIMIT_DEFAULT = 10;
/**
 *
 */
exports.CursorParamSchema = typebox_1.Type.String({
    title: 'CursorParam',
    description: 'A cursor for pagination purposes. To get the next page of entries, you need to make a new request and fulfill this field with the cursor received in the preceding request. This process should be repeated until all entries have been retrieved.',
    minLength: LIST_LIMIT_MIN,
});
exports.ShortLimitParamSchema = typebox_1.Type.Integer({
    minimum: LIST_LIMIT_MIN,
    maximum: SHORT_LIMIT_MAX,
    description: `A limit for the number of items returned in the response. The value can be set between ${LIST_LIMIT_MIN} and ${SHORT_LIMIT_MAX}.`,
    default: SHORT_LIST_LIMIT_DEFAULT,
});
exports.ListLimitParamSchema = typebox_1.Type.Integer({
    minimum: LIST_LIMIT_MIN,
    maximum: LIST_LIMIT_MAX,
    description: `A limit for the number of items returned in the response. The value can be set between ${LIST_LIMIT_MIN} and ${LIST_LIMIT_MAX}.`,
    example: LIST_LIMIT_DEFAULT,
});
exports.LargeListLimitParamSchema = typebox_1.Type.Integer({
    minimum: LIST_LIMIT_MIN,
    maximum: LARGE_LIST_LIMIT_MAX,
    description: `A limit for the number of items returned in the response. The value can be set between ${LIST_LIMIT_MIN} and ${LARGE_LIST_LIMIT_MAX}.`,
    example: LIST_LIMIT_DEFAULT,
});
/**
 *
 */
exports.AccountIdParamSchema = typebox_1.Type.String({
    title: 'AccountIdParam',
    description: 'An Unipile account id.',
    minLength: LIST_LIMIT_MIN,
});
/**
 *
 */
exports.AccountIdOrIdsParamSchema = typebox_1.Type.String({
    title: 'AccountIdOrIdsParam',
    description: 'An Unipile account id or a list of Unipile account ids separated by commas.',
    minLength: LIST_LIMIT_MIN,
});
/**
 *
 */
exports.SenderIdParamSchema = typebox_1.Type.String({
    title: 'SenderIdParam',
    description: i18n_fake_js_1.i18n.t('api.SenderIdParam.description'),
    examples: i18n_fake_js_1.i18n.t('api.SenderIdParam.example'),
    minLength: LIST_LIMIT_MIN,
});
/**
 *
 */
exports.ChatIdParamSchema = typebox_1.Type.String({
    title: 'ChatIdParam',
    description: i18n_fake_js_1.i18n.t('api.ChatIdParam.description'),
    examples: i18n_fake_js_1.i18n.t('api.ChatIdParam.example'),
    minLength: LIST_LIMIT_MIN,
});
/**
 *
 */
exports.ChatAttendeeIdParamSchema = typebox_1.Type.String({
    title: 'ChatAttendeeIdParam',
    description: i18n_fake_js_1.i18n.t('api.ChatAttendeeIdParam.description'),
    examples: i18n_fake_js_1.i18n.t('api.ChatAttendeeIdParam.example'),
    minLength: LIST_LIMIT_MIN,
});
/**
 *
 */
exports.CalendarIdParamSchema = typebox_1.Type.String({
    title: 'CalendarIdParam',
    description: i18n_fake_js_1.i18n.t('api.CalendarIdParam.description'),
    examples: i18n_fake_js_1.i18n.t('api.CalendarIdParam.example'),
    minLength: LIST_LIMIT_MIN,
});
/**
 *
 */
exports.CalendarEventIdParamSchema = typebox_1.Type.String({
    title: 'CalendarEventIdParam',
    description: i18n_fake_js_1.i18n.t('api.CalendarEventIdParam.description'),
    examples: i18n_fake_js_1.i18n.t('api.CalendarEventIdParam.example'),
    minLength: LIST_LIMIT_MIN,
});
exports.BeforeParamSchema = typebox_1.Type.String({
    description: 'A filter to target items created before the datetime (exclusive). Must be an ISO 8601 UTC datetime (YYYY-MM-DDTHH:MM:SS.sssZ).',
    example: query_utils_js_1.UTCDateTimeExample,
    pattern: query_utils_js_1.UTCDateTimePattern,
});
exports.AfterParamSchema = typebox_1.Type.String({
    description: 'A filter to target items created before the datetime (exclusive). Must be an ISO 8601 UTC datetime (YYYY-MM-DDTHH:MM:SS.sssZ).',
    example: query_utils_js_1.UTCDateTimeExample,
    pattern: query_utils_js_1.UTCDateTimePattern,
});
/**
 *
 */
exports.ListLimitQuerySchema = typebox_1.Type.Object({
    limit: typebox_1.Type.Optional(typebox_1.Type.Integer({
        minimum: LIST_LIMIT_MIN,
        maximum: LIST_LIMIT_MAX,
        default: LIST_LIMIT_DEFAULT,
        description: i18n_fake_js_1.i18n.t('api.Query.limit', {
            min: LIST_LIMIT_MIN,
            max: LIST_LIMIT_MAX,
        }),
    })),
});
exports.ShortListLimitQuerySchema = typebox_1.Type.Object({
    limit: typebox_1.Type.Optional(typebox_1.Type.Integer({
        minimum: LIST_LIMIT_MIN,
        maximum: SHORT_LIMIT_MAX,
        default: SHORT_LIST_LIMIT_DEFAULT,
        description: i18n_fake_js_1.i18n.t('api.Query.limit', {
            min: LIST_LIMIT_MIN,
            max: SHORT_LIMIT_MAX,
        }),
    })),
});
exports.LargeListLimitQuerySchema = typebox_1.Type.Object({
    limit: typebox_1.Type.Optional(typebox_1.Type.Integer({
        minimum: LIST_LIMIT_MIN,
        maximum: LARGE_LIST_LIMIT_MAX,
        default: LIST_LIMIT_DEFAULT,
        description: i18n_fake_js_1.i18n.t('api.Query.limit', {
            min: LIST_LIMIT_MIN,
            max: LIST_LIMIT_MAX,
        }),
    })),
});
/**
 *
 */
exports.ListCursorQuerySchema = typebox_1.Type.Composite([typebox_1.Type.Object({ cursor: exports.CursorParamSchema }), exports.ListLimitQuerySchema]);
