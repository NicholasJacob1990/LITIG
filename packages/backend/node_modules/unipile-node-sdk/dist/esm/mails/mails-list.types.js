"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MailListApiResponseValidator = exports.MailListApiResponseSchema = exports.MailFullApiResponse = exports.MailMetaApiResponse = exports.MailRefApiResponse = exports.MailGetQueryValidator = exports.MailGetQuerySchema = exports.MailListQueryValidator = exports.MailListQuerySchema = exports.MailListBaseQuerySchema = exports.MailListDecodedCursorValidator = exports.MailListDecodedCursorSchema = void 0;
const typebox_1 = require("@sinclair/typebox");
const compiler_1 = require("@sinclair/typebox/compiler");
const i18n_fake_js_1 = require("../common/i18n.fake.js");
const common_types_js_1 = require("../common/common.types.js");
const date_types_js_1 = require("../common/date.types.js");
const query_cursor_js_1 = require("../common/query-cursor.js");
const query_parameters_type_js_1 = require("../common/query-parameters.type.js");
const folders_types_js_1 = require("./folders/folders.types.js");
const ressource_types_js_1 = require("./ressource.types.js");
// --------------------------------------------------------------------------
// REQUEST
// --------------------------------------------------------------------------
/**
 *
 */
const MailListOptionsQuerySchema = typebox_1.Type.Object({
    account_id: query_parameters_type_js_1.AccountIdParamSchema,
    role: typebox_1.Type.Optional(folders_types_js_1.FolderRoleSchema),
    folder: typebox_1.Type.Optional(typebox_1.Type.String()),
    from: typebox_1.Type.Optional(typebox_1.Type.String()),
    to: typebox_1.Type.Optional(typebox_1.Type.String()),
    any_email: typebox_1.Type.Optional(typebox_1.Type.String()),
    after: typebox_1.Type.Optional(date_types_js_1.UTCDateTimeMsSchema),
    before: typebox_1.Type.Optional(date_types_js_1.UTCDateTimeMsSchema),
    include_headers: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
    meta_only: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
});
/**
 *
 */
exports.MailListDecodedCursorSchema = typebox_1.Type.Composite([
    MailListOptionsQuerySchema,
    typebox_1.Type.Required(query_parameters_type_js_1.ListLimitQuerySchema),
    typebox_1.Type.Object({
        cursor: typebox_1.Type.Object({
            last_id: common_types_js_1.UniqueIdSchema,
            last_date: date_types_js_1.UTCDateTimeMsSchema,
            token: typebox_1.Type.Optional(typebox_1.Type.String()),
        }),
    }),
]);
exports.MailListDecodedCursorValidator = compiler_1.TypeCompiler.Compile(exports.MailListDecodedCursorSchema);
/**
 *
 */
exports.MailListBaseQuerySchema = typebox_1.Type.Composite([MailListOptionsQuerySchema, query_parameters_type_js_1.ListLimitQuerySchema]);
/**
 *
 */
exports.MailListQuerySchema = typebox_1.Type.Union([exports.MailListBaseQuerySchema, query_parameters_type_js_1.ListCursorQuerySchema], {
    description: i18n_fake_js_1.i18n.t('@todo api.Query.Cursor.ignore_other_params'),
});
// /**
//  *
//  */
// export const getMailListQueryOpenApiSchema =
//   makeOpenApiSchemaGetter(MailListQuerySchema);
/**
 *
 */
exports.MailListQueryValidator = compiler_1.TypeCompiler.Compile(exports.MailListQuerySchema);
/**
 *
 */
const MailGetOptionsQuerySchema = typebox_1.Type.Object({
    account_id: typebox_1.Type.Optional(query_parameters_type_js_1.AccountIdParamSchema),
    include_headers: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
});
/**
 *
 */
exports.MailGetQuerySchema = MailGetOptionsQuerySchema;
/**
 *
 */
exports.MailGetQueryValidator = compiler_1.TypeCompiler.Compile(exports.MailGetQuerySchema);
// --------------------------------------------------------------------------
// RESPONSE
// --------------------------------------------------------------------------
/** */
exports.MailRefApiResponse = typebox_1.Type.Composite([typebox_1.Type.Object({ object: typebox_1.Type.Literal('Email') }), ressource_types_js_1.MailReferenceSchema], { title: 'Mail reference' });
/** */
exports.MailMetaApiResponse = typebox_1.Type.Composite([typebox_1.Type.Object({ object: typebox_1.Type.Literal('Email') }), ressource_types_js_1.MailMetaSchema], { title: 'Mail metas' });
/** */
exports.MailFullApiResponse = typebox_1.Type.Composite([typebox_1.Type.Object({ object: typebox_1.Type.Literal('Email') }), ressource_types_js_1.MailFullSchema], { title: 'Full mail' });
/**
 *
 */
exports.MailListApiResponseSchema = typebox_1.Type.Object({
    object: typebox_1.Type.Literal('EmailList'),
    items: typebox_1.Type.Array(typebox_1.Type.Union([exports.MailRefApiResponse, exports.MailMetaApiResponse, exports.MailFullApiResponse])),
    cursor: typebox_1.Type.Union([(0, query_cursor_js_1.EncodedQueryCursorType)(), typebox_1.Type.Null()]),
}, { description: '@todo List of Emails.' });
/**  */
exports.MailListApiResponseValidator = compiler_1.TypeCompiler.Compile(exports.MailListApiResponseSchema);
