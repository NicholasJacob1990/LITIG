"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageListApiResponseValidator = exports.MessageListApiResponseSchema = exports.MessageListQueryValidator = exports.MessagesListQuerySchema = exports.MessagesListBaseQuerySchema = exports.MessageListDecodedCursorValidator = exports.MessageListDecodedCursorSchema = void 0;
const typebox_1 = require("@sinclair/typebox");
const compiler_1 = require("@sinclair/typebox/compiler");
const i18n_fake_js_1 = require("../../common/i18n.fake.js");
const common_types_js_1 = require("../../common/common.types.js");
const date_types_js_1 = require("../../common/date.types.js");
const query_cursor_js_1 = require("../../common/query-cursor.js");
const query_parameters_type_js_1 = require("../../common/query-parameters.type.js");
const ressource_types_js_1 = require("./ressource.types.js");
// --------------------------------------------------------------------------
// REQUEST
// --------------------------------------------------------------------------
/**
 * @todo Read Typebox doc about Transform Types :
 *       https://github.com/sinclairzx81/typebox#transform-types
 */
// export const MessageListCursorTransform = Type.Transform(CursorParamSchema).
// Decode(v => {
//     const parsed = JSON.parse(Buffer.from(v, "base64").toString());
// }).Encode()
const MessageListOptionsQuerySchema = typebox_1.Type.Object({
    account_id: typebox_1.Type.Optional(query_parameters_type_js_1.AccountIdParamSchema),
    after: typebox_1.Type.Optional(date_types_js_1.UTCDateTimeMsSchema),
    before: typebox_1.Type.Optional(date_types_js_1.UTCDateTimeMsSchema),
    sender_id: typebox_1.Type.Optional(query_parameters_type_js_1.SenderIdParamSchema),
});
/**
 *
 */
exports.MessageListDecodedCursorSchema = typebox_1.Type.Composite([
    MessageListOptionsQuerySchema,
    typebox_1.Type.Required(query_parameters_type_js_1.ListLimitQuerySchema),
    typebox_1.Type.Object({
        cursor: typebox_1.Type.Object({
            last_id: common_types_js_1.UniqueIdSchema,
            last_date: date_types_js_1.UTCDateTimeMsSchema,
        }),
    }),
]);
exports.MessageListDecodedCursorValidator = compiler_1.TypeCompiler.Compile(exports.MessageListDecodedCursorSchema);
/**
 *
 */
exports.MessagesListBaseQuerySchema = typebox_1.Type.Composite([
    MessageListOptionsQuerySchema,
    query_parameters_type_js_1.ListLimitQuerySchema,
]);
/**
 *
 */
exports.MessagesListQuerySchema = typebox_1.Type.Union([exports.MessagesListBaseQuerySchema, query_parameters_type_js_1.ListCursorQuerySchema], { description: i18n_fake_js_1.i18n.t("@todo api.Query.Cursor.ignore_other_params") });
/**
 *
 */
exports.MessageListQueryValidator = compiler_1.TypeCompiler.Compile(exports.MessagesListQuerySchema);
// --------------------------------------------------------------------------
// RESPONSE
// --------------------------------------------------------------------------
/**
 *
 */
exports.MessageListApiResponseSchema = typebox_1.Type.Object({
    object: typebox_1.Type.Literal("MessageList"),
    items: typebox_1.Type.Array(typebox_1.Type.Composite([
        typebox_1.Type.Object({ object: typebox_1.Type.Literal("Message") }),
        ressource_types_js_1.MessageSchema,
    ])),
    cursor: typebox_1.Type.Union([(0, query_cursor_js_1.EncodedQueryCursorType)(), typebox_1.Type.Null()]),
});
// export const getMessageListResponseOpenApiSchema = makeOpenApiSchemaGetter(
//   MessageListApiResponseSchema
// );
/**  */
exports.MessageListApiResponseValidator = compiler_1.TypeCompiler.Compile(exports.MessageListApiResponseSchema);
