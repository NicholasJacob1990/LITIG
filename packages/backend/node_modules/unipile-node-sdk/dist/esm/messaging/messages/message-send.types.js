"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageSentResponseValidator = exports.MessageSentResponseSchema = exports.VoiceMessagePostQueryValidator = exports.FilesPostQueryValidator = exports.AttachmentsPostQueryValidator = exports.AttachmentPostQuerySchema = exports.SendMessageToChatBodyValidator = exports.SendMessageToChatBodySchema = void 0;
const typebox_1 = require("@sinclair/typebox");
const compiler_1 = require("@sinclair/typebox/compiler");
const resource_types_js_1 = require("../../mails/attachments/resource.types.js");
const MAX_ATTACHMENTS = 26214400;
const MAX_ATTACHMENT_SIZE = 26214400;
// --------------------------------------------------------------------------
// REQUEST
// --------------------------------------------------------------------------
/**
 *
 */
exports.SendMessageToChatBodySchema = typebox_1.Type.Object({
    text: typebox_1.Type.Optional(typebox_1.Type.String()),
    thread_id: typebox_1.Type.Optional(typebox_1.Type.String({
        description: "Optional and for Slackâ€™s messaging only. The id of a sub thread associated with a chat.",
    })),
    // voice_message: Type.Optional(
    //   Type.String({
    //     format: "binary",
    //     description: "For Linkedin messaging only.",
    //   })
    // ),
    attachments: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.String({ format: "binary" }))),
});
// /**
//  *
//  */
// export const getSendMessageToChatBodyOpenApiSchema = makeOpenApiSchemaGetter(
//   SendMessageToChatBodySchema
// );
/**
 *
 */
exports.SendMessageToChatBodyValidator = compiler_1.TypeCompiler.Compile(exports.SendMessageToChatBodySchema);
exports.AttachmentPostQuerySchema = typebox_1.Type.Object({
    fieldname: typebox_1.Type.String(),
    originalname: typebox_1.Type.String(),
    encoding: typebox_1.Type.String(),
    mimetype: typebox_1.Type.String(),
    size: typebox_1.Type.Number({ maximum: MAX_ATTACHMENT_SIZE }),
    buffer: (0, resource_types_js_1.BufferType)(),
    stream: typebox_1.Type.Optional((0, resource_types_js_1.ReadableType)()),
    destination: typebox_1.Type.Optional(typebox_1.Type.String()),
    filename: typebox_1.Type.Optional(typebox_1.Type.String()),
    path: typebox_1.Type.Optional(typebox_1.Type.String()),
});
// export const AttachmentsPostQueryValidator = TypeCompiler.Compile(
//   Type.Array(AttachmentPostQuerySchema, { maxItems: MAX_ATTACHMENTS })
// );
exports.AttachmentsPostQueryValidator = compiler_1.TypeCompiler.Compile(typebox_1.Type.Optional(typebox_1.Type.Array(exports.AttachmentPostQuerySchema, { maxItems: MAX_ATTACHMENTS })));
exports.FilesPostQueryValidator = compiler_1.TypeCompiler.Compile(typebox_1.Type.Object({
    attachments: typebox_1.Type.Optional(typebox_1.Type.Array(exports.AttachmentPostQuerySchema, { maxItems: MAX_ATTACHMENTS })),
    voice_message: typebox_1.Type.Optional(typebox_1.Type.Array(exports.AttachmentPostQuerySchema, { maxItems: 1 })),
}));
exports.VoiceMessagePostQueryValidator = compiler_1.TypeCompiler.Compile(typebox_1.Type.Union([exports.AttachmentPostQuerySchema, typebox_1.Type.Null()]));
// --------------------------------------------------------------------------
// RESPONSE
// --------------------------------------------------------------------------
exports.MessageSentResponseSchema = typebox_1.Type.Object({
    object: typebox_1.Type.Literal("MessageSent"),
    message_id: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()], {
        description: "The Unipile ID of the newly sent message.",
    }),
});
// /**
//  *
//  */
// export const getMessageSentResponseOpenApiSchema = makeOpenApiSchemaGetter(
//   MessageSentResponseSchema
// );
/**  */
exports.MessageSentResponseValidator = compiler_1.TypeCompiler.Compile(exports.MessageSentResponseSchema);
