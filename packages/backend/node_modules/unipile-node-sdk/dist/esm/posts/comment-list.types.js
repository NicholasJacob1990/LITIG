"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostCommentListApiResponseValidator = exports.CommentListApiResponseSchema = exports.PostCommentListDecodedCursorValidator = exports.PostCommentListDecodedCursorSchema = exports.PostCommentListQueryValidator = exports.PostCommentListQuerySchema = exports.PostCommentListBaseQuerySchema = exports.LinkedinCommentLimitParamSchema = exports.LINKEDIN_COMMENT_LIST_LIMIT_DEFAULT = void 0;
const typebox_1 = require("@sinclair/typebox");
const resource_types_js_1 = require("./resource.types.js");
const compiler_1 = require("@sinclair/typebox/compiler");
const query_parameters_type_js_1 = require("../common/query-parameters.type.js");
const common_types_js_1 = require("../common/common.types.js");
// --------------------------------------------------------------------------
// REQUEST
// --------------------------------------------------------------------------
const LINKEDIN_COMMENT_LIST_LIMIT_MIN = 1;
const LINKEDIN_COMMENT_LIST_LIMIT_MAX = 100; // Linkedin’s api don’t allows more
exports.LINKEDIN_COMMENT_LIST_LIMIT_DEFAULT = LINKEDIN_COMMENT_LIST_LIMIT_MAX;
exports.LinkedinCommentLimitParamSchema = typebox_1.Type.Optional(typebox_1.Type.Integer({
    minimum: LINKEDIN_COMMENT_LIST_LIMIT_MIN,
    maximum: LINKEDIN_COMMENT_LIST_LIMIT_MAX,
    description: `A limit for the number of items returned in the response. The value can be set between ${LINKEDIN_COMMENT_LIST_LIMIT_MIN} and ${LINKEDIN_COMMENT_LIST_LIMIT_MAX}.`,
    example: exports.LINKEDIN_COMMENT_LIST_LIMIT_DEFAULT,
}));
exports.PostCommentListBaseQuerySchema = typebox_1.Type.Object({
    account_id: typebox_1.Type.String({
        description: "The id of the account to perform the request from.",
        minLength: 1,
    }),
    limit: exports.LinkedinCommentLimitParamSchema,
    comment_id: typebox_1.Type.Optional(typebox_1.Type.String({
        minLength: 1,
        description: "The id of the comment to get replies from.",
    })),
});
exports.PostCommentListQuerySchema = typebox_1.Type.Composite([
    exports.PostCommentListBaseQuerySchema,
    typebox_1.Type.Object({ cursor: typebox_1.Type.Optional(query_parameters_type_js_1.CursorParamSchema) }),
]);
exports.PostCommentListQueryValidator = compiler_1.TypeCompiler.Compile(exports.PostCommentListQuerySchema);
/**
 *
 */
exports.PostCommentListDecodedCursorSchema = typebox_1.Type.Composite([
    typebox_1.Type.Required(typebox_1.Type.Omit(exports.PostCommentListBaseQuerySchema, ["comment_id"])),
    typebox_1.Type.Object({
        post_id: common_types_js_1.UniqueIdSchema,
        thread_id: typebox_1.Type.Optional(common_types_js_1.UniqueIdSchema),
        start: typebox_1.Type.Number(),
    }),
]);
exports.PostCommentListDecodedCursorValidator = compiler_1.TypeCompiler.Compile(exports.PostCommentListDecodedCursorSchema);
// --------------------------------------------------------------------------
// RESPONSE
// --------------------------------------------------------------------------
exports.CommentListApiResponseSchema = typebox_1.Type.Object({
    object: typebox_1.Type.Literal("CommentList"),
    items: typebox_1.Type.Array(typebox_1.Type.Composite([
        typebox_1.Type.Object({ object: typebox_1.Type.Literal("Comment") }),
        resource_types_js_1.CommentSchema,
    ])),
    cursor: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
    total_items: typebox_1.Type.Union([typebox_1.Type.Number(), typebox_1.Type.Null()]),
});
// export const getPostCommentListResponseOpenApiSchema = makeOpenApiSchemaGetter(
//   CommentListApiResponseSchema
// );
/**  */
exports.PostCommentListApiResponseValidator = compiler_1.TypeCompiler.Compile(exports.CommentListApiResponseSchema);
