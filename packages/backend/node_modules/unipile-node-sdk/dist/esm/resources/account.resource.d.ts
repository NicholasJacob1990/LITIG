import { ConnectAccountInput, GetAccountsInput, Output, PostCodeCheckpointInput, PostHostedAuthLinkInput, ReconnectAccountInput, RequestOptions, UnipileClient, PostInstagramAccountInput, PostMessengerAccountInput, LinkedinBasicAuthenticationInput, LinkedinCookieAuthenticationInput, PostTwitterAccountInput } from '../index.js';
import { AccountListApiResponse } from '../accounts/accounts-list.schema.js';
import { AccountApiResponse } from '../accounts/account.types.js';
import { AccountConnectApiResponse } from '../accounts/accounts-create.types.js';
import { AccountReconnectApiResponse, AccountSolveCheckpointApiResponse } from '../accounts/accounts-reconnect.types.js';
import { AccountDeletedApiResponse } from '../accounts/accounts-delete.types.js';
import { HostedAuthLinkResponse } from '../hosted/hosted-auth-link.types.js';
import { AccountResyncApiResponse, AccountResyncInput } from '../accounts/accounts-resync.types.js';
export declare class AccountResource {
    private client;
    constructor(client: UnipileClient);
    getAll(input?: GetAccountsInput, options?: RequestOptions): Promise<AccountListApiResponse>;
    getOne(account_id: string, options?: RequestOptions): Promise<AccountApiResponse>;
    connect(input: ConnectAccountInput, options?: RequestOptions): Promise<AccountConnectApiResponse>;
    reconnect(input: ReconnectAccountInput, options?: RequestOptions): Promise<AccountReconnectApiResponse>;
    connectWhatsapp(options?: RequestOptions): Promise<Output.PostQrCodeBasedAccount>;
    reconnectWhatsapp(account_id: string, options?: RequestOptions): Promise<Output.PostQrCodeBasedAccount>;
    connectTelegram(options?: RequestOptions): Promise<Output.PostQrCodeBasedAccount>;
    reconnectTelegram(account_id: string, options?: RequestOptions): Promise<Output.PostQrCodeBasedAccount>;
    connectLinkedin(input: LinkedinBasicAuthenticationInput, options?: RequestOptions): Promise<AccountConnectApiResponse>;
    connectLinkedinWithCookie(input: LinkedinCookieAuthenticationInput, options?: RequestOptions): Promise<AccountConnectApiResponse>;
    reconnectLinkedin(input: LinkedinBasicAuthenticationInput & {
        account_id: string;
    }, options?: RequestOptions): Promise<AccountReconnectApiResponse>;
    reconnectLinkedinWithCookie(input: LinkedinCookieAuthenticationInput & {
        account_id: string;
    }, options?: RequestOptions): Promise<AccountReconnectApiResponse>;
    connectInstagram(input: PostInstagramAccountInput, options?: RequestOptions): Promise<AccountConnectApiResponse>;
    reconnectInstagram(input: PostInstagramAccountInput & {
        account_id: string;
    }, options?: RequestOptions): Promise<AccountReconnectApiResponse>;
    connectTwitter(input: PostTwitterAccountInput, options?: RequestOptions): Promise<AccountConnectApiResponse>;
    reconnectTwitter(input: PostTwitterAccountInput & {
        account_id: string;
    }, options?: RequestOptions): Promise<AccountReconnectApiResponse>;
    connectMessenger(input: PostMessengerAccountInput, options?: RequestOptions): Promise<AccountConnectApiResponse>;
    reconnectMessenger(input: PostMessengerAccountInput & {
        account_id: string;
    }, options?: RequestOptions): Promise<AccountReconnectApiResponse>;
    delete(account_id: string, options?: RequestOptions): Promise<AccountDeletedApiResponse>;
    solveCodeCheckpoint(input: PostCodeCheckpointInput, options?: RequestOptions): Promise<AccountSolveCheckpointApiResponse>;
    createHostedAuthLink(input: PostHostedAuthLinkInput, options?: RequestOptions): Promise<HostedAuthLinkResponse>;
    resyncLinkedinAccount(input: AccountResyncInput, options?: RequestOptions): Promise<AccountResyncApiResponse>;
}
