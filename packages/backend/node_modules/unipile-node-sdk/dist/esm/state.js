"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientState = void 0;
const index_js_1 = require("./errors/index.js");
const DEFAULT_API_VERSION = 'v1';
const DEFAULT_LOG_REQUEST_RESULT = false;
const DEFAULT_LOG_REQUEST_PAYLOAD = false;
const DEFAULT_VALIDATE_REQUEST_PAYLOAD = false;
class ClientState {
    constructor(baseUrl, token, options) {
        var _a, _b, _c, _d, _e;
        this._baseUrl = baseUrl;
        this._token = token;
        const [protocol, domain] = baseUrl.split('://');
        this._protocol = protocol;
        this._domain = domain;
        this.apiVersion = (_a = options.apiVersion) !== null && _a !== void 0 ? _a : DEFAULT_API_VERSION;
        this.logRequestResult = (_b = options.logRequestResult) !== null && _b !== void 0 ? _b : DEFAULT_LOG_REQUEST_RESULT;
        this.logRequestPayload = (_c = options.logRequestPayload) !== null && _c !== void 0 ? _c : DEFAULT_LOG_REQUEST_PAYLOAD;
        this.validateRequestPayload = (_d = options.validateRequestPayload) !== null && _d !== void 0 ? _d : DEFAULT_VALIDATE_REQUEST_PAYLOAD;
        this.validateRequestPayloadLevel = (_e = options.validateRequestPayloadLevel) !== null && _e !== void 0 ? _e : 'warn';
        // this.validateRequestPayload = false;
    }
    get token() {
        if (this._token === '')
            throw new index_js_1.InvalidTokenError();
        return this._token;
    }
    get protocol() {
        if (this._protocol === 'http')
            return 'http';
        else if (this._protocol === 'https')
            return 'https';
        else
            throw new index_js_1.InvalidProtocolError(this._baseUrl);
    }
    get domain() {
        if (!this._domain)
            throw new index_js_1.InvalidDomainError(this._baseUrl);
        return this._domain;
    }
}
exports.ClientState = ClientState;
