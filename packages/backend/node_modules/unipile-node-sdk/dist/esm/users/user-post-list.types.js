"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserPostListApiResponseValidator = exports.UserPostListBodySchema = exports.UserPostListQueryValidator = exports.UserPostListQuerySchema = exports.LinkedinPostLimitParamSchema = exports.LINKEDIN_POST_LIST_LIMIT_DEFAULT = void 0;
const typebox_1 = require("@sinclair/typebox");
const compiler_1 = require("@sinclair/typebox/compiler");
const post_types_js_1 = require("./post.types.js");
// --------------------------------------------------------------------------
// REQUEST
// --------------------------------------------------------------------------
const LINKEDIN_POST_LIST_LIMIT_MIN = 1;
const LINKEDIN_POST_LIST_LIMIT_MAX = 100; // Linkedin’s api don’t allows more
exports.LINKEDIN_POST_LIST_LIMIT_DEFAULT = LINKEDIN_POST_LIST_LIMIT_MAX;
exports.LinkedinPostLimitParamSchema = typebox_1.Type.Integer({
    minimum: LINKEDIN_POST_LIST_LIMIT_MIN,
    maximum: LINKEDIN_POST_LIST_LIMIT_MAX,
    description: `A limit for the number of items returned in the response. The value can be set between ${LINKEDIN_POST_LIST_LIMIT_MIN} and ${LINKEDIN_POST_LIST_LIMIT_MAX}.`,
    example: exports.LINKEDIN_POST_LIST_LIMIT_DEFAULT,
});
// export const getLinkedinPostLimitParamOpenApiSchema = makeOpenApiSchemaGetter(
//   LinkedinPostLimitParamSchema
// );
exports.UserPostListQuerySchema = typebox_1.Type.Object({
    account_id: typebox_1.Type.String({
        description: "The id of the account to perform the request from.",
        minLength: 1,
    }),
    is_company: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
    limit: typebox_1.Type.Optional(exports.LinkedinPostLimitParamSchema),
    cursor: typebox_1.Type.Optional(typebox_1.Type.String()),
});
exports.UserPostListQueryValidator = compiler_1.TypeCompiler.Compile(exports.UserPostListQuerySchema);
exports.UserPostListBodySchema = typebox_1.Type.Composite([
    exports.UserPostListQuerySchema,
    typebox_1.Type.Object({ identifier: typebox_1.Type.String() }),
]);
// --------------------------------------------------------------------------
// RESPONSE
// --------------------------------------------------------------------------
const UserPostListApiResponseSchema = typebox_1.Type.Object({
    object: typebox_1.Type.Literal("PostList"),
    items: typebox_1.Type.Array(post_types_js_1.UserPostApiResponseSchema),
    cursor: typebox_1.Type.Union([typebox_1.Type.String(), typebox_1.Type.Null()]),
});
// export const getUserPostListResponseOpenApiSchema = makeOpenApiSchemaGetter(
//   UserPostListApiResponseSchema
// );
/**  */
exports.UserPostListApiResponseValidator = compiler_1.TypeCompiler.Compile(UserPostListApiResponseSchema);
