import { Static } from "@sinclair/typebox";
export declare const EmailSchema: import("@sinclair/typebox").TString;
export type Email = Static<typeof EmailSchema>;
export declare const EmailValidator: import("@sinclair/typebox/compiler").TypeCheck<import("@sinclair/typebox").TString>;
/**
 *
 */
export declare const UserNameSchema: import("@sinclair/typebox").TObject<{
    username: import("@sinclair/typebox").TString;
}>;
export type UserName = Static<typeof UserNameSchema>;
export declare const UserNameValidator: import("@sinclair/typebox/compiler").TypeCheck<import("@sinclair/typebox").TObject<{
    username: import("@sinclair/typebox").TString;
}>>;
/**
 *
 */
export declare const UserIdSchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TNumber;
}>;
export type UserId = Static<typeof UserIdSchema>;
export declare const UserIdValidator: import("@sinclair/typebox/compiler").TypeCheck<import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TNumber;
}>>;
/**
 *
 */
export declare const UserReferralCodeSchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TString;
}>;
export type UserReferralCode = Static<typeof UserReferralCodeSchema>;
export declare const UserReferralCodeValidator: import("@sinclair/typebox/compiler").TypeCheck<import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TString;
}>>;
/**
 * @todo Populate as needed.
 */
/** */
export declare const UserSchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TNumber, import("@sinclair/typebox").TString]>;
    username: import("@sinclair/typebox").TString;
}>;
export type User = Static<typeof UserSchema>;
export declare const UserValidator: import("@sinclair/typebox/compiler").TypeCheck<import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TNumber, import("@sinclair/typebox").TString]>;
    username: import("@sinclair/typebox").TString;
}>>;
