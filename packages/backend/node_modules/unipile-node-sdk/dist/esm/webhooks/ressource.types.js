"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebhookSchema = exports.WebhookTriggerSchema = exports.WebhookAutoSchema = exports.WebhookBaseSchema = exports.WebhookMailTrackingTriggerEventSchema = exports.WebhookMailTriggerEventSchema = exports.WebhookMessagingTriggerEventSchema = exports.WebhookBodyFormatSchema = exports.WebhookHeaderItemSchema = exports.WebhookEmailTrackingDataItemSchema = exports.WebhookEmailTrackingDataKeySchema = exports.WebhookEmailDataItemSchema = exports.WebhookEmailDataKeySchema = exports.WebhookDataItemSchema = exports.WebhookDataKeySchema = exports.WebhookButtonSchema = exports.WebhookIconKeySchema = exports.WebhookAccountOptionSchema = void 0;
const typebox_1 = require("@sinclair/typebox");
const ressource_types_js_1 = require("../accounts/ressource.types.js");
const common_types_js_1 = require("../common/common.types.js");
exports.WebhookAccountOptionSchema = typebox_1.Type.Object({
    id: common_types_js_1.UniqueIdSchema,
    name: typebox_1.Type.Optional(typebox_1.Type.String()),
    type: ressource_types_js_1.AccountSourceProviderSchema,
});
exports.WebhookIconKeySchema = typebox_1.Type.Union([
    typebox_1.Type.Literal("WebhookIcon"),
    typebox_1.Type.Literal("SettingsInputIcon"),
    typebox_1.Type.Literal("LeakAddIcon"),
    typebox_1.Type.Literal("Diversity2Icon"),
    typebox_1.Type.Literal("AutoFixHighIcon"),
    typebox_1.Type.Literal("SignPostIcon"),
    typebox_1.Type.Literal("ShutterSpeedIcon"),
    typebox_1.Type.Literal("SyncAltIcon"),
    typebox_1.Type.Literal("WhatsAppIcon"),
    typebox_1.Type.Literal("LinkedInIcon"),
    typebox_1.Type.Literal("ImportExportIcon"),
    typebox_1.Type.Literal("PodcastsIcon"),
    typebox_1.Type.Literal("CableIcon"),
]);
exports.WebhookButtonSchema = typebox_1.Type.Object({
    icon: exports.WebhookIconKeySchema,
    name: typebox_1.Type.String(),
    context: typebox_1.Type.Union([typebox_1.Type.Literal("MESSAGE"), typebox_1.Type.Literal("CHAT")]),
});
exports.WebhookDataKeySchema = (0, common_types_js_1.StringEnum)([
    "account_id",
    "account_type",
    "chat_id",
    "timestamp",
    "webhook_name",
    "message_id",
    "message",
    "reaction",
    "reaction_sender",
    "sender",
    "attendees",
    "attachments",
]);
exports.WebhookDataItemSchema = typebox_1.Type.Object({
    name: typebox_1.Type.String({
        description: "The name of the property you want to receive. It will replace the original name of the property.",
    }),
    key: exports.WebhookDataKeySchema,
}, {
    description: "You can use this field to change the name of the properties you will receive from the webhook.",
});
exports.WebhookEmailDataKeySchema = (0, common_types_js_1.StringEnum)([
    "email_id",
    "account_id",
    "webhook_name",
    "date",
    "from_attendee",
    "to_attendees",
    "cc_attendees",
    "bcc_attendees",
    "reply_to_attendees",
    "subject",
    "body",
    "body_plain",
    "message_id",
    "provider_id",
    "tracking_id",
    "read_date",
    "is_complete",
    "in_reply_to",
    "has_attachments",
    "attachments",
    "folders",
    "role",
    "origin",
]);
exports.WebhookEmailDataItemSchema = typebox_1.Type.Object({
    name: typebox_1.Type.String({
        description: "The name of the property you want to receive. It will replace the original name of the property.",
    }),
    key: exports.WebhookEmailDataKeySchema,
}, {
    description: "You can use this field to change the name of the properties you will receive from the webhook.",
});
exports.WebhookEmailTrackingDataKeySchema = (0, common_types_js_1.StringEnum)([
    "event_id",
    "tracking_id",
    "type",
    "date",
    "email_id",
    "account_id",
    "ip",
    "user_agent",
    "url",
    "label",
    "custom_domain",
]);
exports.WebhookEmailTrackingDataItemSchema = typebox_1.Type.Object({
    name: typebox_1.Type.String({
        description: "The name of the property you want to receive. It will replace the original name of the property.",
    }),
    key: exports.WebhookEmailTrackingDataKeySchema,
}, {
    description: "You can use this field to change the name of the properties you will receive from the webhook.",
});
exports.WebhookHeaderItemSchema = typebox_1.Type.Object({
    key: typebox_1.Type.String(),
    value: typebox_1.Type.String(),
});
exports.WebhookBodyFormatSchema = (0, common_types_js_1.StringEnum)(["json", "form"], {
    description: "The format of data you recieve from the webhook. Accepted values: json | form",
    example: "json",
});
exports.WebhookMessagingTriggerEventSchema = (0, common_types_js_1.StringEnum)([
    "message_received",
    "message_read",
    "message_reaction",
]);
exports.WebhookMailTriggerEventSchema = (0, common_types_js_1.StringEnum)([
    "mail_sent",
    "mail_received",
]);
exports.WebhookMailTrackingTriggerEventSchema = (0, common_types_js_1.StringEnum)([
    "mail_opened",
    "mail_link_clicked",
]);
/**
 * Webhook Model
 */
exports.WebhookBaseSchema = typebox_1.Type.Object({
    id: common_types_js_1.UniqueIdSchema,
    account_ids: typebox_1.Type.Array(exports.WebhookAccountOptionSchema),
    enabled: typebox_1.Type.Boolean(),
    name: typebox_1.Type.Optional(typebox_1.Type.String()),
    request_url: typebox_1.Type.String(),
    format: exports.WebhookBodyFormatSchema,
    headers: typebox_1.Type.Array(exports.WebhookHeaderItemSchema),
    data: typebox_1.Type.Union([
        typebox_1.Type.Array(exports.WebhookDataItemSchema),
        typebox_1.Type.Array(exports.WebhookEmailDataItemSchema),
        typebox_1.Type.Array(exports.WebhookEmailTrackingDataItemSchema),
    ]),
    events: typebox_1.Type.Optional(typebox_1.Type.Array(typebox_1.Type.Union([
        exports.WebhookMessagingTriggerEventSchema,
        exports.WebhookMailTriggerEventSchema,
        exports.WebhookMailTrackingTriggerEventSchema,
    ]))),
});
exports.WebhookAutoSchema = typebox_1.Type.Composite([
    exports.WebhookBaseSchema,
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal("AUTO"),
    }),
]);
exports.WebhookTriggerSchema = typebox_1.Type.Composite([
    exports.WebhookBaseSchema,
    typebox_1.Type.Object({
        type: typebox_1.Type.Literal("TRIGGER"),
        trigger: exports.WebhookButtonSchema,
    }),
]);
exports.WebhookSchema = typebox_1.Type.Union([
    exports.WebhookAutoSchema,
    exports.WebhookTriggerSchema,
]);
