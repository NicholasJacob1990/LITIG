import { Static } from "@sinclair/typebox";
export declare const ChatTypeSchema: import("@sinclair/typebox").TEnum<{
    SINGLE: 0;
    GROUP: 1;
    CHANNEL: 2;
}>;
export declare const ChatFeaturesSchema: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"reactions">, import("@sinclair/typebox").TLiteral<"reply">]>;
export declare const ChatFolderSchema: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"INBOX">, import("@sinclair/typebox").TLiteral<"INBOX_LINKEDIN_CLASSIC">, import("@sinclair/typebox").TLiteral<"INBOX_LINKEDIN_RECRUITER">, import("@sinclair/typebox").TLiteral<"INBOX_LINKEDIN_SALES_NAVIGATOR">, import("@sinclair/typebox").TLiteral<"INBOX_LINKEDIN_ORGANIZATION">]>;
export type ChatFolder = Static<typeof ChatFolderSchema>;
/**
 * @todo Review that ChatSchema matches Chat definition from libs/core/src/Messaging/domain/Chat.ts
 *       It doesn't seem to handle the discriminated union around account_type
 *       in the same way.
 */
export declare const ChatSchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TString;
    account_id: import("@sinclair/typebox").TString;
    account_type: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"WHATSAPP">, import("@sinclair/typebox").TLiteral<"LINKEDIN">, import("@sinclair/typebox").TLiteral<"SLACK">, import("@sinclair/typebox").TLiteral<"TWITTER">, import("@sinclair/typebox").TLiteral<"MESSENGER">, import("@sinclair/typebox").TLiteral<"INSTAGRAM">, import("@sinclair/typebox").TLiteral<"TELEGRAM">]>;
    provider_id: import("@sinclair/typebox").TString;
    attendee_provider_id: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    name: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TString, import("@sinclair/typebox").TNull]>;
    type: import("@sinclair/typebox").TEnum<{
        SINGLE: 0;
        GROUP: 1;
        CHANNEL: 2;
    }>;
    timestamp: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TString, import("@sinclair/typebox").TNull]>;
    unread_count: import("@sinclair/typebox").TNumber;
    archived: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<0>, import("@sinclair/typebox").TLiteral<1>]>;
    muted_until: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<-1>, import("@sinclair/typebox").TString, import("@sinclair/typebox").TNull]>;
    read_only: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<0>, import("@sinclair/typebox").TLiteral<1>, import("@sinclair/typebox").TLiteral<2>]>;
    disabledFeatures: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TArray<import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"reactions">, import("@sinclair/typebox").TLiteral<"reply">]>>>;
    subject: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    organization_id: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    mailbox_id: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    content_type: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"inmail">, import("@sinclair/typebox").TLiteral<"sponsored">, import("@sinclair/typebox").TLiteral<"linkedin_offer">]>>;
    folder: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TArray<import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"INBOX">, import("@sinclair/typebox").TLiteral<"INBOX_LINKEDIN_CLASSIC">, import("@sinclair/typebox").TLiteral<"INBOX_LINKEDIN_RECRUITER">, import("@sinclair/typebox").TLiteral<"INBOX_LINKEDIN_SALES_NAVIGATOR">, import("@sinclair/typebox").TLiteral<"INBOX_LINKEDIN_ORGANIZATION">]>>>;
}>;
export type Chat = Static<typeof ChatSchema>;
