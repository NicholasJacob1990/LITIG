#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
LLM Enhanced Partnership Routes
===============================

Rotas espec√≠ficas para recomenda√ß√µes de parcerias aprimoradas com LLMs.
Integra-se ao sistema tradicional de parcerias com an√°lises inteligentes.
"""

from typing import List, Optional
from fastapi import APIRouter, Depends, HTTPException, Query
from fastapi.security import HTTPBearer
from sqlalchemy.ext.asyncio import AsyncSession
import os
from datetime import datetime

from ..dependencies.auth import get_current_user
from ..dependencies.database import get_async_db
from ..services.partnership_recommendation_service import (
    PartnershipRecommendationService,
    PartnershipRecommendation
)

router = APIRouter(prefix="/partnerships", tags=["Parcerias LLM Enhanced"])
security = HTTPBearer()


@router.get("/recommendations/enhanced/{lawyer_id}", 
            response_model=List[dict],
            summary="ü§ñ Recomenda√ß√µes de Parcerias com LLM")
async def get_enhanced_partnership_recommendations(
    lawyer_id: str,
    limit: int = Query(10, ge=1, le=20, description="N√∫mero de recomenda√ß√µes"),
    min_confidence: float = Query(0.6, ge=0.0, le=1.0, description="Confian√ßa m√≠nima"),
    exclude_same_firm: bool = Query(True, description="Excluir mesmo escrit√≥rio"),
    enable_llm: bool = Query(True, description="Ativar an√°lises LLM"),
    expand_search: bool = Query(False, description="üÜï Incluir perfis p√∫blicos via busca externa"),
    current_user: dict = Depends(get_current_user),
    db: AsyncSession = Depends(get_async_db)
):
    """
    ü§ñ **Recomenda√ß√µes de Parcerias Aprimoradas com LLM**
    
    Combina algoritmo tradicional de clustering com an√°lises LLM para:
    - An√°lise contextual de sinergia profissional
    - Avalia√ß√£o de compatibilidade de estilos de trabalho
    - Identifica√ß√£o de oportunidades estrat√©gicas
    - Explica√ß√µes inteligentes das recomenda√ß√µes
    
    **üÜï Modelo H√≠brido (expand_search=true):**
    - Combina advogados registrados na plataforma
    - Com perfis p√∫blicos encontrados via busca na web
    - Diferencia√ß√£o visual por `status` (verified vs public_profile)
    
    **Algoritmo H√≠brido:**
    - 70% Score tradicional (complementaridade de clusters)
    - 30% Score LLM (sinergia e compatibilidade)
    
    **Retorna:**
    Lista de recomenda√ß√µes com scores combinados e insights LLM.
    """
    
    # Verificar se LLM est√° habilitado no sistema
    llm_system_enabled = os.getenv("ENABLE_PARTNERSHIP_LLM", "false").lower() == "true"
    
    if not llm_system_enabled:
        raise HTTPException(
            status_code=501,
            detail="Sistema de parcerias LLM n√£o est√° habilitado. Configure ENABLE_PARTNERSHIP_LLM=true"
        )
    
    try:
        # Inicializar servi√ßo de recomenda√ß√µes
        recommendation_service = PartnershipRecommendationService(db)
        
        # Verificar se advogado existe
        if not await _lawyer_exists(db, lawyer_id):
            raise HTTPException(
                status_code=404,
                detail=f"Advogado {lawyer_id} n√£o encontrado"
            )
        
        # Buscar recomenda√ß√µes (j√° inclui LLM se habilitado no servi√ßo)
        recommendations = await recommendation_service.get_recommendations(
            lawyer_id=lawyer_id,
            limit=limit,
            min_confidence=min_confidence,
            exclude_same_firm=exclude_same_firm,
            expand_search=expand_search  # üÜï Par√¢metro de busca h√≠brida
        )
        
        if not recommendations:
            return {
                "message": "Nenhuma recomenda√ß√£o encontrada",
                "suggestions": [
                    "Reduza min_confidence para incluir mais candidatos",
                    "Verifique se o advogado possui clusters de especializa√ß√£o",
                    "Considere incluir advogados do mesmo escrit√≥rio (exclude_same_firm=false)"
                ]
            }
        
        # Formatar resposta com insights LLM
        formatted_recommendations = []
        
        for rec in recommendations:
            # Estrutura b√°sica da recomenda√ß√£o
            rec_dict = {
                "lawyer_id": rec.lawyer_id,
                "lawyer_name": rec.lawyer_name,
                "firm_name": rec.firm_name,
                "compatibility_clusters": rec.compatibility_clusters,
                "traditional_scores": {
                    "complementarity_score": round(rec.complementarity_score, 3),
                    "diversity_score": round(rec.diversity_score, 3),
                    "momentum_score": round(rec.momentum_score, 3),
                    "reputation_score": round(rec.reputation_score, 3),
                    "firm_synergy_score": round(rec.firm_synergy_score, 3)
                },
                "final_score": round(rec.final_score, 3),
                "recommendation_reason": rec.recommendation_reason,
                "firm_synergy_reason": rec.firm_synergy_reason,
                # üÜï Campos do modelo h√≠brido
                "status": rec.status,  # "verified" ou "public_profile"
                "invitation_id": rec.invitation_id,  # Para perfis convidados
                "profile_data": rec.profile_data  # Dados do perfil externo (se aplic√°vel)
            }
            
            # Adicionar insights LLM se dispon√≠veis
            if hasattr(rec, 'llm_enhanced') and rec.llm_enhanced and hasattr(rec, 'llm_insights'):
                insights = rec.llm_insights
                rec_dict["llm_analysis"] = {
                    "synergy_score": round(insights.synergy_score, 3),
                    "compatibility_factors": insights.compatibility_factors,
                    "strategic_opportunities": insights.strategic_opportunities,
                    "potential_challenges": insights.potential_challenges,
                    "collaboration_style_match": insights.collaboration_style_match,
                    "market_positioning_advantage": insights.market_positioning_advantage,
                    "client_value_proposition": insights.client_value_proposition,
                    "confidence_score": round(insights.confidence_score, 3),
                    "reasoning": insights.reasoning
                }
                rec_dict["algorithm_version"] = "hybrid_traditional_llm_v1.0"
            else:
                rec_dict["llm_analysis"] = None
                rec_dict["algorithm_version"] = "traditional_clustering_v2.0"
            
            formatted_recommendations.append(rec_dict)
        
        # üÜï Calcular estat√≠sticas do modelo h√≠brido
        internal_count = sum(1 for rec in recommendations if rec.status == "verified")
        external_count = sum(1 for rec in recommendations if rec.status == "public_profile")
        
        return {
            "lawyer_id": lawyer_id,
            "total_recommendations": len(formatted_recommendations),
            "algorithm_info": {
                "llm_enabled": llm_system_enabled and enable_llm,
                "traditional_weight": 0.7,
                "llm_weight": 0.3,
                "min_confidence": min_confidence,
                "exclude_same_firm": exclude_same_firm,
                "expand_search": expand_search,  # üÜï Busca h√≠brida habilitada
                "hybrid_model": expand_search  # üÜï Indica se est√° usando modelo h√≠brido
            },
            "recommendations": formatted_recommendations,
            "metadata": {
                "generated_at": f"{datetime.utcnow().isoformat()}Z",
                "system_version": "partnership_llm_enhanced_v1.0",
                # üÜï Estat√≠sticas do modelo h√≠brido
                "hybrid_stats": {
                    "internal_profiles": internal_count,
                    "external_profiles": external_count,
                    "hybrid_ratio": round(external_count / max(len(recommendations), 1), 2) if expand_search else 0.0
                }
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Erro interno ao gerar recomenda√ß√µes: {str(e)}"
        )


@router.get("/analysis/synergy/{lawyer_a_id}/{lawyer_b_id}",
            summary="üß† An√°lise LLM de Sinergia entre Advogados")
async def analyze_lawyer_synergy(
    lawyer_a_id: str,
    lawyer_b_id: str,
    collaboration_context: Optional[str] = Query(None, description="Contexto espec√≠fico da colabora√ß√£o"),
    current_user: dict = Depends(get_current_user),
    db: AsyncSession = Depends(get_async_db)
):
    """
    üß† **An√°lise LLM de Sinergia Profissional**
    
    Usa LLMs para an√°lise detalhada de compatibilidade entre dois advogados:
    - Complementaridade de especialidades
    - Compatibilidade de estilos de trabalho
    - Oportunidades estrat√©gicas
    - Desafios potenciais
    - Proposta de valor para clientes
    
    **Exemplo de contexto:**
    "Assessoria completa para startup em expans√£o internacional"
    """
    
    # Verificar se LLM est√° habilitado
    llm_enabled = os.getenv("ENABLE_PARTNERSHIP_LLM", "false").lower() == "true"
    
    if not llm_enabled:
        raise HTTPException(
            status_code=501,
            detail="An√°lises LLM n√£o est√£o habilitadas"
        )
    
    try:
        # Verificar se ambos advogados existem
        if not await _lawyer_exists(db, lawyer_a_id):
            raise HTTPException(status_code=404, detail=f"Advogado {lawyer_a_id} n√£o encontrado")
        
        if not await _lawyer_exists(db, lawyer_b_id):
            raise HTTPException(status_code=404, detail=f"Advogado {lawyer_b_id} n√£o encontrado")
        
        # Inicializar servi√ßos
        recommendation_service = PartnershipRecommendationService(db)
        
        if not recommendation_service.llm_enhancer:
            raise HTTPException(
                status_code=503,
                detail="Servi√ßo LLM n√£o est√° dispon√≠vel"
            )
        
        # Criar perfis para an√°lise
        profile_a = await recommendation_service._create_lawyer_profile_for_llm(lawyer_a_id)
        profile_b = await recommendation_service._create_lawyer_profile_for_llm(lawyer_b_id)
        
        if not profile_a or not profile_b:
            raise HTTPException(
                status_code=400,
                detail="N√£o foi poss√≠vel criar perfis completos para an√°lise"
            )
        
        # An√°lise LLM
        insights = await recommendation_service.llm_enhancer.analyze_partnership_synergy(
            profile_a, profile_b, collaboration_context
        )
        
        return {
            "lawyer_a": {
                "id": profile_a.lawyer_id,
                "name": profile_a.name,
                "firm": profile_a.firm_name,
                "specializations": profile_a.specialization_areas
            },
            "lawyer_b": {
                "id": profile_b.lawyer_id,
                "name": profile_b.name,
                "firm": profile_b.firm_name,
                "specializations": profile_b.specialization_areas
            },
            "collaboration_context": collaboration_context,
            "synergy_analysis": {
                "synergy_score": round(insights.synergy_score, 3),
                "compatibility_factors": insights.compatibility_factors,
                "strategic_opportunities": insights.strategic_opportunities,
                "potential_challenges": insights.potential_challenges,
                "collaboration_style_match": insights.collaboration_style_match,
                "market_positioning_advantage": insights.market_positioning_advantage,
                "client_value_proposition": insights.client_value_proposition,
                "confidence_score": round(insights.confidence_score, 3),
                "detailed_reasoning": insights.reasoning
            },
            "metadata": {
                "analysis_type": "llm_partnership_synergy",
                "generated_at": f"{datetime.utcnow().isoformat()}Z",
                "model_version": "partnership_llm_v1.0"
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Erro na an√°lise de sinergia: {str(e)}"
        )


async def _lawyer_exists(db: AsyncSession, lawyer_id: str) -> bool:
    """Verifica se advogado existe no banco."""
    from sqlalchemy import text
    
    query = text("SELECT 1 FROM lawyers WHERE id = :lawyer_id LIMIT 1")
    result = await db.execute(query, {"lawyer_id": lawyer_id})
    return result.fetchone() is not None 