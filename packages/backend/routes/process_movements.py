"""
Endpoints para obter movimenta√ß√µes detalhadas de processos via Escavador.
"""

import logging
from datetime import datetime
from typing import Any, Dict, List, Optional

from fastapi import APIRouter, Depends, HTTPException, Query

from dependencies.auth import get_current_user
from models.user import User
from services.escavador_integration import EscavadorClient

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/v1/process-movements", tags=["Process Movements"])

# Dependency
def get_escavador_client() -> EscavadorClient:
    """Retorna uma inst√¢ncia do cliente Escavador com a chave de API."""
    from config.base import ESCAVADOR_API_KEY
    if not ESCAVADOR_API_KEY:
        raise HTTPException(
            status_code=500, detail="ESCAVADOR_API_KEY n√£o est√° configurada no ambiente."
        )
    return EscavadorClient(api_key=ESCAVADOR_API_KEY)

class MovementClassifier:
    """Classifica movimenta√ß√µes processuais por tipo."""
    
    MOVEMENT_TYPES = {
        "PETICAO": {
            "keywords": ["peti√ß√£o", "peticao", "inicial", "contesta√ß√£o", "contestacao", "recurso", "apela√ß√£o", "apelacao"],
            "icon": "üìÑ",
            "color": "#3B82F6",
            "description": "Peti√ß√µes e documentos protocolados"
        },
        "DECISAO": {
            "keywords": ["decis√£o", "decisao", "senten√ßa", "sentenca", "ac√≥rd√£o", "acordao", "despacho"],
            "icon": "‚öñÔ∏è",
            "color": "#8B5CF6",
            "description": "Decis√µes judiciais"
        },
        "JUNTADA": {
            "keywords": ["juntada", "juntou", "anexou", "anexar", "documento"],
            "icon": "üìé",
            "color": "#10B981",
            "description": "Juntada de documentos"
        },
        "CITACAO": {
            "keywords": ["cita√ß√£o", "citacao", "intima√ß√£o", "intimacao", "notifica√ß√£o", "notificacao"],
            "icon": "üì®",
            "color": "#F59E0B",
            "description": "Cita√ß√µes e intima√ß√µes"
        },
        "AUDIENCIA": {
            "keywords": ["audi√™ncia", "audiencia", "sess√£o", "sessao", "concilia√ß√£o", "conciliacao"],
            "icon": "üèõÔ∏è",
            "color": "#EF4444",
            "description": "Audi√™ncias e sess√µes"
        },
        "CONCLUSAO": {
            "keywords": ["conclus√£o", "conclusao", "conclusos", "juiz", "relator"],
            "icon": "üìã",
            "color": "#6B7280",
            "description": "Conclus√£o para decis√£o"
        },
        "OUTROS": {
            "keywords": [],
            "icon": "üìå",
            "color": "#9CA3AF",
            "description": "Outras movimenta√ß√µes"
        }
    }
    
    def classify_movement(self, content: str) -> Dict[str, Any]:
        """Classifica uma movimenta√ß√£o pelo seu conte√∫do."""
        content_lower = content.lower()
        
        for movement_type, config in self.MOVEMENT_TYPES.items():
            if movement_type == "OUTROS":
                continue
                
            for keyword in config["keywords"]:
                if keyword in content_lower:
                    return {
                        "type": movement_type,
                        "icon": config["icon"],
                        "color": config["color"],
                        "description": config["description"]
                    }
        
        # Default para "OUTROS"
        outros_config = self.MOVEMENT_TYPES["OUTROS"]
        return {
            "type": "OUTROS",
            "icon": outros_config["icon"],
            "color": outros_config["color"],
            "description": outros_config["description"]
        }

@router.get(
    "/{cnj}/detailed",
    summary="Obter Movimenta√ß√µes Detalhadas de um Processo",
    description="Busca todas as movimenta√ß√µes de um processo pelo CNJ, classificadas por tipo para exibi√ß√£o em linha do tempo.",
    response_model=Dict[str, Any],
)
async def get_detailed_process_movements(
    cnj: str,
    limit: Optional[int] = Query(default=50, description="Limite de movimenta√ß√µes retornadas"),
    current_user: User = Depends(get_current_user),
    escavador_client: EscavadorClient = Depends(get_escavador_client),
):
    """
    Endpoint para buscar movimenta√ß√µes detalhadas de um processo espec√≠fico.
    
    Retorna dados formatados para exibi√ß√£o em linha do tempo no frontend,
    incluindo classifica√ß√£o por tipo de movimenta√ß√£o.
    """
    try:
        movements_data = await escavador_client.get_detailed_process_movements(cnj, limit)
        return movements_data
    except HTTPException as e:
        raise e
    except Exception as e:
        logger.error(f"Erro inesperado ao buscar movimenta√ß√µes do processo {cnj}: {e}")
        raise HTTPException(status_code=500, detail="Erro interno no servidor.")

@router.get(
    "/{cnj}/summary",
    summary="Obter Resumo do Status do Processo",
    description="Retorna um resumo formatado do status atual do processo para exibi√ß√£o no frontend.",
    response_model=Dict[str, Any],
)
async def get_process_status_summary(
    cnj: str,
    current_user: User = Depends(get_current_user),
    escavador_client: EscavadorClient = Depends(get_escavador_client),
):
    """
    Endpoint para obter resumo do status atual do processo.
    
    Retorna dados no formato esperado pelo ProcessStatusSection do frontend.
    """
    try:
        status_data = await escavador_client.get_process_status_summary(cnj)
        return status_data
    except HTTPException as e:
        raise e
    except Exception as e:
        logger.error(f"Erro inesperado ao buscar status do processo {cnj}: {e}")
        raise HTTPException(status_code=500, detail="Erro interno no servidor.") 
Endpoints para obter movimenta√ß√µes detalhadas de processos via Escavador.
"""

import logging
from datetime import datetime
from typing import Any, Dict, List, Optional

from fastapi import APIRouter, Depends, HTTPException, Query

from dependencies.auth import get_current_user
from models.user import User
from services.escavador_integration import EscavadorClient

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/v1/process-movements", tags=["Process Movements"])

# Dependency
def get_escavador_client() -> EscavadorClient:
    """Retorna uma inst√¢ncia do cliente Escavador com a chave de API."""
    from config.base import ESCAVADOR_API_KEY
    if not ESCAVADOR_API_KEY:
        raise HTTPException(
            status_code=500, detail="ESCAVADOR_API_KEY n√£o est√° configurada no ambiente."
        )
    return EscavadorClient(api_key=ESCAVADOR_API_KEY)

class MovementClassifier:
    """Classifica movimenta√ß√µes processuais por tipo."""
    
    MOVEMENT_TYPES = {
        "PETICAO": {
            "keywords": ["peti√ß√£o", "peticao", "inicial", "contesta√ß√£o", "contestacao", "recurso", "apela√ß√£o", "apelacao"],
            "icon": "üìÑ",
            "color": "#3B82F6",
            "description": "Peti√ß√µes e documentos protocolados"
        },
        "DECISAO": {
            "keywords": ["decis√£o", "decisao", "senten√ßa", "sentenca", "ac√≥rd√£o", "acordao", "despacho"],
            "icon": "‚öñÔ∏è",
            "color": "#8B5CF6",
            "description": "Decis√µes judiciais"
        },
        "JUNTADA": {
            "keywords": ["juntada", "juntou", "anexou", "anexar", "documento"],
            "icon": "üìé",
            "color": "#10B981",
            "description": "Juntada de documentos"
        },
        "CITACAO": {
            "keywords": ["cita√ß√£o", "citacao", "intima√ß√£o", "intimacao", "notifica√ß√£o", "notificacao"],
            "icon": "üì®",
            "color": "#F59E0B",
            "description": "Cita√ß√µes e intima√ß√µes"
        },
        "AUDIENCIA": {
            "keywords": ["audi√™ncia", "audiencia", "sess√£o", "sessao", "concilia√ß√£o", "conciliacao"],
            "icon": "üèõÔ∏è",
            "color": "#EF4444",
            "description": "Audi√™ncias e sess√µes"
        },
        "CONCLUSAO": {
            "keywords": ["conclus√£o", "conclusao", "conclusos", "juiz", "relator"],
            "icon": "üìã",
            "color": "#6B7280",
            "description": "Conclus√£o para decis√£o"
        },
        "OUTROS": {
            "keywords": [],
            "icon": "üìå",
            "color": "#9CA3AF",
            "description": "Outras movimenta√ß√µes"
        }
    }
    
    def classify_movement(self, content: str) -> Dict[str, Any]:
        """Classifica uma movimenta√ß√£o pelo seu conte√∫do."""
        content_lower = content.lower()
        
        for movement_type, config in self.MOVEMENT_TYPES.items():
            if movement_type == "OUTROS":
                continue
                
            for keyword in config["keywords"]:
                if keyword in content_lower:
                    return {
                        "type": movement_type,
                        "icon": config["icon"],
                        "color": config["color"],
                        "description": config["description"]
                    }
        
        # Default para "OUTROS"
        outros_config = self.MOVEMENT_TYPES["OUTROS"]
        return {
            "type": "OUTROS",
            "icon": outros_config["icon"],
            "color": outros_config["color"],
            "description": outros_config["description"]
        }

@router.get(
    "/{cnj}/detailed",
    summary="Obter Movimenta√ß√µes Detalhadas de um Processo",
    description="Busca todas as movimenta√ß√µes de um processo pelo CNJ, classificadas por tipo para exibi√ß√£o em linha do tempo.",
    response_model=Dict[str, Any],
)
async def get_detailed_process_movements(
    cnj: str,
    limit: Optional[int] = Query(default=50, description="Limite de movimenta√ß√µes retornadas"),
    current_user: User = Depends(get_current_user),
    escavador_client: EscavadorClient = Depends(get_escavador_client),
):
    """
    Endpoint para buscar movimenta√ß√µes detalhadas de um processo espec√≠fico.
    
    Retorna dados formatados para exibi√ß√£o em linha do tempo no frontend,
    incluindo classifica√ß√£o por tipo de movimenta√ß√£o.
    """
    try:
        movements_data = await escavador_client.get_detailed_process_movements(cnj, limit)
        return movements_data
    except HTTPException as e:
        raise e
    except Exception as e:
        logger.error(f"Erro inesperado ao buscar movimenta√ß√µes do processo {cnj}: {e}")
        raise HTTPException(status_code=500, detail="Erro interno no servidor.")

@router.get(
    "/{cnj}/summary",
    summary="Obter Resumo do Status do Processo",
    description="Retorna um resumo formatado do status atual do processo para exibi√ß√£o no frontend.",
    response_model=Dict[str, Any],
)
async def get_process_status_summary(
    cnj: str,
    current_user: User = Depends(get_current_user),
    escavador_client: EscavadorClient = Depends(get_escavador_client),
):
    """
    Endpoint para obter resumo do status atual do processo.
    
    Retorna dados no formato esperado pelo ProcessStatusSection do frontend.
    """
    try:
        status_data = await escavador_client.get_process_status_summary(cnj)
        return status_data
    except HTTPException as e:
        raise e
    except Exception as e:
        logger.error(f"Erro inesperado ao buscar status do processo {cnj}: {e}")
        raise HTTPException(status_code=500, detail="Erro interno no servidor.") 
Endpoints para obter movimenta√ß√µes detalhadas de processos via Escavador.
"""

import logging
from datetime import datetime
from typing import Any, Dict, List, Optional

from fastapi import APIRouter, Depends, HTTPException, Query

from dependencies.auth import get_current_user
from models.user import User
from services.escavador_integration import EscavadorClient

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/v1/process-movements", tags=["Process Movements"])

# Dependency
def get_escavador_client() -> EscavadorClient:
    """Retorna uma inst√¢ncia do cliente Escavador com a chave de API."""
    from config.base import ESCAVADOR_API_KEY
    if not ESCAVADOR_API_KEY:
        raise HTTPException(
            status_code=500, detail="ESCAVADOR_API_KEY n√£o est√° configurada no ambiente."
        )
    return EscavadorClient(api_key=ESCAVADOR_API_KEY)

class MovementClassifier:
    """Classifica movimenta√ß√µes processuais por tipo."""
    
    MOVEMENT_TYPES = {
        "PETICAO": {
            "keywords": ["peti√ß√£o", "peticao", "inicial", "contesta√ß√£o", "contestacao", "recurso", "apela√ß√£o", "apelacao"],
            "icon": "üìÑ",
            "color": "#3B82F6",
            "description": "Peti√ß√µes e documentos protocolados"
        },
        "DECISAO": {
            "keywords": ["decis√£o", "decisao", "senten√ßa", "sentenca", "ac√≥rd√£o", "acordao", "despacho"],
            "icon": "‚öñÔ∏è",
            "color": "#8B5CF6",
            "description": "Decis√µes judiciais"
        },
        "JUNTADA": {
            "keywords": ["juntada", "juntou", "anexou", "anexar", "documento"],
            "icon": "üìé",
            "color": "#10B981",
            "description": "Juntada de documentos"
        },
        "CITACAO": {
            "keywords": ["cita√ß√£o", "citacao", "intima√ß√£o", "intimacao", "notifica√ß√£o", "notificacao"],
            "icon": "üì®",
            "color": "#F59E0B",
            "description": "Cita√ß√µes e intima√ß√µes"
        },
        "AUDIENCIA": {
            "keywords": ["audi√™ncia", "audiencia", "sess√£o", "sessao", "concilia√ß√£o", "conciliacao"],
            "icon": "üèõÔ∏è",
            "color": "#EF4444",
            "description": "Audi√™ncias e sess√µes"
        },
        "CONCLUSAO": {
            "keywords": ["conclus√£o", "conclusao", "conclusos", "juiz", "relator"],
            "icon": "üìã",
            "color": "#6B7280",
            "description": "Conclus√£o para decis√£o"
        },
        "OUTROS": {
            "keywords": [],
            "icon": "üìå",
            "color": "#9CA3AF",
            "description": "Outras movimenta√ß√µes"
        }
    }
    
    def classify_movement(self, content: str) -> Dict[str, Any]:
        """Classifica uma movimenta√ß√£o pelo seu conte√∫do."""
        content_lower = content.lower()
        
        for movement_type, config in self.MOVEMENT_TYPES.items():
            if movement_type == "OUTROS":
                continue
                
            for keyword in config["keywords"]:
                if keyword in content_lower:
                    return {
                        "type": movement_type,
                        "icon": config["icon"],
                        "color": config["color"],
                        "description": config["description"]
                    }
        
        # Default para "OUTROS"
        outros_config = self.MOVEMENT_TYPES["OUTROS"]
        return {
            "type": "OUTROS",
            "icon": outros_config["icon"],
            "color": outros_config["color"],
            "description": outros_config["description"]
        }

@router.get(
    "/{cnj}/detailed",
    summary="Obter Movimenta√ß√µes Detalhadas de um Processo",
    description="Busca todas as movimenta√ß√µes de um processo pelo CNJ, classificadas por tipo para exibi√ß√£o em linha do tempo.",
    response_model=Dict[str, Any],
)
async def get_detailed_process_movements(
    cnj: str,
    limit: Optional[int] = Query(default=50, description="Limite de movimenta√ß√µes retornadas"),
    current_user: User = Depends(get_current_user),
    escavador_client: EscavadorClient = Depends(get_escavador_client),
):
    """
    Endpoint para buscar movimenta√ß√µes detalhadas de um processo espec√≠fico.
    
    Retorna dados formatados para exibi√ß√£o em linha do tempo no frontend,
    incluindo classifica√ß√£o por tipo de movimenta√ß√£o.
    """
    try:
        movements_data = await escavador_client.get_detailed_process_movements(cnj, limit)
        return movements_data
    except HTTPException as e:
        raise e
    except Exception as e:
        logger.error(f"Erro inesperado ao buscar movimenta√ß√µes do processo {cnj}: {e}")
        raise HTTPException(status_code=500, detail="Erro interno no servidor.")

@router.get(
    "/{cnj}/summary",
    summary="Obter Resumo do Status do Processo",
    description="Retorna um resumo formatado do status atual do processo para exibi√ß√£o no frontend.",
    response_model=Dict[str, Any],
)
async def get_process_status_summary(
    cnj: str,
    current_user: User = Depends(get_current_user),
    escavador_client: EscavadorClient = Depends(get_escavador_client),
):
    """
    Endpoint para obter resumo do status atual do processo.
    
    Retorna dados no formato esperado pelo ProcessStatusSection do frontend.
    """
    try:
        status_data = await escavador_client.get_process_status_summary(cnj)
        return status_data
    except HTTPException as e:
        raise e
    except Exception as e:
        logger.error(f"Erro inesperado ao buscar status do processo {cnj}: {e}")
        raise HTTPException(status_code=500, detail="Erro interno no servidor.") 