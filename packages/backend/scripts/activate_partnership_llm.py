#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Ativa√ß√£o do Sistema de Parcerias LLM Enhanced
=============================================

Script para testar e ativar o sistema de recomenda√ß√µes de parcerias
aprimorado com LLMs (Gemini, Claude, OpenAI).
"""

import asyncio
import os
import sys
import json
from datetime import datetime
from pathlib import Path

# Adicionar o diret√≥rio pai ao Python path
sys.path.append(str(Path(__file__).parent.parent))

def test_llm_connectivity():
    """Testa conectividade com os LLMs dispon√≠veis."""
    print("üîç Testando conectividade com LLMs...")
    
    results = {
        "gemini": False,
        "claude": False,
        "openai": False,
        "errors": []
    }
    
    # Testar Gemini
    try:
        import google.generativeai as genai
        gemini_key = os.getenv("GEMINI_API_KEY")
        if gemini_key:
            genai.configure(api_key=gemini_key)
            print("‚úÖ Gemini: Configurado e dispon√≠vel")
            results["gemini"] = True
        else:
            print("‚ö†Ô∏è  Gemini: GEMINI_API_KEY n√£o encontrada")
            results["errors"].append("GEMINI_API_KEY missing")
    except ImportError:
        print("‚ùå Gemini: google-generativeai n√£o instalado")
        results["errors"].append("google-generativeai package missing")
    except Exception as e:
        print(f"‚ùå Gemini: Erro - {e}")
        results["errors"].append(f"Gemini error: {e}")
    
    # Testar Anthropic Claude
    try:
        import anthropic
        claude_key = os.getenv("ANTHROPIC_API_KEY")
        if claude_key:
            print("‚úÖ Claude: Configurado e dispon√≠vel")
            results["claude"] = True
        else:
            print("‚ö†Ô∏è  Claude: ANTHROPIC_API_KEY n√£o encontrada")
            results["errors"].append("ANTHROPIC_API_KEY missing")
    except ImportError:
        print("‚ùå Claude: anthropic n√£o instalado")
        results["errors"].append("anthropic package missing")
    except Exception as e:
        print(f"‚ùå Claude: Erro - {e}")
        results["errors"].append(f"Claude error: {e}")
    
    # Testar OpenAI
    try:
        import openai
        openai_key = os.getenv("OPENAI_API_KEY")
        if openai_key:
            print("‚úÖ OpenAI: Configurado e dispon√≠vel")
            results["openai"] = True
        else:
            print("‚ö†Ô∏è  OpenAI: OPENAI_API_KEY n√£o encontrada")
            results["errors"].append("OPENAI_API_KEY missing")
    except ImportError:
        print("‚ùå OpenAI: openai n√£o instalado")
        results["errors"].append("openai package missing")
    except Exception as e:
        print(f"‚ùå OpenAI: Erro - {e}")
        results["errors"].append(f"OpenAI error: {e}")
    
    return results


async def test_partnership_llm_service():
    """Testa o servi√ßo de parcerias LLM com dados de exemplo."""
    print("\nü§ñ Testando Partnership LLM Enhancement Service...")
    
    try:
        from services.partnership_llm_enhancement_service import (
            PartnershipLLMEnhancementService,
            LawyerProfileForPartnership
        )
        
        # Criar inst√¢ncia do servi√ßo
        llm_service = PartnershipLLMEnhancementService()
        
        # Criar perfis de teste
        lawyer_a = LawyerProfileForPartnership(
            lawyer_id="TEST_001",
            name="Ana Silva",
            firm_name="Silva & Associados",
            experience_years=8,
            specialization_areas=["Direito Empresarial", "Startups", "Fintech"],
            recent_cases_summary="Consultoria jur√≠dica para fintech em rodada s√©rie A",
            communication_style="assertiva e t√©cnica",
            collaboration_history=["Parcerias em M&A", "Joint ventures"],
            market_reputation="emergente em fintech",
            client_types=["startups", "scale-ups", "fintechs"],
            fee_structure_style="competitive",
            geographic_focus=["S√£o Paulo", "Rio de Janeiro"]
        )
        
        lawyer_b = LawyerProfileForPartnership(
            lawyer_id="TEST_002",
            name="Carlos Santos",
            firm_name="Santos Legal",
            experience_years=15,
            specialization_areas=["Direito Tribut√°rio", "Compliance", "Internacional"],
            recent_cases_summary="Reestrutura√ß√£o tribut√°ria para multinacional",
            communication_style="conservador e detalhista",
            collaboration_history=["Assessoria fiscal complexa"],
            market_reputation="especialista s√™nior",
            client_types=["multinacionais", "empresas de m√©dio porte"],
            fee_structure_style="premium",
            geographic_focus=["S√£o Paulo", "Bras√≠lia"]
        )
        
        # Testar an√°lise de sinergia
        insights = await llm_service.analyze_partnership_synergy(
            lawyer_a, 
            lawyer_b, 
            "Assessoria completa para startup brasileira expandindo para mercados internacionais"
        )
        
        print(f"‚úÖ An√°lise LLM completa!")
        print(f"   üìä Sinergia Score: {insights.synergy_score:.2f}")
        print(f"   ü§ù Compatibilidade: {insights.collaboration_style_match}")
        print(f"   üéØ Confian√ßa: {insights.confidence_score:.2f}")
        print(f"   üí° Fatores: {len(insights.compatibility_factors)} identificados")
        print(f"   üöÄ Oportunidades: {len(insights.strategic_opportunities)} mapeadas")
        
        if insights.strategic_opportunities:
            print(f"   üìà Primeira oportunidade: {insights.strategic_opportunities[0]}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste do servi√ßo LLM: {e}")
        return False


def update_env_file():
    """Atualiza o arquivo .env para ativar LLM de parcerias."""
    print("\nüìù Atualizando arquivo .env...")
    
    env_path = Path(".env")
    
    # Ler arquivo atual ou criar se n√£o existir
    env_content = ""
    if env_path.exists():
        with open(env_path, 'r') as f:
            env_content = f.read()
    
    # Verificar se j√° est√° configurado
    if "ENABLE_PARTNERSHIP_LLM=true" in env_content:
        print("‚úÖ ENABLE_PARTNERSHIP_LLM j√° est√° ativo")
        return True
    
    # Adicionar ou atualizar configura√ß√£o
    lines = env_content.split('\n')
    updated = False
    
    for i, line in enumerate(lines):
        if line.startswith('ENABLE_PARTNERSHIP_LLM='):
            lines[i] = 'ENABLE_PARTNERSHIP_LLM=true'
            updated = True
            break
    
    if not updated:
        # Adicionar nova configura√ß√£o
        if env_content and not env_content.endswith('\n'):
            env_content += '\n'
        
        env_content += '''
# ============================================
# LLM ENHANCED PARTNERSHIPS CONFIGURATION
# ============================================

# Ativar sistema de parcerias aprimorado com LLMs
ENABLE_PARTNERSHIP_LLM=true
'''
        
        with open(env_path, 'w') as f:
            f.write(env_content)
        
        print("‚úÖ Configura√ß√£o ENABLE_PARTNERSHIP_LLM=true adicionada ao .env")
        return True
    else:
        # Atualizar arquivo existente
        with open(env_path, 'w') as f:
            f.write('\n'.join(lines))
        
        print("‚úÖ Configura√ß√£o ENABLE_PARTNERSHIP_LLM atualizada para true")
        return True


def generate_activation_report(llm_results, service_test_ok):
    """Gera relat√≥rio de ativa√ß√£o."""
    report = {
        "activation_timestamp": datetime.utcnow().isoformat(),
        "system": "Partnership LLM Enhanced",
        "version": "v1.0",
        "llm_connectivity": llm_results,
        "service_test": {
            "partnership_llm_service": service_test_ok
        },
        "status": "activated" if service_test_ok else "partial_activation",
        "available_llms": [llm for llm, available in llm_results.items() if available and llm != "errors"],
        "recommendations": []
    }
    
    # Adicionar recomenda√ß√µes baseadas nos resultados
    if not any(llm_results[llm] for llm in ["gemini", "claude", "openai"]):
        report["recommendations"].append("Configure ao menos uma API key de LLM para an√°lises avan√ßadas")
    
    if llm_results["errors"]:
        report["recommendations"].extend([
            f"Resolver: {error}" for error in llm_results["errors"]
        ])
    
    if service_test_ok:
        report["recommendations"].append("Sistema pronto para uso em produ√ß√£o")
    
    # Salvar relat√≥rio
    report_path = Path("partnership_llm_activation_report.json")
    with open(report_path, 'w') as f:
        json.dump(report, f, indent=2)
    
    return report


async def main():
    """Fun√ß√£o principal de ativa√ß√£o."""
    print("üöÄ ATIVA√á√ÉO DO SISTEMA DE PARCERIAS LLM ENHANCED")
    print("=" * 60)
    
    # 1. Testar conectividade com LLMs
    llm_results = test_llm_connectivity()
    
    # 2. Testar servi√ßo de parcerias LLM
    service_ok = await test_partnership_llm_service()
    
    # 3. Atualizar .env
    env_updated = update_env_file()
    
    # 4. Gerar relat√≥rio
    report = generate_activation_report(llm_results, service_ok)
    
    # 5. Resumo final
    print("\n" + "=" * 60)
    print("üìã RESUMO DA ATIVA√á√ÉO")
    print("=" * 60)
    
    llm_count = sum(1 for llm in ["gemini", "claude", "openai"] if llm_results[llm])
    print(f"ü§ñ LLMs dispon√≠veis: {llm_count}/3")
    
    if llm_results["gemini"]:
        print("   ‚úÖ Gemini Pro (Google)")
    if llm_results["claude"]:
        print("   ‚úÖ Claude 3.5 Sonnet (Anthropic)")
    if llm_results["openai"]:
        print("   ‚úÖ GPT-4o (OpenAI)")
    
    print(f"üîß Servi√ßo LLM: {'‚úÖ Funcionando' if service_ok else '‚ùå Com problemas'}")
    print(f"üìù Arquivo .env: {'‚úÖ Atualizado' if env_updated else '‚ùå Erro'}")
    
    print(f"\nüìä Status: {report['status'].upper()}")
    
    if report["recommendations"]:
        print("\nüí° Recomenda√ß√µes:")
        for rec in report["recommendations"]:
            print(f"   ‚Ä¢ {rec}")
    
    print(f"\nüìÑ Relat√≥rio salvo: partnership_llm_activation_report.json")
    
    if service_ok and llm_count > 0:
        print("\nüéâ SISTEMA DE PARCERIAS LLM ATIVADO COM SUCESSO!")
        print("\nPr√≥ximos passos:")
        print("1. Reinicie o servidor FastAPI")
        print("2. Teste o endpoint: GET /partnerships/recommendations/enhanced/{lawyer_id}")
        print("3. Monitore logs para an√°lises LLM")
    else:
        print("\n‚ö†Ô∏è  ATIVA√á√ÉO PARCIAL - Verifique recomenda√ß√µes acima")


if __name__ == "__main__":
    # Carregar vari√°veis de ambiente se dispon√≠vel
    try:
        from dotenv import load_dotenv
        load_dotenv()
    except ImportError:
        print("‚ÑπÔ∏è  python-dotenv n√£o dispon√≠vel - usando vari√°veis de ambiente do sistema")
    
    asyncio.run(main()) 
 