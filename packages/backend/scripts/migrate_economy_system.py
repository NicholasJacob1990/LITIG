#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
scripts/migrate_economy_system.py

Script para executar migra√ß√µes do sistema de economia de API.
Migra do sistema Supabase SQL para Alembic migrations.
"""

import asyncio
import logging
import os
import sys
from pathlib import Path

# Adicionar backend ao path
sys.path.insert(0, str(Path(__file__).parent.parent))

from alembic import command
from alembic.config import Config
from config.database import get_database

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class EconomySystemMigrator:
    """Migrador do sistema de economia de API."""
    
    def __init__(self):
        self.backend_dir = Path(__file__).parent.parent
        self.alembic_cfg = Config(str(self.backend_dir / "alembic.ini"))
        
    async def run_full_migration(self):
        """Executa migra√ß√£o completa do sistema de economia."""
        logger.info("üöÄ Iniciando migra√ß√£o completa do sistema de economia")
        
        try:
            # 1. Verificar conex√£o com banco
            await self._check_database_connection()
            
            # 2. Executar migra√ß√µes SQL diretamente (Supabase style)
            await self._execute_supabase_migrations()
            
            # 3. Executar migra√ß√µes Alembic
            await self._execute_alembic_migrations()
            
            # 4. Verificar integridade do sistema
            await self._verify_system_integrity()
            
            logger.info("‚úÖ Migra√ß√£o completa do sistema de economia conclu√≠da")
            
        except Exception as e:
            logger.error(f"‚ùå Erro na migra√ß√£o: {e}")
            raise
    
    async def _check_database_connection(self):
        """Verifica conex√£o com o banco de dados."""
        logger.info("üîç Verificando conex√£o com banco de dados")
        
        try:
            async with get_database() as conn:
                result = await conn.fetchval("SELECT 1")
                if result == 1:
                    logger.info("‚úÖ Conex√£o com banco de dados OK")
                else:
                    raise Exception("Resposta inesperada do banco")
                    
        except Exception as e:
            logger.error(f"‚ùå Erro de conex√£o: {e}")
            raise
    
    async def _execute_supabase_migrations(self):
        """Executa migra√ß√µes SQL do Supabase."""
        logger.info("üìÑ Executando migra√ß√µes SQL do sistema de economia")
        
        migration_files = [
            "supabase/migrations/20250129000000_create_process_movements_cache.sql",
            "supabase/migrations/20250129000001_create_5_year_archive_system.sql"
        ]
        
        async with get_database() as conn:
            for migration_file in migration_files:
                file_path = self.backend_dir / migration_file
                
                if file_path.exists():
                    logger.info(f"üìÑ Executando: {migration_file}")
                    
                    try:
                        # Ler e executar SQL
                        sql_content = file_path.read_text(encoding='utf-8')
                        
                        # Dividir em statements individuais (separados por ponto e v√≠rgula)
                        statements = [stmt.strip() for stmt in sql_content.split(';') if stmt.strip()]
                        
                        for i, statement in enumerate(statements):
                            if statement:
                                try:
                                    await conn.execute(statement)
                                    logger.debug(f"  ‚úÖ Statement {i+1}/{len(statements)} executado")
                                except Exception as e:
                                    # Ignorar erros de objetos j√° existentes
                                    if any(msg in str(e).lower() for msg in [
                                        'already exists', 'j√° existe', 'duplicate'
                                    ]):
                                        logger.debug(f"  ‚ö†Ô∏è Objeto j√° existe (ignorando): {e}")
                                    else:
                                        logger.warning(f"  ‚ùå Erro no statement {i+1}: {e}")
                                        # N√£o falhar por statements individuais
                        
                        logger.info(f"‚úÖ Migra√ß√£o {migration_file} conclu√≠da")
                        
                    except Exception as e:
                        logger.error(f"‚ùå Erro na migra√ß√£o {migration_file}: {e}")
                        # Continuar com pr√≥ximas migra√ß√µes
                        
                else:
                    logger.warning(f"‚ö†Ô∏è Arquivo n√£o encontrado: {migration_file}")
    
    async def _execute_alembic_migrations(self):
        """Executa migra√ß√µes Alembic se existirem."""
        logger.info("üîß Verificando migra√ß√µes Alembic")
        
        try:
            # Verificar se h√° migra√ß√µes pendentes
            versions_dir = self.backend_dir / "alembic" / "versions"
            if versions_dir.exists() and list(versions_dir.glob("*.py")):
                logger.info("üì¶ Executando migra√ß√µes Alembic")
                command.upgrade(self.alembic_cfg, "head")
                logger.info("‚úÖ Migra√ß√µes Alembic conclu√≠das")
            else:
                logger.info("‚ÑπÔ∏è Nenhuma migra√ß√£o Alembic pendente")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro nas migra√ß√µes Alembic (continuando): {e}")
    
    async def _verify_system_integrity(self):
        """Verifica integridade do sistema ap√≥s migra√ß√£o."""
        logger.info("üîç Verificando integridade do sistema")
        
        async with get_database() as conn:
            # Verificar tabelas cr√≠ticas
            critical_tables = [
                'process_movements',
                'process_status_cache', 
                'process_optimization_config',
                'process_movements_archive',
                'api_economy_metrics'
            ]
            
            for table in critical_tables:
                try:
                    result = await conn.fetchval(
                        f"SELECT COUNT(*) FROM information_schema.tables WHERE table_name = '{table}'"
                    )
                    if result > 0:
                        logger.info(f"  ‚úÖ Tabela {table} existe")
                    else:
                        logger.warning(f"  ‚ö†Ô∏è Tabela {table} n√£o encontrada")
                        
                except Exception as e:
                    logger.error(f"  ‚ùå Erro verificando tabela {table}: {e}")
            
            # Verificar indexes cr√≠ticos
            try:
                index_check = await conn.fetchval(
                    """
                    SELECT COUNT(*) FROM pg_indexes 
                    WHERE tablename IN ('process_movements', 'process_optimization_config')
                    """
                )
                logger.info(f"  ‚úÖ {index_check} √≠ndices encontrados")
                
            except Exception as e:
                logger.warning(f"  ‚ö†Ô∏è Erro verificando √≠ndices: {e}")
            
            # Verificar fun√ß√µes SQL
            try:
                function_check = await conn.fetchval(
                    """
                    SELECT COUNT(*) FROM pg_proc 
                    WHERE proname IN ('clean_expired_process_cache', 'archive_old_movements_compressed')
                    """
                )
                logger.info(f"  ‚úÖ {function_check} fun√ß√µes SQL encontradas")
                
            except Exception as e:
                logger.warning(f"  ‚ö†Ô∏è Erro verificando fun√ß√µes: {e}")
    
    async def create_test_data(self):
        """Cria dados de teste para validar o sistema."""
        logger.info("üß™ Criando dados de teste")
        
        async with get_database() as conn:
            try:
                # Inserir dados de teste na configura√ß√£o
                test_config = """
                    INSERT INTO process_optimization_config (
                        cnj, detected_phase, process_area, access_pattern,
                        redis_ttl_seconds, db_ttl_seconds, access_count
                    ) VALUES (
                        '1234567-89.2024.1.23.0001',
                        'instrutoria',
                        'trabalhista',
                        'weekly',
                        3600,
                        86400,
                        5
                    ) ON CONFLICT (cnj) DO NOTHING
                """
                await conn.execute(test_config)
                
                # Inserir m√©tricas de economia de teste
                test_metrics = """
                    INSERT INTO api_economy_metrics (
                        date_recorded, cache_hit_rate, economy_percentage, daily_savings
                    ) VALUES (
                        CURRENT_DATE, 95.5, 92.3, 45.67
                    ) ON CONFLICT (date_recorded) DO NOTHING
                """
                await conn.execute(test_metrics)
                
                logger.info("‚úÖ Dados de teste criados")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erro criando dados de teste: {e}")

async def main():
    """Fun√ß√£o principal."""
    migrator = EconomySystemMigrator()
    
    try:
        # Executar migra√ß√£o completa
        await migrator.run_full_migration()
        
        # Criar dados de teste se solicitado
        if "--test-data" in sys.argv:
            await migrator.create_test_data()
        
        print("\n" + "="*60)
        print("üéâ SISTEMA DE ECONOMIA DE API MIGRADO COM SUCESSO!")
        print("="*60)
        print("")
        print("üìä Pr√≥ximos passos:")
        print("  1. Verificar dashboard admin: /api/admin/economy/dashboard/summary")
        print("  2. Monitorar m√©tricas: /api/admin/economy/metrics/historical")
        print("  3. Iniciar job de otimiza√ß√£o: python jobs/economic_optimization_job.py")
        print("  4. Treinar modelos ML: python services/predictive_cache_ml_service.py")
        print("")
        print("üí∞ Economia esperada: 95%+ das chamadas API")
        print("üöÄ Sistema funcionando offline: 99%+ do tempo")
        print("")
        
    except Exception as e:
        print(f"\n‚ùå ERRO NA MIGRA√á√ÉO: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 
# -*- coding: utf-8 -*-
"""
scripts/migrate_economy_system.py

Script para executar migra√ß√µes do sistema de economia de API.
Migra do sistema Supabase SQL para Alembic migrations.
"""

import asyncio
import logging
import os
import sys
from pathlib import Path

# Adicionar backend ao path
sys.path.insert(0, str(Path(__file__).parent.parent))

from alembic import command
from alembic.config import Config
from config.database import get_database

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class EconomySystemMigrator:
    """Migrador do sistema de economia de API."""
    
    def __init__(self):
        self.backend_dir = Path(__file__).parent.parent
        self.alembic_cfg = Config(str(self.backend_dir / "alembic.ini"))
        
    async def run_full_migration(self):
        """Executa migra√ß√£o completa do sistema de economia."""
        logger.info("üöÄ Iniciando migra√ß√£o completa do sistema de economia")
        
        try:
            # 1. Verificar conex√£o com banco
            await self._check_database_connection()
            
            # 2. Executar migra√ß√µes SQL diretamente (Supabase style)
            await self._execute_supabase_migrations()
            
            # 3. Executar migra√ß√µes Alembic
            await self._execute_alembic_migrations()
            
            # 4. Verificar integridade do sistema
            await self._verify_system_integrity()
            
            logger.info("‚úÖ Migra√ß√£o completa do sistema de economia conclu√≠da")
            
        except Exception as e:
            logger.error(f"‚ùå Erro na migra√ß√£o: {e}")
            raise
    
    async def _check_database_connection(self):
        """Verifica conex√£o com o banco de dados."""
        logger.info("üîç Verificando conex√£o com banco de dados")
        
        try:
            async with get_database() as conn:
                result = await conn.fetchval("SELECT 1")
                if result == 1:
                    logger.info("‚úÖ Conex√£o com banco de dados OK")
                else:
                    raise Exception("Resposta inesperada do banco")
                    
        except Exception as e:
            logger.error(f"‚ùå Erro de conex√£o: {e}")
            raise
    
    async def _execute_supabase_migrations(self):
        """Executa migra√ß√µes SQL do Supabase."""
        logger.info("üìÑ Executando migra√ß√µes SQL do sistema de economia")
        
        migration_files = [
            "supabase/migrations/20250129000000_create_process_movements_cache.sql",
            "supabase/migrations/20250129000001_create_5_year_archive_system.sql"
        ]
        
        async with get_database() as conn:
            for migration_file in migration_files:
                file_path = self.backend_dir / migration_file
                
                if file_path.exists():
                    logger.info(f"üìÑ Executando: {migration_file}")
                    
                    try:
                        # Ler e executar SQL
                        sql_content = file_path.read_text(encoding='utf-8')
                        
                        # Dividir em statements individuais (separados por ponto e v√≠rgula)
                        statements = [stmt.strip() for stmt in sql_content.split(';') if stmt.strip()]
                        
                        for i, statement in enumerate(statements):
                            if statement:
                                try:
                                    await conn.execute(statement)
                                    logger.debug(f"  ‚úÖ Statement {i+1}/{len(statements)} executado")
                                except Exception as e:
                                    # Ignorar erros de objetos j√° existentes
                                    if any(msg in str(e).lower() for msg in [
                                        'already exists', 'j√° existe', 'duplicate'
                                    ]):
                                        logger.debug(f"  ‚ö†Ô∏è Objeto j√° existe (ignorando): {e}")
                                    else:
                                        logger.warning(f"  ‚ùå Erro no statement {i+1}: {e}")
                                        # N√£o falhar por statements individuais
                        
                        logger.info(f"‚úÖ Migra√ß√£o {migration_file} conclu√≠da")
                        
                    except Exception as e:
                        logger.error(f"‚ùå Erro na migra√ß√£o {migration_file}: {e}")
                        # Continuar com pr√≥ximas migra√ß√µes
                        
                else:
                    logger.warning(f"‚ö†Ô∏è Arquivo n√£o encontrado: {migration_file}")
    
    async def _execute_alembic_migrations(self):
        """Executa migra√ß√µes Alembic se existirem."""
        logger.info("üîß Verificando migra√ß√µes Alembic")
        
        try:
            # Verificar se h√° migra√ß√µes pendentes
            versions_dir = self.backend_dir / "alembic" / "versions"
            if versions_dir.exists() and list(versions_dir.glob("*.py")):
                logger.info("üì¶ Executando migra√ß√µes Alembic")
                command.upgrade(self.alembic_cfg, "head")
                logger.info("‚úÖ Migra√ß√µes Alembic conclu√≠das")
            else:
                logger.info("‚ÑπÔ∏è Nenhuma migra√ß√£o Alembic pendente")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro nas migra√ß√µes Alembic (continuando): {e}")
    
    async def _verify_system_integrity(self):
        """Verifica integridade do sistema ap√≥s migra√ß√£o."""
        logger.info("üîç Verificando integridade do sistema")
        
        async with get_database() as conn:
            # Verificar tabelas cr√≠ticas
            critical_tables = [
                'process_movements',
                'process_status_cache', 
                'process_optimization_config',
                'process_movements_archive',
                'api_economy_metrics'
            ]
            
            for table in critical_tables:
                try:
                    result = await conn.fetchval(
                        f"SELECT COUNT(*) FROM information_schema.tables WHERE table_name = '{table}'"
                    )
                    if result > 0:
                        logger.info(f"  ‚úÖ Tabela {table} existe")
                    else:
                        logger.warning(f"  ‚ö†Ô∏è Tabela {table} n√£o encontrada")
                        
                except Exception as e:
                    logger.error(f"  ‚ùå Erro verificando tabela {table}: {e}")
            
            # Verificar indexes cr√≠ticos
            try:
                index_check = await conn.fetchval(
                    """
                    SELECT COUNT(*) FROM pg_indexes 
                    WHERE tablename IN ('process_movements', 'process_optimization_config')
                    """
                )
                logger.info(f"  ‚úÖ {index_check} √≠ndices encontrados")
                
            except Exception as e:
                logger.warning(f"  ‚ö†Ô∏è Erro verificando √≠ndices: {e}")
            
            # Verificar fun√ß√µes SQL
            try:
                function_check = await conn.fetchval(
                    """
                    SELECT COUNT(*) FROM pg_proc 
                    WHERE proname IN ('clean_expired_process_cache', 'archive_old_movements_compressed')
                    """
                )
                logger.info(f"  ‚úÖ {function_check} fun√ß√µes SQL encontradas")
                
            except Exception as e:
                logger.warning(f"  ‚ö†Ô∏è Erro verificando fun√ß√µes: {e}")
    
    async def create_test_data(self):
        """Cria dados de teste para validar o sistema."""
        logger.info("üß™ Criando dados de teste")
        
        async with get_database() as conn:
            try:
                # Inserir dados de teste na configura√ß√£o
                test_config = """
                    INSERT INTO process_optimization_config (
                        cnj, detected_phase, process_area, access_pattern,
                        redis_ttl_seconds, db_ttl_seconds, access_count
                    ) VALUES (
                        '1234567-89.2024.1.23.0001',
                        'instrutoria',
                        'trabalhista',
                        'weekly',
                        3600,
                        86400,
                        5
                    ) ON CONFLICT (cnj) DO NOTHING
                """
                await conn.execute(test_config)
                
                # Inserir m√©tricas de economia de teste
                test_metrics = """
                    INSERT INTO api_economy_metrics (
                        date_recorded, cache_hit_rate, economy_percentage, daily_savings
                    ) VALUES (
                        CURRENT_DATE, 95.5, 92.3, 45.67
                    ) ON CONFLICT (date_recorded) DO NOTHING
                """
                await conn.execute(test_metrics)
                
                logger.info("‚úÖ Dados de teste criados")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erro criando dados de teste: {e}")

async def main():
    """Fun√ß√£o principal."""
    migrator = EconomySystemMigrator()
    
    try:
        # Executar migra√ß√£o completa
        await migrator.run_full_migration()
        
        # Criar dados de teste se solicitado
        if "--test-data" in sys.argv:
            await migrator.create_test_data()
        
        print("\n" + "="*60)
        print("üéâ SISTEMA DE ECONOMIA DE API MIGRADO COM SUCESSO!")
        print("="*60)
        print("")
        print("üìä Pr√≥ximos passos:")
        print("  1. Verificar dashboard admin: /api/admin/economy/dashboard/summary")
        print("  2. Monitorar m√©tricas: /api/admin/economy/metrics/historical")
        print("  3. Iniciar job de otimiza√ß√£o: python jobs/economic_optimization_job.py")
        print("  4. Treinar modelos ML: python services/predictive_cache_ml_service.py")
        print("")
        print("üí∞ Economia esperada: 95%+ das chamadas API")
        print("üöÄ Sistema funcionando offline: 99%+ do tempo")
        print("")
        
    except Exception as e:
        print(f"\n‚ùå ERRO NA MIGRA√á√ÉO: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 
# -*- coding: utf-8 -*-
"""
scripts/migrate_economy_system.py

Script para executar migra√ß√µes do sistema de economia de API.
Migra do sistema Supabase SQL para Alembic migrations.
"""

import asyncio
import logging
import os
import sys
from pathlib import Path

# Adicionar backend ao path
sys.path.insert(0, str(Path(__file__).parent.parent))

from alembic import command
from alembic.config import Config
from config.database import get_database

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class EconomySystemMigrator:
    """Migrador do sistema de economia de API."""
    
    def __init__(self):
        self.backend_dir = Path(__file__).parent.parent
        self.alembic_cfg = Config(str(self.backend_dir / "alembic.ini"))
        
    async def run_full_migration(self):
        """Executa migra√ß√£o completa do sistema de economia."""
        logger.info("üöÄ Iniciando migra√ß√£o completa do sistema de economia")
        
        try:
            # 1. Verificar conex√£o com banco
            await self._check_database_connection()
            
            # 2. Executar migra√ß√µes SQL diretamente (Supabase style)
            await self._execute_supabase_migrations()
            
            # 3. Executar migra√ß√µes Alembic
            await self._execute_alembic_migrations()
            
            # 4. Verificar integridade do sistema
            await self._verify_system_integrity()
            
            logger.info("‚úÖ Migra√ß√£o completa do sistema de economia conclu√≠da")
            
        except Exception as e:
            logger.error(f"‚ùå Erro na migra√ß√£o: {e}")
            raise
    
    async def _check_database_connection(self):
        """Verifica conex√£o com o banco de dados."""
        logger.info("üîç Verificando conex√£o com banco de dados")
        
        try:
            async with get_database() as conn:
                result = await conn.fetchval("SELECT 1")
                if result == 1:
                    logger.info("‚úÖ Conex√£o com banco de dados OK")
                else:
                    raise Exception("Resposta inesperada do banco")
                    
        except Exception as e:
            logger.error(f"‚ùå Erro de conex√£o: {e}")
            raise
    
    async def _execute_supabase_migrations(self):
        """Executa migra√ß√µes SQL do Supabase."""
        logger.info("üìÑ Executando migra√ß√µes SQL do sistema de economia")
        
        migration_files = [
            "supabase/migrations/20250129000000_create_process_movements_cache.sql",
            "supabase/migrations/20250129000001_create_5_year_archive_system.sql"
        ]
        
        async with get_database() as conn:
            for migration_file in migration_files:
                file_path = self.backend_dir / migration_file
                
                if file_path.exists():
                    logger.info(f"üìÑ Executando: {migration_file}")
                    
                    try:
                        # Ler e executar SQL
                        sql_content = file_path.read_text(encoding='utf-8')
                        
                        # Dividir em statements individuais (separados por ponto e v√≠rgula)
                        statements = [stmt.strip() for stmt in sql_content.split(';') if stmt.strip()]
                        
                        for i, statement in enumerate(statements):
                            if statement:
                                try:
                                    await conn.execute(statement)
                                    logger.debug(f"  ‚úÖ Statement {i+1}/{len(statements)} executado")
                                except Exception as e:
                                    # Ignorar erros de objetos j√° existentes
                                    if any(msg in str(e).lower() for msg in [
                                        'already exists', 'j√° existe', 'duplicate'
                                    ]):
                                        logger.debug(f"  ‚ö†Ô∏è Objeto j√° existe (ignorando): {e}")
                                    else:
                                        logger.warning(f"  ‚ùå Erro no statement {i+1}: {e}")
                                        # N√£o falhar por statements individuais
                        
                        logger.info(f"‚úÖ Migra√ß√£o {migration_file} conclu√≠da")
                        
                    except Exception as e:
                        logger.error(f"‚ùå Erro na migra√ß√£o {migration_file}: {e}")
                        # Continuar com pr√≥ximas migra√ß√µes
                        
                else:
                    logger.warning(f"‚ö†Ô∏è Arquivo n√£o encontrado: {migration_file}")
    
    async def _execute_alembic_migrations(self):
        """Executa migra√ß√µes Alembic se existirem."""
        logger.info("üîß Verificando migra√ß√µes Alembic")
        
        try:
            # Verificar se h√° migra√ß√µes pendentes
            versions_dir = self.backend_dir / "alembic" / "versions"
            if versions_dir.exists() and list(versions_dir.glob("*.py")):
                logger.info("üì¶ Executando migra√ß√µes Alembic")
                command.upgrade(self.alembic_cfg, "head")
                logger.info("‚úÖ Migra√ß√µes Alembic conclu√≠das")
            else:
                logger.info("‚ÑπÔ∏è Nenhuma migra√ß√£o Alembic pendente")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro nas migra√ß√µes Alembic (continuando): {e}")
    
    async def _verify_system_integrity(self):
        """Verifica integridade do sistema ap√≥s migra√ß√£o."""
        logger.info("üîç Verificando integridade do sistema")
        
        async with get_database() as conn:
            # Verificar tabelas cr√≠ticas
            critical_tables = [
                'process_movements',
                'process_status_cache', 
                'process_optimization_config',
                'process_movements_archive',
                'api_economy_metrics'
            ]
            
            for table in critical_tables:
                try:
                    result = await conn.fetchval(
                        f"SELECT COUNT(*) FROM information_schema.tables WHERE table_name = '{table}'"
                    )
                    if result > 0:
                        logger.info(f"  ‚úÖ Tabela {table} existe")
                    else:
                        logger.warning(f"  ‚ö†Ô∏è Tabela {table} n√£o encontrada")
                        
                except Exception as e:
                    logger.error(f"  ‚ùå Erro verificando tabela {table}: {e}")
            
            # Verificar indexes cr√≠ticos
            try:
                index_check = await conn.fetchval(
                    """
                    SELECT COUNT(*) FROM pg_indexes 
                    WHERE tablename IN ('process_movements', 'process_optimization_config')
                    """
                )
                logger.info(f"  ‚úÖ {index_check} √≠ndices encontrados")
                
            except Exception as e:
                logger.warning(f"  ‚ö†Ô∏è Erro verificando √≠ndices: {e}")
            
            # Verificar fun√ß√µes SQL
            try:
                function_check = await conn.fetchval(
                    """
                    SELECT COUNT(*) FROM pg_proc 
                    WHERE proname IN ('clean_expired_process_cache', 'archive_old_movements_compressed')
                    """
                )
                logger.info(f"  ‚úÖ {function_check} fun√ß√µes SQL encontradas")
                
            except Exception as e:
                logger.warning(f"  ‚ö†Ô∏è Erro verificando fun√ß√µes: {e}")
    
    async def create_test_data(self):
        """Cria dados de teste para validar o sistema."""
        logger.info("üß™ Criando dados de teste")
        
        async with get_database() as conn:
            try:
                # Inserir dados de teste na configura√ß√£o
                test_config = """
                    INSERT INTO process_optimization_config (
                        cnj, detected_phase, process_area, access_pattern,
                        redis_ttl_seconds, db_ttl_seconds, access_count
                    ) VALUES (
                        '1234567-89.2024.1.23.0001',
                        'instrutoria',
                        'trabalhista',
                        'weekly',
                        3600,
                        86400,
                        5
                    ) ON CONFLICT (cnj) DO NOTHING
                """
                await conn.execute(test_config)
                
                # Inserir m√©tricas de economia de teste
                test_metrics = """
                    INSERT INTO api_economy_metrics (
                        date_recorded, cache_hit_rate, economy_percentage, daily_savings
                    ) VALUES (
                        CURRENT_DATE, 95.5, 92.3, 45.67
                    ) ON CONFLICT (date_recorded) DO NOTHING
                """
                await conn.execute(test_metrics)
                
                logger.info("‚úÖ Dados de teste criados")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erro criando dados de teste: {e}")

async def main():
    """Fun√ß√£o principal."""
    migrator = EconomySystemMigrator()
    
    try:
        # Executar migra√ß√£o completa
        await migrator.run_full_migration()
        
        # Criar dados de teste se solicitado
        if "--test-data" in sys.argv:
            await migrator.create_test_data()
        
        print("\n" + "="*60)
        print("üéâ SISTEMA DE ECONOMIA DE API MIGRADO COM SUCESSO!")
        print("="*60)
        print("")
        print("üìä Pr√≥ximos passos:")
        print("  1. Verificar dashboard admin: /api/admin/economy/dashboard/summary")
        print("  2. Monitorar m√©tricas: /api/admin/economy/metrics/historical")
        print("  3. Iniciar job de otimiza√ß√£o: python jobs/economic_optimization_job.py")
        print("  4. Treinar modelos ML: python services/predictive_cache_ml_service.py")
        print("")
        print("üí∞ Economia esperada: 95%+ das chamadas API")
        print("üöÄ Sistema funcionando offline: 99%+ do tempo")
        print("")
        
    except Exception as e:
        print(f"\n‚ùå ERRO NA MIGRA√á√ÉO: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 