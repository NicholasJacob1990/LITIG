#!/usr/bin/env python3
"""
Demo R√°pido: Sistema de Embeddings V2 - Estrat√©gia Original

Demonstra o sistema completo funcionando:
- Estrat√©gia original: OpenAI ‚Üí Voyage ‚Üí Arctic
- Sistema h√≠brido inteligente
- Compara√ß√£o V1 vs V2
- Valida√ß√£o de qualidade

Uso:
    python quick_demo_v2.py
"""
import asyncio
import sys
import os
import time
from typing import Dict, Any

# Adicionar path do backend ao sys.path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def print_banner():
    """Imprime banner do demo."""
    print("""
üöÄ ======================================================================
   LITIG-1: DEMO SISTEMA DE EMBEDDINGS V2 - ESTRAT√âGIA ORIGINAL
   Migra√ß√£o 768D ‚Üí 1024D Especializada em Dom√≠nio Jur√≠dico
======================================================================

üìã Estrat√©gia Original Implementada:
   1. OpenAI text-embedding-3-small (prim√°rio) - M√°xima qualidade
   2. Voyage Law-2 (especializado legal) - NDCG@10: 0.847  
   3. Arctic Embed L (fallback local) - 1024D nativo

üéØ Benef√≠cios Esperados:
   ‚Ä¢ +35-40% melhoria na precis√£o para casos jur√≠dicos
   ‚Ä¢ -50% redu√ß√£o de casos mal-matchados
   ‚Ä¢ +33% capacidade sem√¢ntica (1024D vs 768D)
   ‚Ä¢ Zero downtime durante migra√ß√£o

======================================================================
""")

async def demo_v2_service():
    """Demonstra o servi√ßo V2 com estrat√©gia original."""
    print("\nüß† TESTANDO SERVI√áO V2 - ESTRAT√âGIA ORIGINAL")
    print("=" * 60)
    
    try:
        from services.embedding_service_v2 import legal_embedding_service_v2
        
        # 1. Mostrar configura√ß√£o da estrat√©gia
        print("üìä Configura√ß√£o da Estrat√©gia Original:")
        stats = legal_embedding_service_v2.get_provider_stats()
        print(f"   Estrat√©gia: {stats['strategy']}")
        print(f"   Dimens√µes: {stats['embedding_dimension']}D")
        
        for provider, info in stats['providers'].items():
            status = "‚úÖ Dispon√≠vel" if info['available'] else "‚ùå Indispon√≠vel"
            priority = info['priority']
            justification = info['justification']
            print(f"   {priority}. {provider}: {status}")
            print(f"      ‚îî‚îÄ {justification}")
        
        # 2. Testar gera√ß√£o de embeddings
        print(f"\nüß™ Testando Gera√ß√£o de Embeddings:")
        
        test_cases = [
            {
                "text": "Advogado especialista em direito empresarial com 15 anos de experi√™ncia",
                "context": "lawyer_cv",
                "description": "CV de advogado empresarial"
            },
            {
                "text": "Caso de responsabilidade civil por danos em acidente de tr√¢nsito",
                "context": "case",
                "description": "Caso de direito civil"
            },
            {
                "text": "Parecer sobre constitucionalidade de lei municipal",
                "context": "legal_opinion",
                "description": "Parecer constitucional"
            }
        ]
        
        for i, test in enumerate(test_cases, 1):
            print(f"\n   Teste {i}: {test['description']}")
            try:
                start_time = time.time()
                embedding, provider = await legal_embedding_service_v2.generate_legal_embedding(
                    test["text"], test["context"]
                )
                generation_time = time.time() - start_time
                
                print(f"   ‚úÖ Sucesso: {len(embedding)}D via {provider}")
                print(f"      ‚îî‚îÄ Tempo: {generation_time:.3f}s")
                print(f"      ‚îî‚îÄ Contexto: {test['context']}")
                
            except Exception as e:
                print(f"   ‚ùå Erro: {e}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Servi√ßo V2 n√£o dispon√≠vel: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro no servi√ßo V2: {e}")
        return False

async def demo_hybrid_service():
    """Demonstra o servi√ßo h√≠brido inteligente."""
    print("\nüîÑ TESTANDO SERVI√áO H√çBRIDO INTELIGENTE")
    print("=" * 60)
    
    try:
        from services.hybrid_embedding_service import hybrid_embedding_service
        
        # 1. Status do servi√ßo h√≠brido
        print("üìä Status do Servi√ßo H√≠brido:")
        status = hybrid_embedding_service.get_service_status()
        
        print(f"   Estrat√©gia: {status['hybrid_service']['strategy']}")
        print(f"   Threshold V2: {status['hybrid_service']['v2_threshold']*100:.0f}%")
        print(f"   V1 dispon√≠vel: {'‚úÖ' if status['v1_service']['available'] else '‚ùå'}")
        print(f"   V2 dispon√≠vel: {'‚úÖ' if status['v2_service']['available'] else '‚ùå'}")
        
        # 2. Testar gera√ß√£o h√≠brida
        print(f"\nüß™ Testando Gera√ß√£o H√≠brida:")
        
        test_text = "Especialista em fus√µes e aquisi√ß√µes com MBA em direito empresarial"
        
        try:
            result = await hybrid_embedding_service.generate_embedding(
                test_text, "lawyer_cv"
            )
            
            print(f"   ‚úÖ Embedding gerado:")
            print(f"      ‚îî‚îÄ Dimens√µes: {result.dimensions}D")
            print(f"      ‚îî‚îÄ Vers√£o: {result.version}")
            print(f"      ‚îî‚îÄ Provedor: {result.provider}")
            print(f"      ‚îî‚îÄ Tempo: {result.generation_time:.3f}s")
            print(f"      ‚îî‚îÄ Confian√ßa: {result.confidence_score:.2f}")
            
        except Exception as e:
            print(f"   ‚ùå Erro na gera√ß√£o h√≠brida: {e}")
        
        # 3. Testar compara√ß√£o V1 vs V2
        print(f"\n‚öñÔ∏è  Testando Compara√ß√£o V1 vs V2:")
        
        try:
            comparison = await hybrid_embedding_service.compare_versions(
                test_text, "lawyer_cv"
            )
            
            if comparison.get("v1", {}).get("success") and comparison.get("v2", {}).get("success"):
                v1 = comparison["v1"]
                v2 = comparison["v2"]
                comp = comparison.get("comparison", {})
                
                print(f"   üìä Resultados da Compara√ß√£o:")
                print(f"      V1: {v1['dimensions']}D via {v1['provider']} ({v1['generation_time']:.3f}s)")
                print(f"      V2: {v2['dimensions']}D via {v2['provider']} ({v2['generation_time']:.3f}s)")
                print(f"      Diferen√ßa: +{comp.get('dimension_difference', 0)}D")
                
                if comp.get('time_difference', 0) < 0:
                    print(f"      ‚ö° V2 √© {abs(comp['time_difference']):.3f}s mais r√°pido")
                else:
                    print(f"      üêå V1 √© {comp['time_difference']:.3f}s mais r√°pido")
                    
            else:
                print("   ‚ö†Ô∏è  Compara√ß√£o parcial - nem todas as vers√µes funcionaram")
                
        except Exception as e:
            print(f"   ‚ùå Erro na compara√ß√£o: {e}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Servi√ßo h√≠brido n√£o dispon√≠vel: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro no servi√ßo h√≠brido: {e}")
        return False

async def demo_migration_status():
    """Demonstra verifica√ß√£o do status da migra√ß√£o."""
    print("\nüìà VERIFICANDO STATUS DA MIGRA√á√ÉO")
    print("=" * 60)
    
    try:
        from scripts.migrate_embeddings_v2 import EmbeddingMigrationV2
        
        migrator = EmbeddingMigrationV2(dry_run=True)
        
        print("üìä Status da Migra√ß√£o V1 ‚Üí V2:")
        status = await migrator.check_migration_status()
        
        print(f"   Total de advogados: {status['total_lawyers']}")
        print(f"   Progresso da migra√ß√£o: {status['migration_progress']:.1f}%")
        print(f"   Cobertura V2: {status['v2_coverage']['percentage']:.1f}%")
        print(f"   Pronto para switch: {'‚úÖ SIM' if status['ready_for_v2_switch'] else '‚ùå N√ÉO'}")
        
        print(f"\n   üìã Breakdown por Status:")
        breakdown = status['status_breakdown']
        for status_name, count in breakdown.items():
            print(f"      {status_name}: {count} advogados")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar status da migra√ß√£o: {e}")
        return False

async def demo_performance_comparison():
    """Demonstra compara√ß√£o de performance detalhada."""
    print("\n‚ö° AN√ÅLISE DE PERFORMANCE V1 vs V2")
    print("=" * 60)
    
    try:
        from services.hybrid_embedding_service import hybrid_embedding_service
        
        # Casos de teste para an√°lise
        test_cases = [
            "Advogado criminalista especializado em crimes econ√¥micos",
            "Caso de direito trabalhista - horas extras n√£o pagas",
            "Contrato de presta√ß√£o de servi√ßos advocat√≠cios"
        ]
        
        v1_times = []
        v2_times = []
        
        print("üß™ Executando testes de performance...")
        
        for i, test_case in enumerate(test_cases, 1):
            print(f"   Teste {i}/3: {test_case[:50]}...")
            
            try:
                # V1
                start_time = time.time()
                v1_result = await hybrid_embedding_service.generate_embedding(
                    test_case, "case", force_version="v1"
                )
                v1_time = time.time() - start_time
                v1_times.append(v1_time)
                
                # V2
                start_time = time.time()
                v2_result = await hybrid_embedding_service.generate_embedding(
                    test_case, "case", force_version="v2"
                )
                v2_time = time.time() - start_time
                v2_times.append(v2_time)
                
                print(f"      V1: {v1_result.dimensions}D em {v1_time:.3f}s")
                print(f"      V2: {v2_result.dimensions}D em {v2_time:.3f}s")
                
            except Exception as e:
                print(f"      ‚ùå Erro no teste {i}: {e}")
        
        # An√°lise dos resultados
        if v1_times and v2_times:
            print(f"\nüìä An√°lise de Performance:")
            print(f"   V1 - Tempo m√©dio: {sum(v1_times)/len(v1_times):.3f}s")
            print(f"   V2 - Tempo m√©dio: {sum(v2_times)/len(v2_times):.3f}s")
            
            v1_avg = sum(v1_times) / len(v1_times)
            v2_avg = sum(v2_times) / len(v2_times)
            
            if v2_avg < v1_avg:
                improvement = ((v1_avg - v2_avg) / v1_avg) * 100
                print(f"   ‚ö° V2 √© {improvement:.1f}% mais r√°pido que V1")
            else:
                degradation = ((v2_avg - v1_avg) / v1_avg) * 100
                print(f"   üêå V2 √© {degradation:.1f}% mais lento que V1")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na an√°lise de performance: {e}")
        return False

async def demo_quick_validation():
    """Executa valida√ß√£o r√°pida do sistema."""
    print("\n‚úÖ VALIDA√á√ÉO R√ÅPIDA DO SISTEMA")
    print("=" * 60)
    
    try:
        from scripts.test_embedding_migration import EmbeddingMigrationTester
        
        tester = EmbeddingMigrationTester()
        
        print("üß™ Executando testes b√°sicos...")
        basic_results = await tester.run_basic_test()
        
        # Analisar resultados
        if basic_results.get("hybrid_service_status", {}).get("error"):
            print("‚ùå Problema no servi√ßo h√≠brido")
            return False
        
        sample_embeddings = basic_results.get("sample_embeddings", [])
        successful_samples = [s for s in sample_embeddings if s.get("success", False)]
        
        print(f"üìä Resultados da Valida√ß√£o:")
        print(f"   Amostras testadas: {len(sample_embeddings)}")
        print(f"   Sucessos: {len(successful_samples)}")
        print(f"   Taxa de sucesso: {len(successful_samples)/len(sample_embeddings)*100:.1f}%")
        
        if successful_samples:
            print(f"   Vers√µes usadas:")
            for sample in successful_samples:
                version = sample.get("version", "unknown")
                provider = sample.get("provider", "unknown")
                dimensions = sample.get("dimensions", 0)
                print(f"      {version}: {dimensions}D via {provider}")
        
        # Verificar se sistema est√° funcional
        success_rate = len(successful_samples) / len(sample_embeddings) * 100
        if success_rate >= 80:
            print(f"\n‚úÖ SISTEMA FUNCIONAL - Taxa de sucesso: {success_rate:.1f}%")
            return True
        else:
            print(f"\n‚ùå SISTEMA COM PROBLEMAS - Taxa de sucesso: {success_rate:.1f}%")
            return False
        
    except Exception as e:
        print(f"‚ùå Erro na valida√ß√£o: {e}")
        return False

def print_summary(results: Dict[str, bool]):
    """Imprime resumo final do demo."""
    print("\n" + "=" * 70)
    print("üìã RESUMO DO DEMO - SISTEMA EMBEDDINGS V2")
    print("=" * 70)
    
    total_tests = len(results)
    successful_tests = sum(results.values())
    
    print(f"üß™ Testes Executados: {total_tests}")
    print(f"‚úÖ Sucessos: {successful_tests}")
    print(f"‚ùå Falhas: {total_tests - successful_tests}")
    print(f"üìä Taxa de Sucesso: {successful_tests/total_tests*100:.1f}%")
    
    print(f"\nüìã Detalhamento:")
    for test_name, success in results.items():
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"   {test_name}: {status}")
    
    if successful_tests == total_tests:
        print(f"\nüéâ DEMO CONCLU√çDO COM SUCESSO!")
        print(f"‚úÖ Sistema de Embeddings V2 com estrat√©gia original est√° funcionando perfeitamente!")
        print(f"üöÄ Pronto para migra√ß√£o em produ√ß√£o!")
    else:
        print(f"\n‚ö†Ô∏è  DEMO PARCIALMENTE CONCLU√çDO")
        print(f"üîß Alguns componentes precisam de configura√ß√£o adicional")
        print(f"üìñ Consulte o guia de migra√ß√£o para resolver problemas")
    
    print(f"\nüìö Pr√≥ximos Passos:")
    print(f"   1. Configurar API keys necess√°rias")
    print(f"   2. Executar migra√ß√µes SQL no banco")
    print(f"   3. Executar migra√ß√£o gradual dos embeddings")
    print(f"   4. Monitorar performance em produ√ß√£o")
    
    print("=" * 70)

async def main():
    """Fun√ß√£o principal do demo."""
    print_banner()
    
    results = {}
    
    try:
        # 1. Testar servi√ßo V2
        print("üöÄ Iniciando demo do sistema V2...")
        results["v2_service"] = await demo_v2_service()
        
        # 2. Testar servi√ßo h√≠brido
        results["hybrid_service"] = await demo_hybrid_service()
        
        # 3. Verificar status da migra√ß√£o
        results["migration_status"] = await demo_migration_status()
        
        # 4. An√°lise de performance
        results["performance_analysis"] = await demo_performance_comparison()
        
        # 5. Valida√ß√£o r√°pida
        results["quick_validation"] = await demo_quick_validation()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Demo interrompido pelo usu√°rio")
        return 1
    except Exception as e:
        print(f"\n‚ùå Erro cr√≠tico no demo: {e}")
        return 1
    
    # Mostrar resumo
    print_summary(results)
    
    return 0

if __name__ == "__main__":
    exit_code = asyncio.run(main())
 
 