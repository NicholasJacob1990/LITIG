import asyncio
import json
import os
import uuid
from dataclasses import asdict, dataclass
from datetime import datetime
from typing import Dict, List, Literal, Optional, Tuple

import anthropic
import openai
from dotenv import load_dotenv

from .conversation_state_manager import conversation_state_manager

load_dotenv()

# Configura√ß√µes
ANTHROPIC_API_KEY = os.getenv("ANTHROPIC_API_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

Strategy = Literal["simple", "failover", "ensemble"]
ComplexityLevel = Literal["low", "medium", "high"]


@dataclass
class TriageResult:
    """Resultado final da triagem inteligente."""
    case_id: str
    strategy_used: Strategy
    complexity_level: ComplexityLevel
    confidence_score: float
    triage_data: Dict
    conversation_summary: str
    processing_time_ms: int


class IntelligentInterviewerService:
    """
    IA "Entrevistadora" que conduz conversas inteligentes e detecta complexidade em tempo real.

    MIGRADO PARA REDIS - Sprint 1 Implementado
    """

    def __init__(self):
        if not ANTHROPIC_API_KEY:
            raise ValueError(
                "Chave da API da Anthropic (ANTHROPIC_API_KEY) n√£o encontrada.")

        self.anthropic_client = anthropic.AsyncAnthropic(api_key=ANTHROPIC_API_KEY)
        self.openai_client = openai.AsyncOpenAI(
            api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

        # REMOVIDO: self.active_conversations - agora usa Redis
        self.state_manager = conversation_state_manager

        # Prompt especializado integrando metodologia do LEX-9000 com detec√ß√£o de
        # complexidade
        self.interviewer_prompt = """
        Voc√™ √© "Justus", um assistente jur√≠dico especializado em triagem inteligente da LITGO5, evolu√≠do do sistema LEX-9000.

        **SEU PAPEL √öNICO:**
        Voc√™ √© simultaneamente um entrevistador emp√°tico E um detector de complexidade em tempo real, usando metodologia jur√≠dica estruturada.

        **ESPECIALIZA√á√ÉO JUR√çDICA:**
        - Conhecimento profundo do ordenamento jur√≠dico brasileiro
        - Experi√™ncia em todas as √°reas do direito (civil, trabalhista, criminal, administrativo, etc.)
        - Capacidade de identificar urg√™ncia, complexidade e viabilidade processual
        - Foco em aspectos pr√°ticos e estrat√©gicos

        **METODOLOGIA DE TRIAGEM INTELIGENTE:**

        ## FASE 1 - IDENTIFICA√á√ÉO INICIAL (1-2 perguntas)
        - √Årea jur√≠dica principal
        - Natureza do problema (preventivo vs contencioso)
        - Urg√™ncia temporal
        - **AVALIA√á√ÉO**: Detectar se √© caso simples, m√©dio ou complexo

        ## FASE 2 - DETALHAMENTO FACTUAL (2-6 perguntas conforme complexidade)
        - Partes envolvidas e suas qualifica√ß√µes
        - Cronologia dos fatos relevantes
        - Documenta√ß√£o dispon√≠vel
        - Valores envolvidos (quando aplic√°vel)
        - Tentativas de solu√ß√£o extrajudicial

        ## FASE 3 - ASPECTOS T√âCNICOS (0-4 perguntas - apenas se complexo)
        - Prazos legais e prescri√ß√£o
        - Jurisdi√ß√£o competente
        - Complexidade probat√≥ria
        - Precedentes ou jurisprud√™ncia conhecida

        **AVALIA√á√ÉO DE COMPLEXIDADE EM TEMPO REAL:**

        üü¢ **BAIXA COMPLEXIDADE** (strategy: "simple") - 3-5 perguntas:
        - Casos rotineiros: multa de tr√¢nsito, atraso de voo, produto defeituoso
        - Quest√µes simples de consumidor, vizinhan√ßa, cobran√ßa indevida
        - Situa√ß√µes com precedentes claros e solu√ß√µes padronizadas
        - Apenas uma parte envolvida, sem quest√µes t√©cnicas complexas
        - **A√á√ÉO**: Colete dados b√°sicos e finalize rapidamente

        üü° **M√âDIA COMPLEXIDADE** (strategy: "failover") - 5-8 perguntas:
        - Casos trabalhistas padr√£o, contratos simples, acidentes de tr√¢nsito
        - Quest√µes familiares b√°sicas, disputas de aluguel convencionais
        - Situa√ß√µes que requerem an√°lise jur√≠dica, mas sem m√∫ltiplas vari√°veis
        - Casos com alguma complexidade t√©cnica, mas dentro do padr√£o
        - **A√á√ÉO**: Colete dados estruturados para an√°lise posterior

        üî¥ **ALTA COMPLEXIDADE** (strategy: "ensemble") - 6-10 perguntas:
        - M√∫ltiplas partes envolvidas, quest√µes societ√°rias complexas
        - Propriedade intelectual, patentes, marcas registradas
        - Recupera√ß√£o judicial, fal√™ncia, reestrutura√ß√£o empresarial
        - Quest√µes internacionais, contratos complexos, lit√≠gios estrat√©gicos
        - Casos que envolvem jurisprud√™ncia especializada ou precedentes conflitantes
        - **A√á√ÉO**: Colete dados completos e detalhados para an√°lise ensemble

        **PERGUNTAS INTELIGENTES:**
        - Seja espec√≠fico conforme a √°rea identificada
        - Adapte as perguntas ao tipo de caso (ex: trabalhista vs civil)
        - Priorize informa√ß√µes que impactam viabilidade e estrat√©gia
        - Considere aspectos econ√¥micos e temporais

        **CRIT√âRIOS PARA FINALIZA√á√ÉO:**
        Termine a entrevista quando tiver informa√ß√µes suficientes sobre:
        ‚úÖ √Årea jur√≠dica e instituto espec√≠fico
        ‚úÖ Fatos essenciais e cronologia
        ‚úÖ Partes e suas qualifica√ß√µes
        ‚úÖ Urg√™ncia e prazos
        ‚úÖ Viabilidade preliminar do caso
        ‚úÖ Documenta√ß√£o dispon√≠vel

        **FINALIZA√á√ÉO POR COMPLEXIDADE:**
        - **Baixa**: Voc√™ mesmo pode gerar a an√°lise final (economia de recursos)
        - **M√©dia/Alta**: Prepare dados estruturados para an√°lise posterior

        **SINAL DE FINALIZA√á√ÉO:**
        Quando a conversa estiver completa, termine com: [TRIAGE_COMPLETE:STRATEGY_X:CONFIDENCE_Y]
        Onde X = simple/failover/ensemble e Y = 0.0-1.0

        **DIRETRIZES DE CONVERSA:**
        - Uma pergunta por vez, seja emp√°tico e profissional
        - Mantenha linguagem profissional mas acess√≠vel
        - Seja objetivo e pr√°tico nas perguntas
        - Considere sempre o contexto brasileiro
        - N√£o mencione "complexidade" ou "estrat√©gias" para o cliente
        - Foque em entender o problema completamente
        - Use linguagem acess√≠vel, evite jarg√µes jur√≠dicos
        """

    async def start_conversation(self, user_id: str) -> Tuple[str, str]:
        """
        Inicia uma nova conversa de triagem inteligente - MIGRADO PARA REDIS.

        Returns:
            Tuple[case_id, primeira_mensagem_ia]
        """
        case_id = str(uuid.uuid4())

        # Estado inicial da conversa
        initial_state = {
            "user_id": user_id,
            "messages": [],
            "complexity_level": "medium",
            "confidence_score": 0.0,
            "collected_data": {},
            "is_complete": False,
            "strategy_recommended": "failover",
            "completion_reason": "",
            "status": "active",
            "created_at": datetime.now().isoformat()
        }

        # Gerar primeira mensagem
        first_message = "Ol√°! Sou o Justus, seu assistente jur√≠dico da LITGO5. Estou aqui para entender seu caso e ajud√°-lo da melhor forma poss√≠vel. Para come√ßarmos, voc√™ poderia me descrever o problema que est√° enfrentando?"

        # Adicionar primeira mensagem ao estado
        initial_state["messages"].append({
            "role": "assistant",
            "content": first_message,
            "timestamp": datetime.now().isoformat()
        })

        # Salvar no Redis
        await self.state_manager.save_conversation_state(case_id, initial_state)

        return case_id, first_message

    async def continue_conversation(
            self, case_id: str, user_message: str) -> Tuple[str, bool]:
        """
        Continua uma conversa existente - MIGRADO PARA REDIS.

        Returns:
            Tuple[resposta_ia, conversa_finalizada]
        """
        # Recuperar estado do Redis
        state = await self.state_manager.get_conversation_state(case_id)
        if not state:
            raise ValueError(f"Conversa {case_id} n√£o encontrada")

        # Adicionar mensagem do usu√°rio
        state["messages"].append({
            "role": "user",
            "content": user_message,
            "timestamp": datetime.now().isoformat()
        })

        # Gerar resposta da IA
        ai_response = await self._generate_ai_response(state)

        # Verificar se a conversa foi finalizada
        if "[TRIAGE_COMPLETE:" in ai_response:
            return await self._finalize_conversation(case_id, ai_response, state)

        # Salvar estado atualizado no Redis
        state["updated_at"] = datetime.now().isoformat()
        await self.state_manager.save_conversation_state(case_id, state)

        return ai_response, False

    async def _generate_ai_response(self, state: Dict) -> str:
        """Gera resposta da IA usando Claude com avalia√ß√£o de complexidade."""

        # Preparar hist√≥rico para o Claude
        messages = [{"role": "system", "content": self.interviewer_prompt}]

        # Adicionar mensagens da conversa (sem timestamps para o Claude)
        for msg in state["messages"]:
            messages.append({
                "role": msg["role"],
                "content": msg["content"]
            })

        try:
            response = await self.anthropic_client.messages.create(
                model="claude-3-5-sonnet-20240620",
                max_tokens=300,
                temperature=0.7,
                messages=messages
            )

            ai_response = response.content[0].text

            # Adicionar resposta ao hist√≥rico
            state["messages"].append({
                "role": "assistant",
                "content": ai_response,
                "timestamp": datetime.now().isoformat()
            })

            # Avaliar complexidade se n√£o for finaliza√ß√£o
            if not "[TRIAGE_COMPLETE:" in ai_response:
                await self._evaluate_complexity(state)

            return ai_response

        except Exception as e:
            print(f"Erro na gera√ß√£o de resposta: {e}")
            fallback_response = "Desculpe, estou com problemas t√©cnicos. Voc√™ poderia repetir sua √∫ltima mensagem?"
            state["messages"].append({
                "role": "assistant",
                "content": fallback_response,
                "timestamp": datetime.now().isoformat()
            })
            return fallback_response

    async def _evaluate_complexity(self, state: Dict):
        """Avalia a complexidade do caso baseado na conversa atual."""

        # Prompt espec√≠fico para avalia√ß√£o de complexidade
        complexity_prompt = """
        Analise a conversa a seguir e determine a complexidade do caso jur√≠dico.

        Responda APENAS com um JSON no formato:
        {
            "complexity": "low|medium|high",
            "confidence": 0.0-1.0,
            "reasoning": "breve explica√ß√£o",
            "indicators": ["indicador1", "indicador2"]
        }

        Crit√©rios:
        - LOW: casos simples, rotineiros, com solu√ß√µes padronizadas
        - MEDIUM: casos que requerem an√°lise jur√≠dica padr√£o
        - HIGH: casos complexos, m√∫ltiplas partes, quest√µes especializadas
        """

        # Preparar contexto da conversa
        conversation_text = "\n".join([
            f"{msg['role'].upper()}: {msg['content']}"
            for msg in state["messages"][-6:]  # √öltimas 6 mensagens
        ])

        try:
            response = await self.anthropic_client.messages.create(
                model="claude-3-haiku-20240307",  # Modelo mais r√°pido para avalia√ß√£o
                max_tokens=200,
                temperature=0.1,
                messages=[
                    {"role": "system", "content": complexity_prompt},
                    {"role": "user", "content": f"Conversa:\n{conversation_text}"}
                ]
            )

            # Extrair JSON da resposta
            response_text = response.content[0].text
            if "{" in response_text and "}" in response_text:
                json_start = response_text.find("{")
                json_end = response_text.rfind("}") + 1
                complexity_data = json.loads(response_text[json_start:json_end])

                # Atualizar estado
                state["complexity_level"] = complexity_data.get("complexity", "medium")
                state["confidence_score"] = complexity_data.get("confidence", 0.5)

                # Determinar estrat√©gia recomendada
                if state["complexity_level"] == "low":
                    state["strategy_recommended"] = "simple"
                elif state["complexity_level"] == "high":
                    state["strategy_recommended"] = "ensemble"
                else:
                    state["strategy_recommended"] = "failover"

        except Exception as e:
            print(f"Erro na avalia√ß√£o de complexidade: {e}")
            # Manter valores padr√£o
            state["complexity_level"] = "medium"
            state["confidence_score"] = 0.5
            state["strategy_recommended"] = "failover"

    async def _finalize_conversation(
            self, case_id: str, ai_response: str, state: Dict) -> Tuple[str, bool]:
        """Finaliza a conversa e processa o resultado."""

        # Extrair informa√ß√µes do sinal de finaliza√ß√£o
        if "[TRIAGE_COMPLETE:" in ai_response:
            # Remover o sinal da resposta do usu√°rio
            clean_response = ai_response.split("[TRIAGE_COMPLETE:")[0].strip()

            # Extrair estrat√©gia e confian√ßa do sinal
            signal_part = ai_response.split("[TRIAGE_COMPLETE:")[1].replace("]", "")
            parts = signal_part.split(":")

            if len(parts) >= 2:
                strategy = parts[0].replace("STRATEGY_", "").lower()
                confidence = float(parts[1].replace("CONFIDENCE_", ""))

                state["strategy_recommended"] = strategy
                state["confidence_score"] = confidence
        else:
            clean_response = ai_response

        # Marcar como completa
        state["is_complete"] = True
        state["completion_reason"] = "natural_end"
        state["status"] = "completed"
        state["completed_at"] = datetime.now().isoformat()

        # Processar resultado baseado na estrat√©gia
        if state["strategy_recommended"] == "simple":
            # Para casos simples, gerar resultado diretamente
            await self._process_simple_case(state)
        else:
            # Para casos complexos, preparar dados para an√°lise posterior
            await self._prepare_complex_case_data(state)

        # Salvar estado final no Redis
        await self.state_manager.save_conversation_state(case_id, state)

        return clean_response, True

    async def _process_simple_case(self, state: Dict):
        """Processa casos simples diretamente, sem an√°lise posterior."""

        # Prompt para gerar an√°lise completa de caso simples
        simple_analysis_prompt = """
        Voc√™ √© um assistente jur√≠dico especializado. Analise a conversa a seguir e gere uma an√°lise completa do caso.

        Responda APENAS com um JSON no formato:
        {
            "area": "√°rea jur√≠dica principal",
            "subarea": "sub√°rea espec√≠fica",
            "urgency_h": n√∫mero_de_horas_para_a√ß√£o,
            "summary": "resumo conciso do caso",
            "keywords": ["palavra1", "palavra2"],
            "sentiment": "Positivo|Neutro|Negativo",
            "analysis": {
                "viability": "Alta|M√©dia|Baixa",
                "complexity": "Baixa",
                "recommended_action": "a√ß√£o recomendada",
                "estimated_cost": "estimativa de custo",
                "next_steps": ["passo1", "passo2"]
            }
        }
        """

        conversation_text = "\n".join([
            f"{msg['role'].upper()}: {msg['content']}"
            for msg in state["messages"]
        ])

        try:
            response = await self.anthropic_client.messages.create(
                model="claude-3-5-sonnet-20240620",
                max_tokens=1000,
                temperature=0.3,
                messages=[
                    {"role": "system", "content": simple_analysis_prompt},
                    {"role": "user", "content": f"Conversa completa:\n{conversation_text}"}
                ]
            )

            # Extrair JSON da resposta
            response_text = response.content[0].text
            if "{" in response_text and "}" in response_text:
                json_start = response_text.find("{")
                json_end = response_text.rfind("}") + 1
                analysis_data = json.loads(response_text[json_start:json_end])

                state["collected_data"] = analysis_data

        except Exception as e:
            print(f"Erro na an√°lise de caso simples: {e}")
            # Fallback b√°sico
            state["collected_data"] = {
                "area": "N√£o identificado",
                "subarea": "Geral",
                "urgency_h": 72,
                "summary": "An√°lise pendente",
                "keywords": [],
                "sentiment": "Neutro",
                "analysis": {
                    "viability": "M√©dia",
                    "complexity": "Baixa",
                    "recommended_action": "Consultar advogado",
                    "estimated_cost": "A definir",
                    "next_steps": ["Reunir documenta√ß√£o"]
                }
            }

    async def _prepare_complex_case_data(self, state: Dict):
        """Prepara dados estruturados para casos complexos usando schema LEX-9000."""

        # Implementa√ß√£o simplificada - vers√£o completa seria muito extensa
        conversation_text = "\n".join([
            f"{msg['role'].upper()}: {msg['content']}"
            for msg in state["messages"]
        ])

        # Dados b√°sicos para casos complexos
        state["collected_data"] = {
            "basic_info": {
                "area": "An√°lise pendente",
                "subarea": "An√°lise pendente",
                "urgency_h": 72,
                "summary": f"Caso complexo identificado - {len(state['messages'])} mensagens coletadas"
            },
            "conversation_summary": conversation_text,
            "complexity_factors": ["M√∫ltiplas vari√°veis", "An√°lise especializada requerida"],
            "keywords": [],
            "sentiment": "Neutro",
            "entities": {
                "parties": [],
                "dates": [],
                "amounts": [],
                "locations": []
            }
        }

    async def get_triage_result(self, case_id: str) -> Optional[TriageResult]:
        """
        Obt√©m resultado final da triagem - MIGRADO PARA REDIS.
        """
        state = await self.state_manager.get_conversation_state(case_id)
        if not state or not state.get("is_complete"):
            return None

        # Gerar resumo da conversa
        conversation_summary = f"Conversa com {
            len(
                state.get(
                    'messages',
                    []))} mensagens"

        return TriageResult(
            case_id=case_id,
            strategy_used=state.get("strategy_recommended", "failover"),
            complexity_level=state.get("complexity_level", "medium"),
            confidence_score=state.get("confidence_score", 0.5),
            triage_data=state.get("collected_data", {}),
            conversation_summary=conversation_summary,
            processing_time_ms=0  # Ser√° calculado pelo orquestrador
        )

    def cleanup_conversation(self, case_id: str):
        """
        Remove conversa - MIGRADO PARA REDIS.
        """
        # Execu√ß√£o ass√≠ncrona para n√£o bloquear
        asyncio.create_task(
            self.state_manager.delete_conversation_state(case_id)
        )

    async def get_conversation_status(self, case_id: str) -> Optional[Dict]:
        """
        Obt√©m status da conversa - MIGRADO PARA REDIS.
        """
        state = await self.state_manager.get_conversation_state(case_id)
        if not state:
            return None

        return {
            "case_id": case_id,
            "status": state.get("status", "unknown"),
            "complexity_level": state.get("complexity_level", "unknown"),
            "confidence_score": state.get("confidence_score", 0.0),
            "message_count": len(state.get("messages", [])),
            "created_at": state.get("created_at"),
            "updated_at": state.get("updated_at"),
            "is_complete": state.get("is_complete", False)
        }


# Inst√¢ncia √∫nica do servi√ßo
intelligent_interviewer_service = IntelligentInterviewerService()
