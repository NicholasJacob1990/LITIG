#!/usr/bin/env python3
"""
Teste da Conserva√ß√£o da L√≥gica de Modelos no V2
===============================================

Script para testar se a l√≥gica espec√≠fica de uso de cada modelo de IA foi conservada.
"""

import asyncio
import sys
import os

# Adicionar o diret√≥rio atual ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services.intelligent_triage_orchestrator_v2 import get_intelligent_triage_orchestrator_v2


async def test_model_logic_conservation():
    """Teste da conserva√ß√£o da l√≥gica espec√≠fica de modelos."""
    print("üß™ TESTE DA CONSERVA√á√ÉO DA L√ìGICA DE MODELOS NO V2")
    print("=" * 70)
    
    try:
        # Inicializar orquestrador
        orchestrator = get_intelligent_triage_orchestrator_v2()
        
        # Verificar status dos servi√ßos
        status = orchestrator.get_service_status()
        print(f"\nüìä STATUS DOS SERVI√áOS:")
        for service, available in status.items():
            status_icon = "‚úÖ" if available else "‚ùå"
            print(f"   {service}: {status_icon}")
        
        # Testar diferentes cen√°rios de complexidade
        test_cases = [
            {
                "name": "Caso Simples (Multa de Tr√¢nsito)",
                "summary": "Recebi uma multa de tr√¢nsito por excesso de velocidade",
                "expected_complexity": "low",
                "expected_models": ["Llama 4 Scout"],
                "expected_lex9000": False
            },
            {
                "name": "Caso M√©dio (Trabalhista)",
                "summary": "N√£o estou recebendo horas extras h√° 6 meses",
                "expected_complexity": "medium",
                "expected_models": ["Llama 4 Scout", "GPT-4o"],
                "expected_lex9000": True
            },
            {
                "name": "Caso Complexo (Empresarial)",
                "summary": "Preciso de assessoria para fus√£o de empresas e quest√µes societ√°rias",
                "expected_complexity": "high",
                "expected_models": ["Claude Sonnet", "GPT-4o", "Ensemble"],
                "expected_lex9000": True
            }
        ]
        
        print(f"\nüéØ TESTANDO L√ìGICA DE MODELOS POR COMPLEXIDADE:")
        
        for i, test_case in enumerate(test_cases, 1):
            print(f"\n{i}. {test_case['name']}")
            print(f"   Resumo: {test_case['summary']}")
            print(f"   Complexidade esperada: {test_case['expected_complexity']}")
            print(f"   Modelos esperados: {', '.join(test_case['expected_models'])}")
            print(f"   LEX-9000 esperado: {'SIM' if test_case['expected_lex9000'] else 'N√ÉO'}")
            
            # Simular dados do caso
            case_data = {
                "summary": test_case['summary'],
                "area": "Direito do Trabalho" if "trabalhista" in test_case['summary'].lower() else "Direito Empresarial",
                "subarea": "Horas Extras" if "horas" in test_case['summary'].lower() else "Fus√£o e Aquisi√ß√£o",
                "urgency_h": 48,
                "keywords": ["multa", "tr√¢nsito"] if "multa" in test_case['summary'].lower() else ["empresarial", "societ√°rio"]
            }
            
            # Testar detec√ß√£o de complexidade
            preliminary_complexity = orchestrator._assess_preliminary_complexity(case_data)
            print(f"   Complexidade detectada: {preliminary_complexity}")
            
            # Verificar se a complexidade est√° correta
            if preliminary_complexity == test_case['expected_complexity']:
                print(f"   ‚úÖ Complexidade CORRETA")
            else:
                print(f"   ‚ùå Complexidade INCORRETA (esperado: {test_case['expected_complexity']})")
        
        # Testar workflow completo
        print(f"\nüöÄ EXECUTANDO WORKFLOW COMPLETO...")
        result = await orchestrator.start_intelligent_triage("test_model_logic_001")
        
        # Resultados
        print(f"\nüìä RESULTADOS DO WORKFLOW:")
        print(f"   ‚úÖ Sucesso: {'SIM' if result.success else 'N√ÉO'}")
        print(f"   üÜî Case ID: {result.case_id}")
        print(f"   ‚öñÔ∏è √Årea: {result.triage_result.get('area', 'N/A')}")
        print(f"   üîç Sub√°rea: {result.triage_result.get('subarea', 'N/A')}")
        print(f"   ü§ñ LEX-9000: {'USADO' if result.lex_analysis else 'N√ÉO USADO'}")
        print(f"   ‚è±Ô∏è Dura√ß√£o: {result.processing_summary.get('total_duration', 0):.2f}s")
        
        # Detalhes dos modelos usados
        if result.lex_analysis:
            print(f"\nü§ñ DETALHES DOS MODELOS:")
            lex = result.lex_analysis
            print(f"   Tipo: {lex.get('analysis_type', 'N/A')}")
            print(f"   Modelo usado: {lex.get('model_used', 'N/A')}")
            print(f"   SDK usado: {lex.get('sdk_used', 'N/A')}")
            print(f"   Confian√ßa: {lex.get('confidence', 0):.2f}")
        
        # Verificar conserva√ß√£o da l√≥gica
        print(f"\nüéØ VERIFICA√á√ÉO DA CONSERVA√á√ÉO:")
        
        # 1. Verificar se LangChain-Grok tem prioridade
        langchain_grok_used = False
        if result.lex_analysis and "langchain" in result.lex_analysis.get('sdk_used', '').lower():
            langchain_grok_used = True
            print(f"   ‚úÖ LangChain-Grok usado (prioridade mantida)")
        else:
            print(f"   ‚ö†Ô∏è LangChain-Grok n√£o usado (fallback ativo)")
        
        # 2. Verificar se modelos especializados s√£o usados
        triage_result = result.triage_result
        if "model_used" in triage_result:
            print(f"   ‚úÖ Modelo espec√≠fico usado: {triage_result['model_used']}")
        else:
            print(f"   ‚ö†Ô∏è Modelo espec√≠fico n√£o identificado")
        
        # 3. Verificar se estrat√©gias por complexidade s√£o aplicadas
        complexity_level = result.triage_result.get('complexity_level', 'medium')
        print(f"   ‚úÖ Complexidade detectada: {complexity_level}")
        
        # 4. Verificar se LEX-9000 √© usado apenas para casos complexos
        if result.lex_analysis:
            if complexity_level == "low":
                print(f"   ‚ö†Ô∏è LEX-9000 usado em caso simples (pode ser otimizado)")
            else:
                print(f"   ‚úÖ LEX-9000 usado apropriadamente para caso {complexity_level}")
        else:
            if complexity_level == "low":
                print(f"   ‚úÖ LEX-9000 n√£o usado para caso simples (correto)")
            else:
                print(f"   ‚ö†Ô∏è LEX-9000 n√£o usado para caso {complexity_level} (pode ser necess√°rio)")
        
        # Avalia√ß√£o final
        print(f"\nüéØ AVALIA√á√ÉO FINAL DA CONSERVA√á√ÉO:")
        if result.success:
            print(f"   ‚úÖ L√ìGICA CONSERVADA - Workflow funcionando")
            
            # Verificar se a l√≥gica espec√≠fica foi mantida
            conservation_score = 0
            total_checks = 4
            
            if langchain_grok_used or "openrouter" in str(result.lex_analysis).lower():
                conservation_score += 1
                print(f"   ‚úÖ Prioridade de modelos mantida")
            
            if "model_used" in triage_result or "strategy_used" in triage_result:
                conservation_score += 1
                print(f"   ‚úÖ Estrat√©gias espec√≠ficas mantidas")
            
            if complexity_level in ["low", "medium", "high"]:
                conservation_score += 1
                print(f"   ‚úÖ Detec√ß√£o de complexidade funcionando")
            
            if result.lex_analysis is not None:
                conservation_score += 1
                print(f"   ‚úÖ LEX-9000 integrado corretamente")
            
            conservation_percentage = (conservation_score / total_checks) * 100
            print(f"   üìä Score de conserva√ß√£o: {conservation_percentage:.1f}%")
            
            if conservation_percentage >= 75:
                print(f"   üéâ EXCELENTE - L√≥gica espec√≠fica de modelos conservada!")
            elif conservation_percentage >= 50:
                print(f"   ‚úÖ BOM - Maioria da l√≥gica conservada")
            else:
                print(f"   ‚ö†Ô∏è ATEN√á√ÉO - Algumas l√≥gicas podem ter sido perdidas")
        else:
            print(f"   ‚ùå TESTE FALHOU - Verificar erros acima")
        
        return result
        
    except Exception as e:
        print(f"\nüí• ERRO CR√çTICO NO TESTE: {e}")
        import traceback
        traceback.print_exc()
        return None


if __name__ == "__main__":
    print("üß™ INICIANDO TESTE DA CONSERVA√á√ÉO DA L√ìGICA DE MODELOS")
    print("=" * 70)
    
    # Executar teste
    result = asyncio.run(test_model_logic_conservation())
    
    if result and result.success:
        print(f"\nüéâ TESTE CONCLU√çDO COM SUCESSO!")
        sys.exit(0)
    else:
        print(f"\n‚ùå TESTE FALHOU!")
        sys.exit(1) 