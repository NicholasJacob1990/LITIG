#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Valida√ß√£o das Otimiza√ß√µes de Retreino
====================================

Script para validar se todas as melhorias de retreino foram implementadas corretamente.
"""

import os
import re
import sys
from pathlib import Path
from typing import Dict, List, Tuple


class RetrainOptimizationValidator:
    """Validador das otimiza√ß√µes de retreino implementadas"""
    
    def __init__(self):
        self.backend_dir = Path(__file__).parent
        self.validation_results = {}
        
    def validate_all(self) -> Dict[str, bool]:
        """Executa todas as valida√ß√µes"""
        
        print("üîç VALIDANDO OTIMIZA√á√ïES DE RETREINO")
        print("=" * 50)
        
        # Valida√ß√£o 1: Celery App Configuration
        self.validate_celery_configuration()
        
        # Valida√ß√£o 2: Partnership Retrain Optimizations
        self.validate_partnership_optimizations()
        
        # Valida√ß√£o 3: LTR Optimizations
        self.validate_ltr_optimizations()
        
        # Valida√ß√£o 4: Clustering Optimizations
        self.validate_clustering_optimizations()
        
        # Valida√ß√£o 5: New Jobs Implementation
        self.validate_new_jobs()
        
        # Resumo final
        self.print_validation_summary()
        
        return self.validation_results
    
    def validate_celery_configuration(self):
        """Valida as mudan√ßas no celery_app.py"""
        
        print("\nüìÖ 1. VALIDANDO CONFIGURA√á√ÉO CELERY")
        print("-" * 40)
        
        celery_file = self.backend_dir / "celery_app.py"
        
        if not celery_file.exists():
            self.validation_results["celery_config"] = False
            print("‚ùå Arquivo celery_app.py n√£o encontrado")
            return
            
        content = celery_file.read_text()
        
        # Verifica√ß√µes espec√≠ficas
        checks = [
            ("partnership_full_retrain", "auto-retrain-partnerships-full", "Retreino completo de parcerias"),
            ("partnership_quick_update", "auto-retrain-partnerships-quick", "Atualiza√ß√£o r√°pida de parcerias"),
            ("clustering_lawyers_12h", "hour='2,14'", "Clustering lawyers otimizado (12h)"),
            ("clustering_cases_8h", "hour='0,8,16'", "Clustering cases otimizado (8h)"),
            ("soft_skills_3x_week", "day_of_week='0,2,4'", "Soft skills 3x por semana"),
            ("iep_daily", "calculate-iep-daily", "IEP job di√°rio"),
            ("geo_features", "update-geo-features", "Geo features job")
        ]
        
        all_passed = True
        for check_id, pattern, description in checks:
            if pattern in content:
                print(f"‚úÖ {description}")
                self.validation_results[check_id] = True
            else:
                print(f"‚ùå {description} - PADR√ÉO N√ÉO ENCONTRADO: {pattern}")
                self.validation_results[check_id] = False
                all_passed = False
        
        self.validation_results["celery_config"] = all_passed
    
    def validate_partnership_optimizations(self):
        """Valida otimiza√ß√µes do algoritmo de parcerias"""
        
        print("\nü§ù 2. VALIDANDO OTIMIZA√á√ïES DE PARCERIAS")
        print("-" * 40)
        
        partnership_file = self.backend_dir / "jobs" / "partnership_retrain.py"
        
        if not partnership_file.exists():
            self.validation_results["partnership_optimizations"] = False
            print("‚ùå Arquivo partnership_retrain.py n√£o encontrado")
            return
            
        content = partnership_file.read_text()
        
        # Verifica√ß√µes
        checks = [
            ("days_back_14", "days_back: int = 14", "Janela de dados 14 dias"),
            ("min_feedback_75", "min_feedback_count: int = 75", "M√≠nimo 75 samples"),
            ("quick_update_task", "quick_weights_update_task", "Task de atualiza√ß√£o r√°pida"),
            ("quick_update_implementation", "def quick_weights_update_task", "Implementa√ß√£o quick update")
        ]
        
        all_passed = True
        for check_id, pattern, description in checks:
            if pattern in content:
                print(f"‚úÖ {description}")
                self.validation_results[check_id] = True
            else:
                print(f"‚ùå {description}")
                self.validation_results[check_id] = False
                all_passed = False
        
        self.validation_results["partnership_optimizations"] = all_passed
    
    def validate_ltr_optimizations(self):
        """Valida otimiza√ß√µes do LTR"""
        
        print("\nüéØ 3. VALIDANDO OTIMIZA√á√ïES LTR")
        print("-" * 40)
        
        ltr_file = self.backend_dir / "jobs" / "auto_retrain.py"
        
        if not ltr_file.exists():
            self.validation_results["ltr_optimizations"] = False
            print("‚ùå Arquivo auto_retrain.py n√£o encontrado")
            return
            
        content = ltr_file.read_text()
        
        # Verifica√ß√µes
        checks = [
            ("ltr_14_days", "days_back=14", "Janela de dados 14 dias"),
            ("ltr_200_samples", "< 200 and not force_retrain", "M√≠nimo 200 samples"),
            ("ltr_optimization_comment", "OTIMIZADO: 14 dias", "Coment√°rio de otimiza√ß√£o")
        ]
        
        all_passed = True
        for check_id, pattern, description in checks:
            if pattern in content:
                print(f"‚úÖ {description}")
                self.validation_results[check_id] = True
            else:
                print(f"‚ùå {description}")
                self.validation_results[check_id] = False
                all_passed = False
        
        self.validation_results["ltr_optimizations"] = all_passed
    
    def validate_clustering_optimizations(self):
        """Valida otimiza√ß√µes de clustering"""
        
        print("\nüîç 4. VALIDANDO OTIMIZA√á√ïES CLUSTERING")
        print("-" * 40)
        
        celery_file = self.backend_dir / "celery_app.py"
        content = celery_file.read_text()
        
        # Verificar frequ√™ncias otimizadas
        lawyers_12h = "hour='2,14'" in content  # 12 horas
        cases_8h = "hour='0,8,16'" in content   # 8 horas
        
        if lawyers_12h:
            print("‚úÖ Clustering lawyers: 12 horas (economia 33% CPU)")
            self.validation_results["clustering_lawyers_optimized"] = True
        else:
            print("‚ùå Clustering lawyers: n√£o otimizado")
            self.validation_results["clustering_lawyers_optimized"] = False
            
        if cases_8h:
            print("‚úÖ Clustering cases: 8 horas (economia 25% CPU)")
            self.validation_results["clustering_cases_optimized"] = True
        else:
            print("‚ùå Clustering cases: n√£o otimizado")
            self.validation_results["clustering_cases_optimized"] = False
        
        self.validation_results["clustering_optimizations"] = lawyers_12h and cases_8h
    
    def validate_new_jobs(self):
        """Valida implementa√ß√£o de novos jobs"""
        
        print("\nüÜï 5. VALIDANDO NOVOS JOBS")
        print("-" * 40)
        
        # Verificar arquivos de jobs
        jobs_to_check = [
            ("geo_updater.py", "Geo Features Job"),
            ("calculate_engagement_scores.py", "IEP Job")
        ]
        
        jobs_valid = True
        
        for filename, description in jobs_to_check:
            job_file = self.backend_dir / "jobs" / filename
            
            if job_file.exists():
                content = job_file.read_text()
                
                # Verificar se tem task Celery
                if "@shared_task" in content:
                    print(f"‚úÖ {description}: Implementado com task Celery")
                    self.validation_results[f"job_{filename.replace('.py', '')}"] = True
                else:
                    print(f"‚ö†Ô∏è  {description}: Arquivo existe mas sem task Celery")
                    self.validation_results[f"job_{filename.replace('.py', '')}"] = False
                    jobs_valid = False
            else:
                print(f"‚ùå {description}: Arquivo n√£o encontrado")
                self.validation_results[f"job_{filename.replace('.py', '')}"] = False
                jobs_valid = False
        
        self.validation_results["new_jobs"] = jobs_valid
    
    def print_validation_summary(self):
        """Imprime resumo da valida√ß√£o"""
        
        print("\n" + "=" * 50)
        print("üìä RESUMO DA VALIDA√á√ÉO")
        print("=" * 50)
        
        # Contar sucessos
        total_checks = len(self.validation_results)
        passed_checks = sum(1 for result in self.validation_results.values() if result)
        
        success_rate = (passed_checks / total_checks) * 100 if total_checks > 0 else 0
        
        print(f"\nüéØ RESULTADO GERAL: {passed_checks}/{total_checks} verifica√ß√µes passaram")
        print(f"üìà Taxa de Sucesso: {success_rate:.1f}%")
        
        if success_rate >= 90:
            print("\nüéâ EXCELENTE! Otimiza√ß√µes implementadas com sucesso!")
        elif success_rate >= 70:
            print("\n‚úÖ BOM! Maioria das otimiza√ß√µes implementadas.")
        else:
            print("\n‚ö†Ô∏è  ATEN√á√ÉO! V√°rias otimiza√ß√µes precisam ser revisadas.")
        
        # Detalhes por categoria
        print("\nüìã DETALHES POR CATEGORIA:")
        
        categories = {
            "Configura√ß√£o Celery": ["celery_config"],
            "Parcerias": ["partnership_optimizations"],
            "LTR": ["ltr_optimizations"],
            "Clustering": ["clustering_optimizations"],
            "Novos Jobs": ["new_jobs"]
        }
        
        for category, keys in categories.items():
            category_results = [self.validation_results.get(key, False) for key in keys]
            category_success = all(category_results)
            status = "‚úÖ" if category_success else "‚ùå"
            print(f"   {status} {category}")
        
        print("\nüöÄ PR√ìXIMOS PASSOS:")
        print("   1. Testar jobs em ambiente de desenvolvimento")
        print("   2. Monitorar performance ap√≥s implementa√ß√£o")
        print("   3. A/B testing para validar melhorias")
        print("   4. Rollback autom√°tico se degrada√ß√£o > 5%")


def main():
    """Fun√ß√£o principal"""
    
    validator = RetrainOptimizationValidator()
    results = validator.validate_all()
    
    # Retornar c√≥digo de sa√≠da baseado no sucesso
    total_checks = len(results)
    passed_checks = sum(1 for result in results.values() if result)
    success_rate = (passed_checks / total_checks) * 100 if total_checks > 0 else 0
    
    # Sucesso se >= 90% das verifica√ß√µes passaram
    exit_code = 0 if success_rate >= 90 else 1
    sys.exit(exit_code)


if __name__ == "__main__":
    main() 